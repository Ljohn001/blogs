{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Go语言基础之map.md","hash":"fb97af3b02101911861fd11212953c9ef2d670be","modified":1675401087053},{"_id":"source/_posts/Hexo-分类和标签.md","hash":"1993d92688d544b10febc7402c256936439b7d34","modified":1675401087054},{"_id":"source/_posts/Go语言基础之结构体.md","hash":"e8a084e6c41c668ea74f7f731fe9cd1e05ee5942","modified":1675401087054},{"_id":"source/CNAME","hash":"2d00f2dc547972775b4ec0a8fe7497c84ff2cc61","modified":1675401855977},{"_id":"source/_posts/Kubernetes容器网络.md","hash":"f78e8b1f29c3047c3ed697fff7db0b352d3d7941","modified":1675401087054},{"_id":"source/_posts/My-First-Blog.md","hash":"cd169df9e40ca7a4fa284d32da5e5957c2a3b305","modified":1675401087054},{"_id":"source/_posts/My-New-Post.md","hash":"4e3660da43267a3245b2502e7da481c46e23541f","modified":1675401087055},{"_id":"source/about/index.md","hash":"ccba8423e3fe737a487895368115c26bfc265f32","modified":1675401087055},{"_id":"source/categories/index.md","hash":"001017c95c40a55640960d61742233c142914487","modified":1675401087055},{"_id":"source/_posts/hello-world.md","hash":"a93f10a197fbcfb008a025710eb2bffde665dfbb","modified":1675401087055},{"_id":"source/tags/index.md","hash":"8262e35ce60021e127b04dd3d624fed957606765","modified":1675401087055},{"_id":"source/_posts/Go语言基础之接口.md","hash":"5f662e09ea4d4b83c4460ebe8b3e02445003268b","modified":1675401087054},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1675401086573},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"9b9c5b8158d1296c64a354e57a3b0b809575a77d","modified":1675401086574},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1675401086573},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"ee8d1240372fc90e2666759088ad0c5375666d74","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1675401086573},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"a796587e264bbdb88b38a6abc0ab8076f544055b","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"e0e52a7ba52fa70c3557f00ddf681f66098ac8b7","modified":1675401086574},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"7204ba07bd8168868abbe6c2c0ce2f2be8d7cea1","modified":1675401086573},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1675401086574},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"0b994863599d62c56d2bc50d20b94332ed9d98cf","modified":1675401086574},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"5b9ce449bd4f7e3ba46131546e75976efe31a1f6","modified":1675401086574},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1675401086574},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1675401086572},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1675401086572},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1675401086573},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1675401086573},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"d1bf03af239d94a8f03e040ef4dd5ea6334a48fd","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1675401086574},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1675401086573},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"a8720f01c429c839149d7f5991c49541011f4796","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"bb45b395d530d2930c79555432e398c142d4a16f","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"f5cbd41c6afb49639b59ab5ad659da0d3b7f25dd","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1675401086588},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"d1a5b26c8239189493c1f7d8fd0b8f8ec3d11eaa","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"f92dc2116776ac897b913130b574f1c78491bc76","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"c2d4d0537f9aed4eba2bb3d093ad89ca9e80cff9","modified":1675401086589},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fc0b813452a705911af37b891513ae50a8795710","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1675401086578},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1675401086590},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1675401086578},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1675401086578},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1675401086596},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1675401086596},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1675401086597},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1675401086597},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1675401086597},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1675401086597},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1675401086598},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"c9b4d8ec10a74f29cf1f9c4275f0cae3bd93b427","modified":1675401086598},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"428e3c39053b44760463682848f2eae238ff9d64","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1675401086575},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"c72be46dadef859681c87b9fca27590dee255594","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1675401086576},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1675401086577},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1675401086578},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1675401086578},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1675401086578},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1675401086587},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1675401086584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1675401086584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1675401086578},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1675401086586},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"336b7ac54b66a1d70baa9bde51d1a5aca92f451e","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1675401086592},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"f69c52415a5201083b3811e9faf7de80476569d3","modified":1675401086592},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1675401086592},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1675401086592},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1675401086592},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1675401086592},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1675401086593},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1675401086594},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"86f3962a6ea11b2951b4ddb6424fda5e95ec962a","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"7fdbe79b6c98157706be016f990ab3501bd796b1","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1675401086596},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1675401086596},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1675401086595},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1675401086596},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1675401086596},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1675401086598},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1675401086598},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1675401086579},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1675401086579},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1675401086579},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1675401086579},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1675401086579},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1675401086579},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1675401086579},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1675401086580},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1675401086582},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1675401086581},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1675401086582},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1675401086582},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1675401086582},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1675401086582},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1675401086582},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1675401086583},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1675401086584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1675401086584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1675401086584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1675401086584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1675401086584},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1675401086585},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1675401086591},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1675401086592},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1675401086592},{"_id":"public/about/index.html","hash":"b6a81f6010a83cf3bc4332c17d3cd2f7da814374","modified":1675404996133},{"_id":"public/tags/index.html","hash":"5beba29feb2b9c2c60a24acd4291ba579810d4ec","modified":1675404996133},{"_id":"public/categories/index.html","hash":"068af774fb282aaa8e6ab8dd24327b027526ba3c","modified":1675404996133},{"_id":"public/2021/06/22/My-First-Blog/index.html","hash":"f7df0b3c405590f002f01c59268193dfe894ab5d","modified":1675404996133},{"_id":"public/2021/06/21/My-New-Post/index.html","hash":"64cbb0867b1f085d9c8b2cc1b9ccde5cc061928f","modified":1675404996133},{"_id":"public/categories/hexo/index.html","hash":"54ac9cdb65b2cf04301e4ef63c0616d506685553","modified":1675404996133},{"_id":"public/categories/默认分类/index.html","hash":"663c0f3423233724ac3e0ef2112b5c140325ea6c","modified":1675404996133},{"_id":"public/archives/2021/06/index.html","hash":"274d9031e806ccd5d27a26d65cd2c674d66500d0","modified":1675404996133},{"_id":"public/archives/2021/07/index.html","hash":"2f01ed261576eb4e87c11f890d55648758447dc8","modified":1675404996133},{"_id":"public/archives/2021/11/index.html","hash":"e4d49855f2933b6a156677c5a73ec34f4fa8b54c","modified":1675404996133},{"_id":"public/archives/2023/index.html","hash":"783967382d717c35e940214133182053424ee0e5","modified":1675404996133},{"_id":"public/archives/2023/02/index.html","hash":"f64c081f271a6ad7a7bd03126bf08efa7de01e40","modified":1675404996133},{"_id":"public/tags/Go/index.html","hash":"15f94e5d6a77af57dc9f81dc74749ea291ebf3b7","modified":1675404996133},{"_id":"public/tags/Golang/index.html","hash":"64dec74490b2504aa703e039b971eeee48be332c","modified":1675404996133},{"_id":"public/tags/Go学习/index.html","hash":"4d1e5816bef62933d468752cd728c3575fe72416","modified":1675404996133},{"_id":"public/tags/blog/index.html","hash":"0c954929b21310ad844cc931289a7833a076d90b","modified":1675404996133},{"_id":"public/tags/hexo/index.html","hash":"719ccc547b4e0211c3dff2180785d7abbc00ecb8","modified":1675404996133},{"_id":"public/2023/02/03/hello-world/index.html","hash":"2eea5f903186d7a44b4f20823b3ace666a8ddd4d","modified":1675404996133},{"_id":"public/2021/11/08/Hexo-分类和标签/index.html","hash":"55e45bf0cdb15eebc091c0b5bce90c095e069171","modified":1675404996133},{"_id":"public/2021/07/15/Kubernetes容器网络/index.html","hash":"22d867a657dadcfe15a5c2705c26acc0ee86f192","modified":1675404996133},{"_id":"public/2021/07/02/Go语言基础之接口/index.html","hash":"a09906123f3ebdbce2df4b279cf8f1476efcb2ec","modified":1675404996133},{"_id":"public/2021/06/25/Go语言基础之map/index.html","hash":"50b0ea6e1bc54526bf2cea080442754bdb28ec8f","modified":1675404996133},{"_id":"public/2021/06/22/Go语言基础之结构体/index.html","hash":"564fbf1864576c915128465e5bbf5b66bcd33a9e","modified":1675404996133},{"_id":"public/index.html","hash":"82d053f9e5d046347ab63c7e6d78440eff21d394","modified":1675404996133},{"_id":"public/archives/index.html","hash":"217a08e5a86a6291cf4d23ff1b01635c388d5686","modified":1675404996133},{"_id":"public/archives/2021/index.html","hash":"cc03165759e266c35d5ef54e372cc2107724f5d3","modified":1675404996133},{"_id":"public/tags/默认标签/index.html","hash":"15bb797d59c30c15cdf276dfd0f64430798643b9","modified":1675404996133},{"_id":"public/CNAME","hash":"2d00f2dc547972775b4ec0a8fe7497c84ff2cc61","modified":1675404996133},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1675404996133},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1675404996133},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1675404996133},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1675404996133},{"_id":"public/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1675404996133},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1675404996133},{"_id":"public/js/utils.js","hash":"c9b4d8ec10a74f29cf1f9c4275f0cae3bd93b427","modified":1675404996133},{"_id":"public/css/index.css","hash":"b8cb553c2428323c94548a9eaefc9dc03c044d47","modified":1675404996133},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1675404996133},{"_id":"public/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1675404996133}],"Category":[{"name":"hexo","_id":"cldo4vkrk0007srvi043seujf"},{"name":"默认分类","_id":"cldo4vkrn000hsrvif5w9ee2l"}],"Data":[],"Page":[{"title":"about","date":"2021-06-21T13:12:28.000Z","_content":"一个热爱技术，爱折腾的Linux运维，初级Gopher，打砸工程师\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-06-21 21:12:28\n---\n一个热爱技术，爱折腾的Linux运维，初级Gopher，打砸工程师\n","updated":"2023-02-03T05:11:27.055Z","path":"about/index.html","comments":1,"layout":"page","_id":"cldo4vkrf0000srvi3ophc3o6","content":"<p>一个热爱技术，爱折腾的Linux运维，初级Gopher，打砸工程师</p>\n","site":{"data":{}},"cover":false,"length":33,"excerpt":"","more":"<p>一个热爱技术，爱折腾的Linux运维，初级Gopher，打砸工程师</p>\n"},{"title":"categories","date":"2021-06-21T13:16:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-06-21 21:16:03\ntype: categories\n---\n","updated":"2023-02-03T05:11:27.055Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cldo4vkri0002srvifz3h3kum","content":"","site":{"data":{}},"cover":false,"length":0,"excerpt":"","more":""},{"title":"tags","date":"2021-11-08T02:47:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-08 10:47:33\ntype: tags\n---\n","updated":"2023-02-03T05:11:27.055Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cldo4vkrk0005srvid6d3c2ug","content":"","site":{"data":{}},"cover":false,"length":0,"excerpt":"","more":""}],"Post":[{"title":"Go语言基础之map","date":"2021-06-25T02:13:33.000Z","_content":"Go语言中提供的映射关系容器为`map`，其内部使用`散列表（hash）`实现。\n\n# map\n\nmap是一种无序的基于`key-value`的数据结构，Go语言中的map是引用类型，必须初始化才能使用。\n\n## map定义\n\nGo语言中 `map`的定义语法如下：\n\n```go\nmap[KeyType]ValueType\n```\n\n其中，\n\n- KeyType:表示键的类型。\n- ValueType:表示键对应的值的类型。\n\nmap类型的变量默认初始值为nil，需要使用make()函数来分配内存。语法为：\n\n```go\nmake(map[KeyType]ValueType, [cap])\n```\n\n其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。\n\n## map基本使用\n\nmap中的数据都是成对出现的，map的基本使用示例代码如下：\n\n<!--more-->\n```go\nfunc main() {\n\tscoreMap := make(map[string]int, 8)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tfmt.Println(scoreMap)\n\tfmt.Println(scoreMap[\"小明\"])\n\tfmt.Printf(\"type of a:%T\\n\", scoreMap)\n}\n```\n\n输出：\n\n```bash\nmap[小明:100 张三:90]\n100\ntype of a:map[string]int\n```\n\nmap也支持在声明的时候填充元素，例如：\n\n```go\nfunc main() {\n\tuserInfo := map[string]string{\n\t\t\"username\": \"沙河小王子\",\n\t\t\"password\": \"123456\",\n\t}\n\tfmt.Println(userInfo) //\n}\n```\n\n## 判断某个键是否存在\n\nGo语言中有个判断map中键是否存在的特殊写法，格式如下:\n\n```go\nvalue, ok := map[key]\n```\n\n举个例子：\n\n```go\nfunc main() {\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\t// 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值\n\tv, ok := scoreMap[\"张三\"]\n\tif ok {\n\t\tfmt.Println(v)\n\t} else {\n\t\tfmt.Println(\"查无此人\")\n\t}\n}\n```\n\n## map的遍历\n\nGo语言中使用`for range`遍历map。\n\n```go\nfunc main() {\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tscoreMap[\"娜扎\"] = 60\n\tfor k, v := range scoreMap {\n\t\tfmt.Println(k, v)\n\t}\n}\n```\n\n但我们只想遍历key的时候，可以按下面的写法：\n\n```go\nfunc main() {\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tscoreMap[\"娜扎\"] = 60\n\tfor k := range scoreMap {\n\t\tfmt.Println(k)\n\t}\n}\n```\n\n**注意：** 遍历map时的元素顺序与添加键值对的顺序无关。\n\n## 使用delete()函数删除键值对\n\n使用`delete()`内建函数从map中删除一组键值对，`delete()`函数的格式如下：\n\n```go\ndelete(map, key)\n```\n\n其中，\n\n- map:表示要删除键值对的map\n- key:表示要删除的键值对的键\n\n示例代码如下：\n\n```go\nfunc main(){\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tscoreMap[\"娜扎\"] = 60\n\tdelete(scoreMap, \"小明\")//将小明:100从map中删除\n\tfor k,v := range scoreMap{\n\t\tfmt.Println(k, v)\n\t}\n}\n```\n\n## 按照指定顺序遍历map\n\n```go\nfunc main() {\n\trand.Seed(time.Now().UnixNano()) //初始化随机数种子\n\n\tvar scoreMap = make(map[string]int, 200)\n\n\tfor i := 0; i < 100; i++ {\n\t\tkey := fmt.Sprintf(\"stu%02d\", i) //生成stu开头的字符串\n\t\tvalue := rand.Intn(100)          //生成0~99的随机整数\n\t\tscoreMap[key] = value\n\t}\n\t//取出map中的所有key存入切片keys\n\tvar keys = make([]string, 0, 200)\n\tfor key := range scoreMap {\n\t\tkeys = append(keys, key)\n\t}\n\t//对切片进行排序\n\tsort.Strings(keys)\n\t//按照排序后的key遍历map\n\tfor _, key := range keys {\n\t\tfmt.Println(key, scoreMap[key])\n\t}\n}\n```\n\n## 元素为map类型的切片\n\n下面的代码演示了切片中的元素为map类型时的操作：\n\n```go\nfunc main() {\n\tvar mapSlice = make([]map[string]string, 3)\n\tfor index, value := range mapSlice {\n\t\tfmt.Printf(\"index:%d value:%v\\n\", index, value)\n\t}\n\tfmt.Println(\"after init\")\n\t// 对切片中的map元素进行初始化\n\tmapSlice[0] = make(map[string]string, 10)\n\tmapSlice[0][\"name\"] = \"小王子\"\n\tmapSlice[0][\"password\"] = \"123456\"\n\tmapSlice[0][\"address\"] = \"沙河\"\n\tfor index, value := range mapSlice {\n\t\tfmt.Printf(\"index:%d value:%v\\n\", index, value)\n\t}\n}\n```\n\n## 值为切片类型的map\n\n下面的代码演示了map中值为切片类型的操作：\n\n```go\nfunc main() {\n\tvar sliceMap = make(map[string][]string, 3)\n\tfmt.Println(sliceMap)\n\tfmt.Println(\"after init\")\n\tkey := \"中国\"\n\tvalue, ok := sliceMap[key]\n\tif !ok {\n\t\tvalue = make([]string, 0, 2)\n\t}\n\tvalue = append(value, \"北京\", \"上海\")\n\tsliceMap[key] = value\n\tfmt.Println(sliceMap)\n}\n```\n\n# 练习题\n\n1. 写一个程序，统计一个字符串中每个单词出现的次数。比如：”how do you do”中how=1 do=2 you=1。\n2. 观察下面代码，写出最终的打印结果。\n\n```go\nfunc main() {\n\ttype Map map[string][]int\n\tm := make(Map)\n\ts := []int{1, 2}\n\ts = append(s, 3)\n\tfmt.Printf(\"%+v\\n\", s)\n\tm[\"q1mi\"] = s\n\ts = append(s[:1], s[2:]...)\n\tfmt.Printf(\"%+v\\n\", s)\n\tfmt.Printf(\"%+v\\n\", m[\"q1mi\"])\n}\n```\n","source":"_posts/Go语言基础之map.md","raw":"---\ntitle: Go语言基础之map\ndate: 2021-06-25 10:13:33\ntags: [Go, Golang, Go学习]\n---\nGo语言中提供的映射关系容器为`map`，其内部使用`散列表（hash）`实现。\n\n# map\n\nmap是一种无序的基于`key-value`的数据结构，Go语言中的map是引用类型，必须初始化才能使用。\n\n## map定义\n\nGo语言中 `map`的定义语法如下：\n\n```go\nmap[KeyType]ValueType\n```\n\n其中，\n\n- KeyType:表示键的类型。\n- ValueType:表示键对应的值的类型。\n\nmap类型的变量默认初始值为nil，需要使用make()函数来分配内存。语法为：\n\n```go\nmake(map[KeyType]ValueType, [cap])\n```\n\n其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。\n\n## map基本使用\n\nmap中的数据都是成对出现的，map的基本使用示例代码如下：\n\n<!--more-->\n```go\nfunc main() {\n\tscoreMap := make(map[string]int, 8)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tfmt.Println(scoreMap)\n\tfmt.Println(scoreMap[\"小明\"])\n\tfmt.Printf(\"type of a:%T\\n\", scoreMap)\n}\n```\n\n输出：\n\n```bash\nmap[小明:100 张三:90]\n100\ntype of a:map[string]int\n```\n\nmap也支持在声明的时候填充元素，例如：\n\n```go\nfunc main() {\n\tuserInfo := map[string]string{\n\t\t\"username\": \"沙河小王子\",\n\t\t\"password\": \"123456\",\n\t}\n\tfmt.Println(userInfo) //\n}\n```\n\n## 判断某个键是否存在\n\nGo语言中有个判断map中键是否存在的特殊写法，格式如下:\n\n```go\nvalue, ok := map[key]\n```\n\n举个例子：\n\n```go\nfunc main() {\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\t// 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值\n\tv, ok := scoreMap[\"张三\"]\n\tif ok {\n\t\tfmt.Println(v)\n\t} else {\n\t\tfmt.Println(\"查无此人\")\n\t}\n}\n```\n\n## map的遍历\n\nGo语言中使用`for range`遍历map。\n\n```go\nfunc main() {\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tscoreMap[\"娜扎\"] = 60\n\tfor k, v := range scoreMap {\n\t\tfmt.Println(k, v)\n\t}\n}\n```\n\n但我们只想遍历key的时候，可以按下面的写法：\n\n```go\nfunc main() {\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tscoreMap[\"娜扎\"] = 60\n\tfor k := range scoreMap {\n\t\tfmt.Println(k)\n\t}\n}\n```\n\n**注意：** 遍历map时的元素顺序与添加键值对的顺序无关。\n\n## 使用delete()函数删除键值对\n\n使用`delete()`内建函数从map中删除一组键值对，`delete()`函数的格式如下：\n\n```go\ndelete(map, key)\n```\n\n其中，\n\n- map:表示要删除键值对的map\n- key:表示要删除的键值对的键\n\n示例代码如下：\n\n```go\nfunc main(){\n\tscoreMap := make(map[string]int)\n\tscoreMap[\"张三\"] = 90\n\tscoreMap[\"小明\"] = 100\n\tscoreMap[\"娜扎\"] = 60\n\tdelete(scoreMap, \"小明\")//将小明:100从map中删除\n\tfor k,v := range scoreMap{\n\t\tfmt.Println(k, v)\n\t}\n}\n```\n\n## 按照指定顺序遍历map\n\n```go\nfunc main() {\n\trand.Seed(time.Now().UnixNano()) //初始化随机数种子\n\n\tvar scoreMap = make(map[string]int, 200)\n\n\tfor i := 0; i < 100; i++ {\n\t\tkey := fmt.Sprintf(\"stu%02d\", i) //生成stu开头的字符串\n\t\tvalue := rand.Intn(100)          //生成0~99的随机整数\n\t\tscoreMap[key] = value\n\t}\n\t//取出map中的所有key存入切片keys\n\tvar keys = make([]string, 0, 200)\n\tfor key := range scoreMap {\n\t\tkeys = append(keys, key)\n\t}\n\t//对切片进行排序\n\tsort.Strings(keys)\n\t//按照排序后的key遍历map\n\tfor _, key := range keys {\n\t\tfmt.Println(key, scoreMap[key])\n\t}\n}\n```\n\n## 元素为map类型的切片\n\n下面的代码演示了切片中的元素为map类型时的操作：\n\n```go\nfunc main() {\n\tvar mapSlice = make([]map[string]string, 3)\n\tfor index, value := range mapSlice {\n\t\tfmt.Printf(\"index:%d value:%v\\n\", index, value)\n\t}\n\tfmt.Println(\"after init\")\n\t// 对切片中的map元素进行初始化\n\tmapSlice[0] = make(map[string]string, 10)\n\tmapSlice[0][\"name\"] = \"小王子\"\n\tmapSlice[0][\"password\"] = \"123456\"\n\tmapSlice[0][\"address\"] = \"沙河\"\n\tfor index, value := range mapSlice {\n\t\tfmt.Printf(\"index:%d value:%v\\n\", index, value)\n\t}\n}\n```\n\n## 值为切片类型的map\n\n下面的代码演示了map中值为切片类型的操作：\n\n```go\nfunc main() {\n\tvar sliceMap = make(map[string][]string, 3)\n\tfmt.Println(sliceMap)\n\tfmt.Println(\"after init\")\n\tkey := \"中国\"\n\tvalue, ok := sliceMap[key]\n\tif !ok {\n\t\tvalue = make([]string, 0, 2)\n\t}\n\tvalue = append(value, \"北京\", \"上海\")\n\tsliceMap[key] = value\n\tfmt.Println(sliceMap)\n}\n```\n\n# 练习题\n\n1. 写一个程序，统计一个字符串中每个单词出现的次数。比如：”how do you do”中how=1 do=2 you=1。\n2. 观察下面代码，写出最终的打印结果。\n\n```go\nfunc main() {\n\ttype Map map[string][]int\n\tm := make(Map)\n\ts := []int{1, 2}\n\ts = append(s, 3)\n\tfmt.Printf(\"%+v\\n\", s)\n\tm[\"q1mi\"] = s\n\ts = append(s[:1], s[2:]...)\n\tfmt.Printf(\"%+v\\n\", s)\n\tfmt.Printf(\"%+v\\n\", m[\"q1mi\"])\n}\n```\n","slug":"Go语言基础之map","published":1,"updated":"2023-02-03T05:11:27.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkrg0001srvi79o223ly","content":"<p>Go语言中提供的映射关系容器为<code>map</code>，其内部使用<code>散列表（hash）</code>实现。</p>\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h1><p>map是一种无序的基于<code>key-value</code>的数据结构，Go语言中的map是引用类型，必须初始化才能使用。</p>\n<h2 id=\"map定义\"><a href=\"#map定义\" class=\"headerlink\" title=\"map定义\"></a>map定义</h2><p>Go语言中 <code>map</code>的定义语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span>[KeyType]ValueType</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li>KeyType:表示键的类型。</li>\n<li>ValueType:表示键对应的值的类型。</li>\n</ul>\n<p>map类型的变量默认初始值为nil，需要使用make()函数来分配内存。语法为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[KeyType]ValueType, [<span class=\"built_in\">cap</span>])</span><br></pre></td></tr></table></figure>\n\n<p>其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。</p>\n<h2 id=\"map基本使用\"><a href=\"#map基本使用\" class=\"headerlink\" title=\"map基本使用\"></a>map基本使用</h2><p>map中的数据都是成对出现的，map的基本使用示例代码如下：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(scoreMap)</span><br><span class=\"line\">\tfmt.Println(scoreMap[<span class=\"string\">&quot;小明&quot;</span>])</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type of a:%T\\n&quot;</span>, scoreMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map[小明:100 张三:90]</span><br><span class=\"line\">100</span><br><span class=\"line\"><span class=\"built_in\">type</span> of a:map[string]int</span><br></pre></td></tr></table></figure>\n\n<p>map也支持在声明的时候填充元素，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuserInfo := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;沙河小王子&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(userInfo) <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断某个键是否存在\"><a href=\"#判断某个键是否存在\" class=\"headerlink\" title=\"判断某个键是否存在\"></a>判断某个键是否存在</h2><p>Go语言中有个判断map中键是否存在的特殊写法，格式如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value, ok := <span class=\"keyword\">map</span>[key]</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值</span></span><br><span class=\"line\">\tv, ok := scoreMap[<span class=\"string\">&quot;张三&quot;</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;查无此人&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map的遍历\"><a href=\"#map的遍历\" class=\"headerlink\" title=\"map的遍历\"></a>map的遍历</h2><p>Go语言中使用<code>for range</code>遍历map。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;娜扎&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">\t\tfmt.Println(k, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但我们只想遍历key的时候，可以按下面的写法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;娜扎&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">\t\tfmt.Println(k)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 遍历map时的元素顺序与添加键值对的顺序无关。</p>\n<h2 id=\"使用delete-函数删除键值对\"><a href=\"#使用delete-函数删除键值对\" class=\"headerlink\" title=\"使用delete()函数删除键值对\"></a>使用delete()函数删除键值对</h2><p>使用<code>delete()</code>内建函数从map中删除一组键值对，<code>delete()</code>函数的格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"keyword\">map</span>, key)</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li>map:表示要删除键值对的map</li>\n<li>key:表示要删除的键值对的键</li>\n</ul>\n<p>示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;娜扎&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(scoreMap, <span class=\"string\">&quot;小明&quot;</span>)<span class=\"comment\">//将小明:100从map中删除</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> scoreMap&#123;</span><br><span class=\"line\">\t\tfmt.Println(k, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按照指定顺序遍历map\"><a href=\"#按照指定顺序遍历map\" class=\"headerlink\" title=\"按照指定顺序遍历map\"></a>按照指定顺序遍历map</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano()) <span class=\"comment\">//初始化随机数种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\tkey := fmt.Sprintf(<span class=\"string\">&quot;stu%02d&quot;</span>, i) <span class=\"comment\">//生成stu开头的字符串</span></span><br><span class=\"line\">\t\tvalue := rand.Intn(<span class=\"number\">100</span>)          <span class=\"comment\">//生成0~99的随机整数</span></span><br><span class=\"line\">\t\tscoreMap[key] = value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//取出map中的所有key存入切片keys</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">\t\tkeys = <span class=\"built_in\">append</span>(keys, key)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//对切片进行排序</span></span><br><span class=\"line\">\tsort.Strings(keys)</span><br><span class=\"line\">\t<span class=\"comment\">//按照排序后的key遍历map</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, key := <span class=\"keyword\">range</span> keys &#123;</span><br><span class=\"line\">\t\tfmt.Println(key, scoreMap[key])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素为map类型的切片\"><a href=\"#元素为map类型的切片\" class=\"headerlink\" title=\"元素为map类型的切片\"></a>元素为map类型的切片</h2><p>下面的代码演示了切片中的元素为map类型时的操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapSlice = <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> mapSlice &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;index:%d value:%v\\n&quot;</span>, index, value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;after init&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 对切片中的map元素进行初始化</span></span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>][<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>][<span class=\"string\">&quot;password&quot;</span>] = <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>][<span class=\"string\">&quot;address&quot;</span>] = <span class=\"string\">&quot;沙河&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> mapSlice &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;index:%d value:%v\\n&quot;</span>, index, value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"值为切片类型的map\"><a href=\"#值为切片类型的map\" class=\"headerlink\" title=\"值为切片类型的map\"></a>值为切片类型的map</h2><p>下面的代码演示了map中值为切片类型的操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sliceMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Println(sliceMap)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;after init&quot;</span>)</span><br><span class=\"line\">\tkey := <span class=\"string\">&quot;中国&quot;</span></span><br><span class=\"line\">\tvalue, ok := sliceMap[key]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tvalue = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvalue = <span class=\"built_in\">append</span>(value, <span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\">\tsliceMap[key] = value</span><br><span class=\"line\">\tfmt.Println(sliceMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><ol>\n<li>写一个程序，统计一个字符串中每个单词出现的次数。比如：”how do you do”中how=1 do=2 you=1。</li>\n<li>观察下面代码，写出最终的打印结果。</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Map <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tm := <span class=\"built_in\">make</span>(Map)</span><br><span class=\"line\">\ts := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%+v\\n&quot;</span>, s)</span><br><span class=\"line\">\tm[<span class=\"string\">&quot;q1mi&quot;</span>] = s</span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s[:<span class=\"number\">1</span>], s[<span class=\"number\">2</span>:]...)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%+v\\n&quot;</span>, s)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%+v\\n&quot;</span>, m[<span class=\"string\">&quot;q1mi&quot;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":false,"length":3647,"excerpt":"<p>Go语言中提供的映射关系容器为<code>map</code>，其内部使用<code>散列表（hash）</code>实现。</p>\n<h1 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h1><p>map是一种无序的基于<code>key-value</code>的数据结构，Go语言中的map是引用类型，必须初始化才能使用。</p>\n<h2 id=\"map定义\"><a href=\"#map定义\" class=\"headerlink\" title=\"map定义\"></a>map定义</h2><p>Go语言中 <code>map</code>的定义语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span>[KeyType]ValueType</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li>KeyType:表示键的类型。</li>\n<li>ValueType:表示键对应的值的类型。</li>\n</ul>\n<p>map类型的变量默认初始值为nil，需要使用make()函数来分配内存。语法为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[KeyType]ValueType, [<span class=\"built_in\">cap</span>])</span><br></pre></td></tr></table></figure>\n\n<p>其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。</p>\n<h2 id=\"map基本使用\"><a href=\"#map基本使用\" class=\"headerlink\" title=\"map基本使用\"></a>map基本使用</h2><p>map中的数据都是成对出现的，map的基本使用示例代码如下：</p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Println(scoreMap)</span><br><span class=\"line\">\tfmt.Println(scoreMap[<span class=\"string\">&quot;小明&quot;</span>])</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type of a:%T\\n&quot;</span>, scoreMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map[小明:100 张三:90]</span><br><span class=\"line\">100</span><br><span class=\"line\"><span class=\"built_in\">type</span> of a:map[string]int</span><br></pre></td></tr></table></figure>\n\n<p>map也支持在声明的时候填充元素，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuserInfo := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;沙河小王子&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(userInfo) <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断某个键是否存在\"><a href=\"#判断某个键是否存在\" class=\"headerlink\" title=\"判断某个键是否存在\"></a>判断某个键是否存在</h2><p>Go语言中有个判断map中键是否存在的特殊写法，格式如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value, ok := <span class=\"keyword\">map</span>[key]</span><br></pre></td></tr></table></figure>\n\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值</span></span><br><span class=\"line\">\tv, ok := scoreMap[<span class=\"string\">&quot;张三&quot;</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;查无此人&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"map的遍历\"><a href=\"#map的遍历\" class=\"headerlink\" title=\"map的遍历\"></a>map的遍历</h2><p>Go语言中使用<code>for range</code>遍历map。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;娜扎&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">\t\tfmt.Println(k, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但我们只想遍历key的时候，可以按下面的写法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;娜扎&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">\t\tfmt.Println(k)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 遍历map时的元素顺序与添加键值对的顺序无关。</p>\n<h2 id=\"使用delete-函数删除键值对\"><a href=\"#使用delete-函数删除键值对\" class=\"headerlink\" title=\"使用delete()函数删除键值对\"></a>使用delete()函数删除键值对</h2><p>使用<code>delete()</code>内建函数从map中删除一组键值对，<code>delete()</code>函数的格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">delete</span>(<span class=\"keyword\">map</span>, key)</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li>map:表示要删除键值对的map</li>\n<li>key:表示要删除的键值对的键</li>\n</ul>\n<p>示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tscoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;张三&quot;</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;小明&quot;</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">\tscoreMap[<span class=\"string\">&quot;娜扎&quot;</span>] = <span class=\"number\">60</span></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(scoreMap, <span class=\"string\">&quot;小明&quot;</span>)<span class=\"comment\">//将小明:100从map中删除</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> scoreMap&#123;</span><br><span class=\"line\">\t\tfmt.Println(k, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按照指定顺序遍历map\"><a href=\"#按照指定顺序遍历map\" class=\"headerlink\" title=\"按照指定顺序遍历map\"></a>按照指定顺序遍历map</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano()) <span class=\"comment\">//初始化随机数种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> scoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\tkey := fmt.Sprintf(<span class=\"string\">&quot;stu%02d&quot;</span>, i) <span class=\"comment\">//生成stu开头的字符串</span></span><br><span class=\"line\">\t\tvalue := rand.Intn(<span class=\"number\">100</span>)          <span class=\"comment\">//生成0~99的随机整数</span></span><br><span class=\"line\">\t\tscoreMap[key] = value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//取出map中的所有key存入切片keys</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> keys = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">\t\tkeys = <span class=\"built_in\">append</span>(keys, key)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//对切片进行排序</span></span><br><span class=\"line\">\tsort.Strings(keys)</span><br><span class=\"line\">\t<span class=\"comment\">//按照排序后的key遍历map</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, key := <span class=\"keyword\">range</span> keys &#123;</span><br><span class=\"line\">\t\tfmt.Println(key, scoreMap[key])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素为map类型的切片\"><a href=\"#元素为map类型的切片\" class=\"headerlink\" title=\"元素为map类型的切片\"></a>元素为map类型的切片</h2><p>下面的代码演示了切片中的元素为map类型时的操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapSlice = <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> mapSlice &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;index:%d value:%v\\n&quot;</span>, index, value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;after init&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 对切片中的map元素进行初始化</span></span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>][<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>][<span class=\"string\">&quot;password&quot;</span>] = <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">\tmapSlice[<span class=\"number\">0</span>][<span class=\"string\">&quot;address&quot;</span>] = <span class=\"string\">&quot;沙河&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> mapSlice &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;index:%d value:%v\\n&quot;</span>, index, value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"值为切片类型的map\"><a href=\"#值为切片类型的map\" class=\"headerlink\" title=\"值为切片类型的map\"></a>值为切片类型的map</h2><p>下面的代码演示了map中值为切片类型的操作：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sliceMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">string</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Println(sliceMap)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;after init&quot;</span>)</span><br><span class=\"line\">\tkey := <span class=\"string\">&quot;中国&quot;</span></span><br><span class=\"line\">\tvalue, ok := sliceMap[key]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">\t\tvalue = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvalue = <span class=\"built_in\">append</span>(value, <span class=\"string\">&quot;北京&quot;</span>, <span class=\"string\">&quot;上海&quot;</span>)</span><br><span class=\"line\">\tsliceMap[key] = value</span><br><span class=\"line\">\tfmt.Println(sliceMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><ol>\n<li>写一个程序，统计一个字符串中每个单词出现的次数。比如：”how do you do”中how=1 do=2 you=1。</li>\n<li>观察下面代码，写出最终的打印结果。</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">type</span> Map <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>][]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tm := <span class=\"built_in\">make</span>(Map)</span><br><span class=\"line\">\ts := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%+v\\n&quot;</span>, s)</span><br><span class=\"line\">\tm[<span class=\"string\">&quot;q1mi&quot;</span>] = s</span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s[:<span class=\"number\">1</span>], s[<span class=\"number\">2</span>:]...)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%+v\\n&quot;</span>, s)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%+v\\n&quot;</span>, m[<span class=\"string\">&quot;q1mi&quot;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hexo 分类和标签","date":"2021-11-08T03:15:02.000Z","_content":"\n### **一、主题配置打开**\n\n打开`themes/next/_config.yml` **主题配置文件** 找到`Menu Settings` ，把 `categories` 和 `tags` 取消注释。\n\n```bash\ntags: /tags/ || fa fa-tags\ncategories: /categories/ || fa fa-th\n```\n<!--more-->\n## 二、添加分类模块\n\n新建一个分类页面。\n`$ hexo new page categories`\n你会发现你的source文件夹下有了categories\\[index.md](http://index.md/)，打开index.md文件将 title 设置为title: 分类 \n\n把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的分类中\n\n## 三、添加标签模块\n\n新建一个标签页面 。\n`$ hexo new page tags`\n你会发现你的source文件夹下有了tags\\[index.md](http://index.md/)，打开index.md文件将 title 设置为title: 标签 \n把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中 \n\n## **四、修改 [index.md](http://index.md/) 文件**\n\n打开 `categories` 文件夹下的 `index.md` ，在最下面一行加一行文字就行，注意中间有空格。\n\n```bash\n---\ntitle: tags\ndate: 2021-11-08 10:47:33\ntype: categories\n---\n```\n\n同理，`tags` 也是如此。\n\n## **五、效果展示**\n\n![Untitled](https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa09cb93c-83ec-4922-aa88-0099b188004d%2FUntitled.png?table=block&id=d0b3c0ae-9ace-4cd9-b464-fd7f0457e3ff&spaceId=06ecef21-3e7b-477c-b390-8768131a1226&width=2000&userId=6268f095-2b48-4979-9b0b-e6e1a111ccd1&cache=v2)\n","source":"_posts/Hexo-分类和标签.md","raw":"---\ntitle: Hexo 分类和标签\ndate: 2021-11-08 11:15:02\ntags: [hexo,blog]\ncategories: [hexo]\n\n---\n\n### **一、主题配置打开**\n\n打开`themes/next/_config.yml` **主题配置文件** 找到`Menu Settings` ，把 `categories` 和 `tags` 取消注释。\n\n```bash\ntags: /tags/ || fa fa-tags\ncategories: /categories/ || fa fa-th\n```\n<!--more-->\n## 二、添加分类模块\n\n新建一个分类页面。\n`$ hexo new page categories`\n你会发现你的source文件夹下有了categories\\[index.md](http://index.md/)，打开index.md文件将 title 设置为title: 分类 \n\n把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的分类中\n\n## 三、添加标签模块\n\n新建一个标签页面 。\n`$ hexo new page tags`\n你会发现你的source文件夹下有了tags\\[index.md](http://index.md/)，打开index.md文件将 title 设置为title: 标签 \n把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中 \n\n## **四、修改 [index.md](http://index.md/) 文件**\n\n打开 `categories` 文件夹下的 `index.md` ，在最下面一行加一行文字就行，注意中间有空格。\n\n```bash\n---\ntitle: tags\ndate: 2021-11-08 10:47:33\ntype: categories\n---\n```\n\n同理，`tags` 也是如此。\n\n## **五、效果展示**\n\n![Untitled](https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa09cb93c-83ec-4922-aa88-0099b188004d%2FUntitled.png?table=block&id=d0b3c0ae-9ace-4cd9-b464-fd7f0457e3ff&spaceId=06ecef21-3e7b-477c-b390-8768131a1226&width=2000&userId=6268f095-2b48-4979-9b0b-e6e1a111ccd1&cache=v2)\n","slug":"Hexo-分类和标签","published":1,"updated":"2023-02-03T05:11:27.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkri0003srvi6xw198tk","content":"<h3 id=\"一、主题配置打开\"><a href=\"#一、主题配置打开\" class=\"headerlink\" title=\"一、主题配置打开\"></a><strong>一、主题配置打开</strong></h3><p>打开<code>themes/next/_config.yml</code> <strong>主题配置文件</strong> 找到<code>Menu Settings</code> ，把 <code>categories</code> 和 <code>tags</code> 取消注释。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: /tags/ || fa fa-tags</span><br><span class=\"line\">categories: /categories/ || fa fa-th</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"二、添加分类模块\"><a href=\"#二、添加分类模块\" class=\"headerlink\" title=\"二、添加分类模块\"></a>二、添加分类模块</h2><p>新建一个分类页面。<br><code>$ hexo new page categories</code><br>你会发现你的source文件夹下有了categories[index.md](<a href=\"http://index.md/)%EF%BC%8C%E6%89%93%E5%BC%80index.md%E6%96%87%E4%BB%B6%E5%B0%86\">http://index.md/)，打开index.md文件将</a> title 设置为title: 分类 </p>\n<p>把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的分类中</p>\n<h2 id=\"三、添加标签模块\"><a href=\"#三、添加标签模块\" class=\"headerlink\" title=\"三、添加标签模块\"></a>三、添加标签模块</h2><p>新建一个标签页面 。<br><code>$ hexo new page tags</code><br>你会发现你的source文件夹下有了tags[index.md](<a href=\"http://index.md/)%EF%BC%8C%E6%89%93%E5%BC%80index.md%E6%96%87%E4%BB%B6%E5%B0%86\">http://index.md/)，打开index.md文件将</a> title 设置为title: 标签<br>把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中 </p>\n<h2 id=\"四、修改-index-md-文件\"><a href=\"#四、修改-index-md-文件\" class=\"headerlink\" title=\"四、修改 index.md 文件\"></a><strong>四、修改 <a href=\"http://index.md/\">index.md</a> 文件</strong></h2><p>打开 <code>categories</code> 文件夹下的 <code>index.md</code> ，在最下面一行加一行文字就行，注意中间有空格。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-11-08 10:47:33</span><br><span class=\"line\"><span class=\"built_in\">type</span>: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>同理，<code>tags</code> 也是如此。</p>\n<h2 id=\"五、效果展示\"><a href=\"#五、效果展示\" class=\"headerlink\" title=\"五、效果展示\"></a><strong>五、效果展示</strong></h2><p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa09cb93c-83ec-4922-aa88-0099b188004d%2FUntitled.png?table=block&id=d0b3c0ae-9ace-4cd9-b464-fd7f0457e3ff&spaceId=06ecef21-3e7b-477c-b390-8768131a1226&width=2000&userId=6268f095-2b48-4979-9b0b-e6e1a111ccd1&cache=v2\" alt=\"Untitled\"></p>\n","site":{"data":{}},"cover":false,"length":606,"excerpt":"<h3 id=\"一、主题配置打开\"><a href=\"#一、主题配置打开\" class=\"headerlink\" title=\"一、主题配置打开\"></a><strong>一、主题配置打开</strong></h3><p>打开<code>themes/next/_config.yml</code> <strong>主题配置文件</strong> 找到<code>Menu Settings</code> ，把 <code>categories</code> 和 <code>tags</code> 取消注释。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: /tags/ || fa fa-tags</span><br><span class=\"line\">categories: /categories/ || fa fa-th</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"二、添加分类模块\"><a href=\"#二、添加分类模块\" class=\"headerlink\" title=\"二、添加分类模块\"></a>二、添加分类模块</h2><p>新建一个分类页面。<br><code>$ hexo new page categories</code><br>你会发现你的source文件夹下有了categories[index.md](<a href=\"http://index.md/)%EF%BC%8C%E6%89%93%E5%BC%80index.md%E6%96%87%E4%BB%B6%E5%B0%86\">http://index.md/)，打开index.md文件将</a> title 设置为title: 分类 </p>\n<p>把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的分类中</p>\n<h2 id=\"三、添加标签模块\"><a href=\"#三、添加标签模块\" class=\"headerlink\" title=\"三、添加标签模块\"></a>三、添加标签模块</h2><p>新建一个标签页面 。<br><code>$ hexo new page tags</code><br>你会发现你的source文件夹下有了tags[index.md](<a href=\"http://index.md/)%EF%BC%8C%E6%89%93%E5%BC%80index.md%E6%96%87%E4%BB%B6%E5%B0%86\">http://index.md/)，打开index.md文件将</a> title 设置为title: 标签<br>把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中 </p>\n<h2 id=\"四、修改-index-md-文件\"><a href=\"#四、修改-index-md-文件\" class=\"headerlink\" title=\"四、修改 index.md 文件\"></a><strong>四、修改 <a href=\"http://index.md/\">index.md</a> 文件</strong></h2><p>打开 <code>categories</code> 文件夹下的 <code>index.md</code> ，在最下面一行加一行文字就行，注意中间有空格。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-11-08 10:47:33</span><br><span class=\"line\"><span class=\"built_in\">type</span>: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>同理，<code>tags</code> 也是如此。</p>\n<h2 id=\"五、效果展示\"><a href=\"#五、效果展示\" class=\"headerlink\" title=\"五、效果展示\"></a><strong>五、效果展示</strong></h2><p><img src=\"https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fa09cb93c-83ec-4922-aa88-0099b188004d%2FUntitled.png?table=block&id=d0b3c0ae-9ace-4cd9-b464-fd7f0457e3ff&spaceId=06ecef21-3e7b-477c-b390-8768131a1226&width=2000&userId=6268f095-2b48-4979-9b0b-e6e1a111ccd1&cache=v2\" alt=\"Untitled\"></p>"},{"title":"Go语言基础之结构体","date":"2021-06-22T02:55:19.000Z","_content":"Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。\n\n# 类型别名和自定义类型\n\n## 自定义类型\n\n在Go语言中有一些基本的数据类型，如`string`、`整型`、`浮点型`、`布尔`等数据类型， Go语言中可以使用`type`关键字来定义自定义类型。\n\n自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：\n\n```go\n//将MyInt定义为int类型\ntype MyInt int\n```\n\n通过`type`关键字的定义，`MyInt`就是一种新的类型，它具有`int`的特性。\n\n## 类型别名\n\n类型别名是`Go1.9`版本添加的新功能。\n\n类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。\n\n```go\ntype TypeAlias = Type\n```\n\n我们之前见过的`rune`和`byte`就是类型别名，他们的定义如下：\n\n```go\ntype byte = uint8\ntype rune = int32\n```\n\n## 类型定义和类型别名的区别\n\n类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。\n<!--more-->\n\n```go\n//类型定义\ntype NewInt int\n\n//类型别名\ntype MyInt = int\n\nfunc main() {\n\tvar a NewInt\n\tvar b MyInt\n\t\n\tfmt.Printf(\"type of a:%T\\n\", a) //type of a:main.NewInt\n\tfmt.Printf(\"type of b:%T\\n\", b) //type of b:int\n}\n```\n\n结果显示a的类型是`main.NewInt`，表示main包下定义的`NewInt`类型。b的类型是`int`。`MyInt`类型只会在代码中存在，编译完成时并不会有`MyInt`类型。\n\n# 结构体\n\nGo语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称`struct`。 也就是我们可以通过`struct`来定义自己的类型了。\n\nGo语言中通过`struct`来实现面向对象。\n\n## 结构体的定义\n\n使用`type`和`struct`关键字来定义结构体，具体代码格式如下：\n\n```go\ntype 类型名 struct {\n    字段名 字段类型\n    字段名 字段类型\n    …\n}\n```\n\n其中：\n\n- 类型名：标识自定义结构体的名称，在同一个包内不能重复。\n- 字段名：表示结构体字段名。结构体中的字段名必须唯一。\n- 字段类型：表示结构体字段的具体类型。\n\n举个例子，我们定义一个`Person`（人）结构体，代码如下：\n\n```go\ntype person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n```\n\n同样类型的字段也可以写在一行，\n\n```go\ntype person1 struct {\n\tname, city string\n\tage        int8\n}\n```\n\n这样我们就拥有了一个`person`的自定义类型，它有`name`、`city`、`age`三个字段，分别表示姓名、城市和年龄。这样我们使用这个`person`结构体就能够很方便的在程序中表示和存储人信息了。\n\n语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型\n\n## 结构体实例化\n\n只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。\n\n结构体本身也是一种类型，我们可以像声明内置类型一样使用`var`关键字声明结构体类型。\n\n```go\nvar 结构体实例 结构体类型\n```\n\n### 基本实例化\n\n举个例子：\n\n```go\ntype person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\tvar p1 person\n\tp1.name = \"沙河娜扎\"\n\tp1.city = \"北京\"\n\tp1.age = 18\n\tfmt.Printf(\"p1=%v\\n\", p1)  //p1={沙河娜扎 北京 18}\n\tfmt.Printf(\"p1=%#v\\n\", p1) //p1=main.person{name:\"沙河娜扎\", city:\"北京\", age:18}\n}\n```\n\n我们通过`.`来访问结构体的字段（成员变量）,例如`p1.name`和`p1.age`等。\n\n### 匿名结构体\n\n在定义一些临时数据结构等场景下还可以使用匿名结构体。\n\n```go\npackage main\n     \nimport (\n    \"fmt\"\n)\n     \nfunc main() {\n    var user struct{Name string; Age int}\n    user.Name = \"小王子\"\n    user.Age = 18\n    fmt.Printf(\"%#v\\n\", user)\n}\n```\n\n### 创建指针类型结构体\n\n我们还可以通过使用`new`关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：\n\n```go\nvar p2 = new(person)\nfmt.Printf(\"%T\\n\", p2)     //*main.person\nfmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"\", city:\"\", age:0}\n```\n\n从打印的结果中我们可以看出`p2`是一个结构体指针。\n\n需要注意的是在Go语言中支持对结构体指针直接使用`.`来访问结构体的成员。\n\n```go\nvar p2 = new(person)\np2.name = \"小王子\"\np2.age = 28\np2.city = \"上海\"\nfmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"小王子\", city:\"上海\", age:28}\n```\n\n### 取结构体的地址实例化\n\n使用`&`对结构体进行取地址操作相当于对该结构体类型进行了一次`new`实例化操作。\n\n```go\np3 := &person{}\nfmt.Printf(\"%T\\n\", p3)     //*main.person\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"\", city:\"\", age:0}\np3.name = \"七米\"\np3.age = 30\np3.city = \"成都\"\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"七米\", city:\"成都\", age:30}\n```\n\n`p3.name = \"七米\"`其实在底层是`(*p3).name = \"七米\"`，这是Go语言帮我们实现的语法糖。\n\n## 结构体初始化\n\n没有初始化的结构体，其成员变量都是对应其类型的零值。\n\n```go\ntype person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\tvar p4 person\n\tfmt.Printf(\"p4=%#v\\n\", p4) //p4=main.person{name:\"\", city:\"\", age:0}\n}\n```\n\n### 使用键值对初始化\n\n使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。\n\n```go\np5 := person{\n\tname: \"小王子\",\n\tcity: \"北京\",\n\tage:  18,\n}\nfmt.Printf(\"p5=%#v\\n\", p5) //p5=main.person{name:\"小王子\", city:\"北京\", age:18}\n```\n\n也可以对结构体指针进行键值对初始化，例如：\n\n```go\np6 := &person{\n\tname: \"小王子\",\n\tcity: \"北京\",\n\tage:  18,\n}\nfmt.Printf(\"p6=%#v\\n\", p6) //p6=&main.person{name:\"小王子\", city:\"北京\", age:18}\n```\n\n当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。\n\n```go\np7 := &person{\n\tcity: \"北京\",\n}\nfmt.Printf(\"p7=%#v\\n\", p7) //p7=&main.person{name:\"\", city:\"北京\", age:0}\n```\n\n### 使用值的列表初始化\n\n初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：\n\n```go\np8 := &person{\n\t\"沙河娜扎\",\n\t\"北京\",\n\t28,\n}\nfmt.Printf(\"p8=%#v\\n\", p8) //p8=&main.person{name:\"沙河娜扎\", city:\"北京\", age:28}\n```\n\n使用这种格式初始化时，需要注意：\n\n1. 必须初始化结构体的所有字段。\n2. 初始值的填充顺序必须与字段在结构体中的声明顺序一致。\n3. 该方式不能和键值初始化方式混用。\n\n## 结构体内存布局\n\n结构体占用一块连续的内存。\n\n```go\ntype test struct {\n\ta int8\n\tb int8\n\tc int8\n\td int8\n}\nn := test{\n\t1, 2, 3, 4,\n}\nfmt.Printf(\"n.a %p\\n\", &n.a)\nfmt.Printf(\"n.b %p\\n\", &n.b)\nfmt.Printf(\"n.c %p\\n\", &n.c)\nfmt.Printf(\"n.d %p\\n\", &n.d)\n```\n\n输出：\n\n```bash\nn.a 0xc0000a0060\nn.b 0xc0000a0061\nn.c 0xc0000a0062\nn.d 0xc0000a0063\n```\n\n【进阶知识点】关于Go语言中的内存对齐推荐阅读:[在 Go 中恰到好处的内存对齐](https://segmentfault.com/a/1190000017527311?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com)\n\n### 空结构体\n\n空结构体是不占用空间的。\n\n```go\nvar v struct{}\nfmt.Println(unsafe.Sizeof(v))  // 0\n```\n\n## 面试题\n\n请问下面代码的执行结果是什么？\n\n```go\ntype student struct {\n\tname string\n\tage  int\n}\n\nfunc main() {\n\tm := make(map[string]*student)\n\tstus := []student{\n\t\t{name: \"小王子\", age: 18},\n\t\t{name: \"娜扎\", age: 23},\n\t\t{name: \"大王八\", age: 9000},\n\t}\n\n\tfor _, stu := range stus {\n\t\tm[stu.name] = &stu\n\t}\n\tfor k, v := range m {\n\t\tfmt.Println(k, \"=>\", v.name)\n\t}\n}\n```\n\n## 构造函数\n\nGo语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个`person`的构造函数。 因为`struct`是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。\n\n```go\nfunc newPerson(name, city string, age int8) *person {\n\treturn &person{\n\t\tname: name,\n\t\tcity: city,\n\t\tage:  age,\n\t}\n}\n```\n\n调用构造函数\n\n```go\np9 := newPerson(\"张三\", \"沙河\", 90)\nfmt.Printf(\"%#v\\n\", p9) //&main.person{name:\"张三\", city:\"沙河\", age:90}\n```\n\n## 方法和接收者\n\nGo语言中的`方法（Method）`是一种作用于特定类型变量的函数。这种特定类型变量叫做`接收者（Receiver）`。接收者的概念就类似于其他语言中的`this`或者 `self`。\n\n方法的定义格式如下：\n\n```go\nfunc (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {\n    函数体\n}\n```\n\n其中，\n\n- 接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是`self`、`this`之类的命名。例如，`Person`类型的接收者变量应该命名为 `p`，`Connector`类型的接收者变量应该命名为`c`等。\n- 接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。\n- 方法名、参数列表、返回参数：具体格式与函数定义相同。\n\n举个例子：\n\n```go\n//Person 结构体\ntype Person struct {\n\tname string\n\tage  int8\n}\n\n//NewPerson 构造函数\nfunc NewPerson(name string, age int8) *Person {\n\treturn &Person{\n\t\tname: name,\n\t\tage:  age,\n\t}\n}\n\n//Dream Person做梦的方法\nfunc (p Person) Dream() {\n\tfmt.Printf(\"%s的梦想是学好Go语言！\\n\", p.name)\n}\n\nfunc main() {\n\tp1 := NewPerson(\"小王子\", 25)\n\tp1.Dream()\n}\n```\n\n方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。\n\n### 指针类型的接收者\n\n指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的`this`或者`self`。 例如我们为`Person`添加一个`SetAge`方法，来修改实例变量的年龄。\n\n```go\n// SetAge 设置p的年龄\n// 使用指针接收者\nfunc (p *Person) SetAge(newAge int8) {\n\tp.age = newAge\n}\n```\n\n调用该方法：\n\n```go\nfunc main() {\n\tp1 := NewPerson(\"小王子\", 25)\n\tfmt.Println(p1.age) // 25\n\tp1.SetAge(30)\n\tfmt.Println(p1.age) // 30\n}\n```\n\n### 值类型的接收者\n\n当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。\n\n```go\n// SetAge2 设置p的年龄\n// 使用值接收者\nfunc (p Person) SetAge2(newAge int8) {\n\tp.age = newAge\n}\n\nfunc main() {\n\tp1 := NewPerson(\"小王子\", 25)\n\tp1.Dream()\n\tfmt.Println(p1.age) // 25\n\tp1.SetAge2(30) // (*p1).SetAge2(30)\n\tfmt.Println(p1.age) // 25\n}\n```\n\n### 什么时候应该使用指针类型接收者\n\n1. 需要修改接收者中的值\n2. 接收者是拷贝代价比较大的大对象\n3. 保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。\n\n## 任意类型添加方法\n\n在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的`int`类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。\n\n```go\n//MyInt 将int定义为自定义MyInt类型\ntype MyInt int\n\n//SayHello 为MyInt添加一个SayHello的方法\nfunc (m MyInt) SayHello() {\n\tfmt.Println(\"Hello, 我是一个int。\")\n}\nfunc main() {\n\tvar m1 MyInt\n\tm1.SayHello() //Hello, 我是一个int。\n\tm1 = 100\n\tfmt.Printf(\"%#v  %T\\n\", m1, m1) //100  main.MyInt\n}\n```\n\n**注意事项：** 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。\n\n## 结构体的匿名字段\n\n结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。\n\n```go\n//Person 结构体Person类型\ntype Person struct {\n\tstring\n\tint\n}\n\nfunc main() {\n\tp1 := Person{\n\t\t\"小王子\",\n\t\t18,\n\t}\n\tfmt.Printf(\"%#v\\n\", p1)        //main.Person{string:\"北京\", int:18}\n\tfmt.Println(p1.string, p1.int) //北京 18\n}\n```\n\n**注意：**这里匿名字段的说法并不代表没有字段名，而是默认会采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。\n\n## 嵌套结构体\n\n一个结构体中可以嵌套包 含另一个结构体或结构体指针，就像下面的示例代码那样。\n\n```go\n//Address 地址结构体\ntype Address struct {\n\tProvince string\n\tCity     string\n}\n\n//User 用户结构体\ntype User struct {\n\tName    string\n\tGender  string\n\tAddress Address\n}\n\nfunc main() {\n\tuser1 := User{\n\t\tName:   \"小王子\",\n\t\tGender: \"男\",\n\t\tAddress: Address{\n\t\t\tProvince: \"山东\",\n\t\t\tCity:     \"威海\",\n\t\t},\n\t}\n\tfmt.Printf(\"user1=%#v\\n\", user1)//user1=main.User{Name:\"小王子\", Gender:\"男\", Address:main.Address{Province:\"山东\", City:\"威海\"}}\n}\n```\n\n### 嵌套匿名字段\n\n上面user结构体中嵌套的`Address`结构体也可以采用匿名字段的方式，例如：\n\n```go\n//Address 地址结构体\ntype Address struct {\n\tProvince string\n\tCity     string\n}\n\n//User 用户结构体\ntype User struct {\n\tName    string\n\tGender  string\n\tAddress //匿名字段\n}\n\nfunc main() {\n\tvar user2 User\n\tuser2.Name = \"小王子\"\n\tuser2.Gender = \"男\"\n\tuser2.Address.Province = \"山东\"    // 匿名字段默认使用类型名作为字段名\n\tuser2.City = \"威海\"                // 匿名字段可以省略\n\tfmt.Printf(\"user2=%#v\\n\", user2) //user2=main.User{Name:\"小王子\", Gender:\"男\", Address:main.Address{Province:\"山东\", City:\"威海\"}}\n}\n```\n\n当访问结构体成员时会先在结构体中查找该字段，找不到再去嵌套的匿名字段中查找。\n\n### 嵌套结构体的字段名冲突\n\n嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。\n\n```go\n//Address 地址结构体\ntype Address struct {\n\tProvince   string\n\tCity       string\n\tCreateTime string\n}\n\n//Email 邮箱结构体\ntype Email struct {\n\tAccount    string\n\tCreateTime string\n}\n\n//User 用户结构体\ntype User struct {\n\tName   string\n\tGender string\n\tAddress\n\tEmail\n}\n\nfunc main() {\n\tvar user3 User\n\tuser3.Name = \"沙河娜扎\"\n\tuser3.Gender = \"男\"\n\t// user3.CreateTime = \"2019\" //ambiguous selector user3.CreateTime\n\tuser3.Address.CreateTime = \"2000\" //指定Address结构体中的CreateTime\n\tuser3.Email.CreateTime = \"2000\"   //指定Email结构体中的CreateTime\n}\n```\n\n## 结构体的“继承”\n\nGo语言中使用结构体也可以实现其他编程语言中面向对象的继承。\n\n```go\n//Animal 动物\ntype Animal struct {\n\tname string\n}\n\n// 给animal 实现一个移动方法’mothed‘\nfunc (a *Animal) move() {\n\tfmt.Printf(\"%s会动！\\n\", a.name)\n}\n\n//Dog 狗\ntype Dog struct {\n\tFeet    int8\n\t*Animal //通过嵌套匿名结构体实现继承\n}\n\n// 给狗实现一个汪汪的方法“method”\nfunc (d *Dog) wang() {\n\tfmt.Printf(\"%s会汪汪汪~\\n\", d.name)\n}\n\nfunc main() {\n\td1 := &Dog{\n\t\tFeet: 4,\n\t\tAnimal: &Animal{ //注意嵌套的是结构体指针\n\t\t\tname: \"乐乐\",\n\t\t},\n\t}\n\td1.wang() //乐乐会汪汪汪~\n\td1.move() //乐乐会动！\n}\n```\n\n## 结构体字段的可见性\n\n结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。\n\n## 结构体与JSON序列化\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号`\"\"`包裹，使用冒号`:`分隔，然后紧接着值；多个键值之间使用英文`,`分隔。\n\n> 结构体与json\n>\n> 1.序列化: 把Go 语言中的结构体变量 -- > json 格式的字符串\n>\n> 2.反序列化: json 格式的字符串 -- > Go语言能够是别的结构体变量\n\n```go\n//Student 学生\ntype Student struct {\n\tID     int\n\tGender string\n\tName   string\n}\n\n//Class 班级\ntype Class struct {\n\tTitle    string\n\tStudents []*Student\n}\n\nfunc main() {\n\tc := &Class{\n\t\tTitle:    \"101\",\n\t\tStudents: make([]*Student, 0, 200),\n\t}\n\tfor i := 0; i < 10; i++ {\n\t\tstu := &Student{\n\t\t\tName:   fmt.Sprintf(\"stu%02d\", i),\n\t\t\tGender: \"男\",\n\t\t\tID:     i,\n\t\t}\n\t\tc.Students = append(c.Students, stu)\n\t}\n\t//JSON序列化：结构体-->JSON格式的字符串\n\tdata, err := json.Marshal(c)\n\tif err != nil {\n\t\tfmt.Println(\"json marshal failed\")\n\t\treturn\n\t}\n\tfmt.Printf(\"json:%s\\n\", data)\n\t//JSON反序列化：JSON格式的字符串-->结构体\n\tstr := `{\"Title\":\"101\",\"Students\":[{\"ID\":0,\"Gender\":\"男\",\"Name\":\"stu00\"},{\"ID\":1,\"Gender\":\"男\",\"Name\":\"stu01\"},{\"ID\":2,\"Gender\":\"男\",\"Name\":\"stu02\"},{\"ID\":3,\"Gender\":\"男\",\"Name\":\"stu03\"},{\"ID\":4,\"Gender\":\"男\",\"Name\":\"stu04\"},{\"ID\":5,\"Gender\":\"男\",\"Name\":\"stu05\"},{\"ID\":6,\"Gender\":\"男\",\"Name\":\"stu06\"},{\"ID\":7,\"Gender\":\"男\",\"Name\":\"stu07\"},{\"ID\":8,\"Gender\":\"男\",\"Name\":\"stu08\"},{\"ID\":9,\"Gender\":\"男\",\"Name\":\"stu09\"}]}`\n\tc1 := &Class{}\n\terr = json.Unmarshal([]byte(str), c1)\n\tif err != nil {\n\t\tfmt.Println(\"json unmarshal failed!\")\n\t\treturn\n\t}\n\tfmt.Printf(\"%#v\\n\", c1)\n}\n```\n\n## 结构体标签（Tag）\n\n`Tag`是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 `Tag`在结构体字段的后方定义，由一对**反引号**包裹起来，具体的格式如下：\n\n```bash\n`key1:\"value1\" key2:\"value2\"`\n```\n\n结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。\n\n**注意事项：** 为结构体编写`Tag`时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。\n\n例如我们为`Student`结构体的每个字段定义json序列化时使用的Tag：\n\n```go\n//Student 学生\ntype Student struct {\n\tID     int    `json:\"id\"` //通过指定tag实现json序列化该字段时的key\n\tGender string //json序列化是默认使用字段名作为key\n\tname   string //私有不能被json包访问\n}\n\nfunc main() {\n\ts1 := Student{\n\t\tID:     1,\n\t\tGender: \"男\",\n\t\tname:   \"沙河娜扎\",\n\t}\n\tdata, err := json.Marshal(s1)\n\tif err != nil {\n\t\tfmt.Println(\"json marshal failed!\")\n\t\treturn\n\t}\n\tfmt.Printf(\"json str:%s\\n\", data) //json str:{\"id\":1,\"Gender\":\"男\"}\n}\n```\n\n## 结构体和方法补充知识点\n\n因为slice和map这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：\n\n```go\ntype Person struct {\n\tname   string\n\tage    int8\n\tdreams []string\n}\n\nfunc (p *Person) SetDreams(dreams []string) {\n\tp.dreams = dreams\n}\n\nfunc main() {\n\tp1 := Person{name: \"小王子\", age: 18}\n\tdata := []string{\"吃饭\", \"睡觉\", \"打豆豆\"}\n\tp1.SetDreams(data)\n\n\t// 你真的想要修改 p1.dreams 吗？\n\tdata[1] = \"不睡觉\"\n\tfmt.Println(p1.dreams)  // ?\n}\n```\n\n正确的做法是在方法中使用传入的slice的拷贝进行结构体赋值。\n\n```go\nfunc (p *Person) SetDreams(dreams []string) {\n\tp.dreams = make([]string, len(dreams))\n\tcopy(p.dreams, dreams)\n}\n```\n\n同样的问题也存在于返回值slice和map的情况，在实际编码过程中一定要注意这个问题。\n\n# 练习题\n\n1. 使用“面向对象”的思维方式编写一个学生信息管理系统。\n   1. 学生有id、姓名、年龄、分数等信息\n   2. 程序提供展示学生列表、添加学生、编辑学生信息、删除学生等功能\n","source":"_posts/Go语言基础之结构体.md","raw":"---\ntitle: Go语言基础之结构体\ndate: 2021-06-22 10:55:19\ntags: [Go, Golang, Go学习]\n---\nGo语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。\n\n# 类型别名和自定义类型\n\n## 自定义类型\n\n在Go语言中有一些基本的数据类型，如`string`、`整型`、`浮点型`、`布尔`等数据类型， Go语言中可以使用`type`关键字来定义自定义类型。\n\n自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：\n\n```go\n//将MyInt定义为int类型\ntype MyInt int\n```\n\n通过`type`关键字的定义，`MyInt`就是一种新的类型，它具有`int`的特性。\n\n## 类型别名\n\n类型别名是`Go1.9`版本添加的新功能。\n\n类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。\n\n```go\ntype TypeAlias = Type\n```\n\n我们之前见过的`rune`和`byte`就是类型别名，他们的定义如下：\n\n```go\ntype byte = uint8\ntype rune = int32\n```\n\n## 类型定义和类型别名的区别\n\n类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。\n<!--more-->\n\n```go\n//类型定义\ntype NewInt int\n\n//类型别名\ntype MyInt = int\n\nfunc main() {\n\tvar a NewInt\n\tvar b MyInt\n\t\n\tfmt.Printf(\"type of a:%T\\n\", a) //type of a:main.NewInt\n\tfmt.Printf(\"type of b:%T\\n\", b) //type of b:int\n}\n```\n\n结果显示a的类型是`main.NewInt`，表示main包下定义的`NewInt`类型。b的类型是`int`。`MyInt`类型只会在代码中存在，编译完成时并不会有`MyInt`类型。\n\n# 结构体\n\nGo语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称`struct`。 也就是我们可以通过`struct`来定义自己的类型了。\n\nGo语言中通过`struct`来实现面向对象。\n\n## 结构体的定义\n\n使用`type`和`struct`关键字来定义结构体，具体代码格式如下：\n\n```go\ntype 类型名 struct {\n    字段名 字段类型\n    字段名 字段类型\n    …\n}\n```\n\n其中：\n\n- 类型名：标识自定义结构体的名称，在同一个包内不能重复。\n- 字段名：表示结构体字段名。结构体中的字段名必须唯一。\n- 字段类型：表示结构体字段的具体类型。\n\n举个例子，我们定义一个`Person`（人）结构体，代码如下：\n\n```go\ntype person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n```\n\n同样类型的字段也可以写在一行，\n\n```go\ntype person1 struct {\n\tname, city string\n\tage        int8\n}\n```\n\n这样我们就拥有了一个`person`的自定义类型，它有`name`、`city`、`age`三个字段，分别表示姓名、城市和年龄。这样我们使用这个`person`结构体就能够很方便的在程序中表示和存储人信息了。\n\n语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型\n\n## 结构体实例化\n\n只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。\n\n结构体本身也是一种类型，我们可以像声明内置类型一样使用`var`关键字声明结构体类型。\n\n```go\nvar 结构体实例 结构体类型\n```\n\n### 基本实例化\n\n举个例子：\n\n```go\ntype person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\tvar p1 person\n\tp1.name = \"沙河娜扎\"\n\tp1.city = \"北京\"\n\tp1.age = 18\n\tfmt.Printf(\"p1=%v\\n\", p1)  //p1={沙河娜扎 北京 18}\n\tfmt.Printf(\"p1=%#v\\n\", p1) //p1=main.person{name:\"沙河娜扎\", city:\"北京\", age:18}\n}\n```\n\n我们通过`.`来访问结构体的字段（成员变量）,例如`p1.name`和`p1.age`等。\n\n### 匿名结构体\n\n在定义一些临时数据结构等场景下还可以使用匿名结构体。\n\n```go\npackage main\n     \nimport (\n    \"fmt\"\n)\n     \nfunc main() {\n    var user struct{Name string; Age int}\n    user.Name = \"小王子\"\n    user.Age = 18\n    fmt.Printf(\"%#v\\n\", user)\n}\n```\n\n### 创建指针类型结构体\n\n我们还可以通过使用`new`关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：\n\n```go\nvar p2 = new(person)\nfmt.Printf(\"%T\\n\", p2)     //*main.person\nfmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"\", city:\"\", age:0}\n```\n\n从打印的结果中我们可以看出`p2`是一个结构体指针。\n\n需要注意的是在Go语言中支持对结构体指针直接使用`.`来访问结构体的成员。\n\n```go\nvar p2 = new(person)\np2.name = \"小王子\"\np2.age = 28\np2.city = \"上海\"\nfmt.Printf(\"p2=%#v\\n\", p2) //p2=&main.person{name:\"小王子\", city:\"上海\", age:28}\n```\n\n### 取结构体的地址实例化\n\n使用`&`对结构体进行取地址操作相当于对该结构体类型进行了一次`new`实例化操作。\n\n```go\np3 := &person{}\nfmt.Printf(\"%T\\n\", p3)     //*main.person\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"\", city:\"\", age:0}\np3.name = \"七米\"\np3.age = 30\np3.city = \"成都\"\nfmt.Printf(\"p3=%#v\\n\", p3) //p3=&main.person{name:\"七米\", city:\"成都\", age:30}\n```\n\n`p3.name = \"七米\"`其实在底层是`(*p3).name = \"七米\"`，这是Go语言帮我们实现的语法糖。\n\n## 结构体初始化\n\n没有初始化的结构体，其成员变量都是对应其类型的零值。\n\n```go\ntype person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\tvar p4 person\n\tfmt.Printf(\"p4=%#v\\n\", p4) //p4=main.person{name:\"\", city:\"\", age:0}\n}\n```\n\n### 使用键值对初始化\n\n使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。\n\n```go\np5 := person{\n\tname: \"小王子\",\n\tcity: \"北京\",\n\tage:  18,\n}\nfmt.Printf(\"p5=%#v\\n\", p5) //p5=main.person{name:\"小王子\", city:\"北京\", age:18}\n```\n\n也可以对结构体指针进行键值对初始化，例如：\n\n```go\np6 := &person{\n\tname: \"小王子\",\n\tcity: \"北京\",\n\tage:  18,\n}\nfmt.Printf(\"p6=%#v\\n\", p6) //p6=&main.person{name:\"小王子\", city:\"北京\", age:18}\n```\n\n当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。\n\n```go\np7 := &person{\n\tcity: \"北京\",\n}\nfmt.Printf(\"p7=%#v\\n\", p7) //p7=&main.person{name:\"\", city:\"北京\", age:0}\n```\n\n### 使用值的列表初始化\n\n初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：\n\n```go\np8 := &person{\n\t\"沙河娜扎\",\n\t\"北京\",\n\t28,\n}\nfmt.Printf(\"p8=%#v\\n\", p8) //p8=&main.person{name:\"沙河娜扎\", city:\"北京\", age:28}\n```\n\n使用这种格式初始化时，需要注意：\n\n1. 必须初始化结构体的所有字段。\n2. 初始值的填充顺序必须与字段在结构体中的声明顺序一致。\n3. 该方式不能和键值初始化方式混用。\n\n## 结构体内存布局\n\n结构体占用一块连续的内存。\n\n```go\ntype test struct {\n\ta int8\n\tb int8\n\tc int8\n\td int8\n}\nn := test{\n\t1, 2, 3, 4,\n}\nfmt.Printf(\"n.a %p\\n\", &n.a)\nfmt.Printf(\"n.b %p\\n\", &n.b)\nfmt.Printf(\"n.c %p\\n\", &n.c)\nfmt.Printf(\"n.d %p\\n\", &n.d)\n```\n\n输出：\n\n```bash\nn.a 0xc0000a0060\nn.b 0xc0000a0061\nn.c 0xc0000a0062\nn.d 0xc0000a0063\n```\n\n【进阶知识点】关于Go语言中的内存对齐推荐阅读:[在 Go 中恰到好处的内存对齐](https://segmentfault.com/a/1190000017527311?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com)\n\n### 空结构体\n\n空结构体是不占用空间的。\n\n```go\nvar v struct{}\nfmt.Println(unsafe.Sizeof(v))  // 0\n```\n\n## 面试题\n\n请问下面代码的执行结果是什么？\n\n```go\ntype student struct {\n\tname string\n\tage  int\n}\n\nfunc main() {\n\tm := make(map[string]*student)\n\tstus := []student{\n\t\t{name: \"小王子\", age: 18},\n\t\t{name: \"娜扎\", age: 23},\n\t\t{name: \"大王八\", age: 9000},\n\t}\n\n\tfor _, stu := range stus {\n\t\tm[stu.name] = &stu\n\t}\n\tfor k, v := range m {\n\t\tfmt.Println(k, \"=>\", v.name)\n\t}\n}\n```\n\n## 构造函数\n\nGo语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个`person`的构造函数。 因为`struct`是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。\n\n```go\nfunc newPerson(name, city string, age int8) *person {\n\treturn &person{\n\t\tname: name,\n\t\tcity: city,\n\t\tage:  age,\n\t}\n}\n```\n\n调用构造函数\n\n```go\np9 := newPerson(\"张三\", \"沙河\", 90)\nfmt.Printf(\"%#v\\n\", p9) //&main.person{name:\"张三\", city:\"沙河\", age:90}\n```\n\n## 方法和接收者\n\nGo语言中的`方法（Method）`是一种作用于特定类型变量的函数。这种特定类型变量叫做`接收者（Receiver）`。接收者的概念就类似于其他语言中的`this`或者 `self`。\n\n方法的定义格式如下：\n\n```go\nfunc (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {\n    函数体\n}\n```\n\n其中，\n\n- 接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是`self`、`this`之类的命名。例如，`Person`类型的接收者变量应该命名为 `p`，`Connector`类型的接收者变量应该命名为`c`等。\n- 接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。\n- 方法名、参数列表、返回参数：具体格式与函数定义相同。\n\n举个例子：\n\n```go\n//Person 结构体\ntype Person struct {\n\tname string\n\tage  int8\n}\n\n//NewPerson 构造函数\nfunc NewPerson(name string, age int8) *Person {\n\treturn &Person{\n\t\tname: name,\n\t\tage:  age,\n\t}\n}\n\n//Dream Person做梦的方法\nfunc (p Person) Dream() {\n\tfmt.Printf(\"%s的梦想是学好Go语言！\\n\", p.name)\n}\n\nfunc main() {\n\tp1 := NewPerson(\"小王子\", 25)\n\tp1.Dream()\n}\n```\n\n方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。\n\n### 指针类型的接收者\n\n指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的`this`或者`self`。 例如我们为`Person`添加一个`SetAge`方法，来修改实例变量的年龄。\n\n```go\n// SetAge 设置p的年龄\n// 使用指针接收者\nfunc (p *Person) SetAge(newAge int8) {\n\tp.age = newAge\n}\n```\n\n调用该方法：\n\n```go\nfunc main() {\n\tp1 := NewPerson(\"小王子\", 25)\n\tfmt.Println(p1.age) // 25\n\tp1.SetAge(30)\n\tfmt.Println(p1.age) // 30\n}\n```\n\n### 值类型的接收者\n\n当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。\n\n```go\n// SetAge2 设置p的年龄\n// 使用值接收者\nfunc (p Person) SetAge2(newAge int8) {\n\tp.age = newAge\n}\n\nfunc main() {\n\tp1 := NewPerson(\"小王子\", 25)\n\tp1.Dream()\n\tfmt.Println(p1.age) // 25\n\tp1.SetAge2(30) // (*p1).SetAge2(30)\n\tfmt.Println(p1.age) // 25\n}\n```\n\n### 什么时候应该使用指针类型接收者\n\n1. 需要修改接收者中的值\n2. 接收者是拷贝代价比较大的大对象\n3. 保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。\n\n## 任意类型添加方法\n\n在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的`int`类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。\n\n```go\n//MyInt 将int定义为自定义MyInt类型\ntype MyInt int\n\n//SayHello 为MyInt添加一个SayHello的方法\nfunc (m MyInt) SayHello() {\n\tfmt.Println(\"Hello, 我是一个int。\")\n}\nfunc main() {\n\tvar m1 MyInt\n\tm1.SayHello() //Hello, 我是一个int。\n\tm1 = 100\n\tfmt.Printf(\"%#v  %T\\n\", m1, m1) //100  main.MyInt\n}\n```\n\n**注意事项：** 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。\n\n## 结构体的匿名字段\n\n结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。\n\n```go\n//Person 结构体Person类型\ntype Person struct {\n\tstring\n\tint\n}\n\nfunc main() {\n\tp1 := Person{\n\t\t\"小王子\",\n\t\t18,\n\t}\n\tfmt.Printf(\"%#v\\n\", p1)        //main.Person{string:\"北京\", int:18}\n\tfmt.Println(p1.string, p1.int) //北京 18\n}\n```\n\n**注意：**这里匿名字段的说法并不代表没有字段名，而是默认会采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。\n\n## 嵌套结构体\n\n一个结构体中可以嵌套包 含另一个结构体或结构体指针，就像下面的示例代码那样。\n\n```go\n//Address 地址结构体\ntype Address struct {\n\tProvince string\n\tCity     string\n}\n\n//User 用户结构体\ntype User struct {\n\tName    string\n\tGender  string\n\tAddress Address\n}\n\nfunc main() {\n\tuser1 := User{\n\t\tName:   \"小王子\",\n\t\tGender: \"男\",\n\t\tAddress: Address{\n\t\t\tProvince: \"山东\",\n\t\t\tCity:     \"威海\",\n\t\t},\n\t}\n\tfmt.Printf(\"user1=%#v\\n\", user1)//user1=main.User{Name:\"小王子\", Gender:\"男\", Address:main.Address{Province:\"山东\", City:\"威海\"}}\n}\n```\n\n### 嵌套匿名字段\n\n上面user结构体中嵌套的`Address`结构体也可以采用匿名字段的方式，例如：\n\n```go\n//Address 地址结构体\ntype Address struct {\n\tProvince string\n\tCity     string\n}\n\n//User 用户结构体\ntype User struct {\n\tName    string\n\tGender  string\n\tAddress //匿名字段\n}\n\nfunc main() {\n\tvar user2 User\n\tuser2.Name = \"小王子\"\n\tuser2.Gender = \"男\"\n\tuser2.Address.Province = \"山东\"    // 匿名字段默认使用类型名作为字段名\n\tuser2.City = \"威海\"                // 匿名字段可以省略\n\tfmt.Printf(\"user2=%#v\\n\", user2) //user2=main.User{Name:\"小王子\", Gender:\"男\", Address:main.Address{Province:\"山东\", City:\"威海\"}}\n}\n```\n\n当访问结构体成员时会先在结构体中查找该字段，找不到再去嵌套的匿名字段中查找。\n\n### 嵌套结构体的字段名冲突\n\n嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。\n\n```go\n//Address 地址结构体\ntype Address struct {\n\tProvince   string\n\tCity       string\n\tCreateTime string\n}\n\n//Email 邮箱结构体\ntype Email struct {\n\tAccount    string\n\tCreateTime string\n}\n\n//User 用户结构体\ntype User struct {\n\tName   string\n\tGender string\n\tAddress\n\tEmail\n}\n\nfunc main() {\n\tvar user3 User\n\tuser3.Name = \"沙河娜扎\"\n\tuser3.Gender = \"男\"\n\t// user3.CreateTime = \"2019\" //ambiguous selector user3.CreateTime\n\tuser3.Address.CreateTime = \"2000\" //指定Address结构体中的CreateTime\n\tuser3.Email.CreateTime = \"2000\"   //指定Email结构体中的CreateTime\n}\n```\n\n## 结构体的“继承”\n\nGo语言中使用结构体也可以实现其他编程语言中面向对象的继承。\n\n```go\n//Animal 动物\ntype Animal struct {\n\tname string\n}\n\n// 给animal 实现一个移动方法’mothed‘\nfunc (a *Animal) move() {\n\tfmt.Printf(\"%s会动！\\n\", a.name)\n}\n\n//Dog 狗\ntype Dog struct {\n\tFeet    int8\n\t*Animal //通过嵌套匿名结构体实现继承\n}\n\n// 给狗实现一个汪汪的方法“method”\nfunc (d *Dog) wang() {\n\tfmt.Printf(\"%s会汪汪汪~\\n\", d.name)\n}\n\nfunc main() {\n\td1 := &Dog{\n\t\tFeet: 4,\n\t\tAnimal: &Animal{ //注意嵌套的是结构体指针\n\t\t\tname: \"乐乐\",\n\t\t},\n\t}\n\td1.wang() //乐乐会汪汪汪~\n\td1.move() //乐乐会动！\n}\n```\n\n## 结构体字段的可见性\n\n结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。\n\n## 结构体与JSON序列化\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号`\"\"`包裹，使用冒号`:`分隔，然后紧接着值；多个键值之间使用英文`,`分隔。\n\n> 结构体与json\n>\n> 1.序列化: 把Go 语言中的结构体变量 -- > json 格式的字符串\n>\n> 2.反序列化: json 格式的字符串 -- > Go语言能够是别的结构体变量\n\n```go\n//Student 学生\ntype Student struct {\n\tID     int\n\tGender string\n\tName   string\n}\n\n//Class 班级\ntype Class struct {\n\tTitle    string\n\tStudents []*Student\n}\n\nfunc main() {\n\tc := &Class{\n\t\tTitle:    \"101\",\n\t\tStudents: make([]*Student, 0, 200),\n\t}\n\tfor i := 0; i < 10; i++ {\n\t\tstu := &Student{\n\t\t\tName:   fmt.Sprintf(\"stu%02d\", i),\n\t\t\tGender: \"男\",\n\t\t\tID:     i,\n\t\t}\n\t\tc.Students = append(c.Students, stu)\n\t}\n\t//JSON序列化：结构体-->JSON格式的字符串\n\tdata, err := json.Marshal(c)\n\tif err != nil {\n\t\tfmt.Println(\"json marshal failed\")\n\t\treturn\n\t}\n\tfmt.Printf(\"json:%s\\n\", data)\n\t//JSON反序列化：JSON格式的字符串-->结构体\n\tstr := `{\"Title\":\"101\",\"Students\":[{\"ID\":0,\"Gender\":\"男\",\"Name\":\"stu00\"},{\"ID\":1,\"Gender\":\"男\",\"Name\":\"stu01\"},{\"ID\":2,\"Gender\":\"男\",\"Name\":\"stu02\"},{\"ID\":3,\"Gender\":\"男\",\"Name\":\"stu03\"},{\"ID\":4,\"Gender\":\"男\",\"Name\":\"stu04\"},{\"ID\":5,\"Gender\":\"男\",\"Name\":\"stu05\"},{\"ID\":6,\"Gender\":\"男\",\"Name\":\"stu06\"},{\"ID\":7,\"Gender\":\"男\",\"Name\":\"stu07\"},{\"ID\":8,\"Gender\":\"男\",\"Name\":\"stu08\"},{\"ID\":9,\"Gender\":\"男\",\"Name\":\"stu09\"}]}`\n\tc1 := &Class{}\n\terr = json.Unmarshal([]byte(str), c1)\n\tif err != nil {\n\t\tfmt.Println(\"json unmarshal failed!\")\n\t\treturn\n\t}\n\tfmt.Printf(\"%#v\\n\", c1)\n}\n```\n\n## 结构体标签（Tag）\n\n`Tag`是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 `Tag`在结构体字段的后方定义，由一对**反引号**包裹起来，具体的格式如下：\n\n```bash\n`key1:\"value1\" key2:\"value2\"`\n```\n\n结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。\n\n**注意事项：** 为结构体编写`Tag`时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。\n\n例如我们为`Student`结构体的每个字段定义json序列化时使用的Tag：\n\n```go\n//Student 学生\ntype Student struct {\n\tID     int    `json:\"id\"` //通过指定tag实现json序列化该字段时的key\n\tGender string //json序列化是默认使用字段名作为key\n\tname   string //私有不能被json包访问\n}\n\nfunc main() {\n\ts1 := Student{\n\t\tID:     1,\n\t\tGender: \"男\",\n\t\tname:   \"沙河娜扎\",\n\t}\n\tdata, err := json.Marshal(s1)\n\tif err != nil {\n\t\tfmt.Println(\"json marshal failed!\")\n\t\treturn\n\t}\n\tfmt.Printf(\"json str:%s\\n\", data) //json str:{\"id\":1,\"Gender\":\"男\"}\n}\n```\n\n## 结构体和方法补充知识点\n\n因为slice和map这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：\n\n```go\ntype Person struct {\n\tname   string\n\tage    int8\n\tdreams []string\n}\n\nfunc (p *Person) SetDreams(dreams []string) {\n\tp.dreams = dreams\n}\n\nfunc main() {\n\tp1 := Person{name: \"小王子\", age: 18}\n\tdata := []string{\"吃饭\", \"睡觉\", \"打豆豆\"}\n\tp1.SetDreams(data)\n\n\t// 你真的想要修改 p1.dreams 吗？\n\tdata[1] = \"不睡觉\"\n\tfmt.Println(p1.dreams)  // ?\n}\n```\n\n正确的做法是在方法中使用传入的slice的拷贝进行结构体赋值。\n\n```go\nfunc (p *Person) SetDreams(dreams []string) {\n\tp.dreams = make([]string, len(dreams))\n\tcopy(p.dreams, dreams)\n}\n```\n\n同样的问题也存在于返回值slice和map的情况，在实际编码过程中一定要注意这个问题。\n\n# 练习题\n\n1. 使用“面向对象”的思维方式编写一个学生信息管理系统。\n   1. 学生有id、姓名、年龄、分数等信息\n   2. 程序提供展示学生列表、添加学生、编辑学生信息、删除学生等功能\n","slug":"Go语言基础之结构体","published":1,"updated":"2023-02-03T05:11:27.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkrk0006srvies3ldnql","content":"<p>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</p>\n<h1 id=\"类型别名和自定义类型\"><a href=\"#类型别名和自定义类型\" class=\"headerlink\" title=\"类型别名和自定义类型\"></a>类型别名和自定义类型</h1><h2 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h2><p>在Go语言中有一些基本的数据类型，如<code>string</code>、<code>整型</code>、<code>浮点型</code>、<code>布尔</code>等数据类型， Go语言中可以使用<code>type</code>关键字来定义自定义类型。</p>\n<p>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将MyInt定义为int类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>通过<code>type</code>关键字的定义，<code>MyInt</code>就是一种新的类型，它具有<code>int</code>的特性。</p>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类型别名是<code>Go1.9</code>版本添加的新功能。</p>\n<p>类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TypeAlias = Type</span><br></pre></td></tr></table></figure>\n\n<p>我们之前见过的<code>rune</code>和<code>byte</code>就是类型别名，他们的定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"keyword\">byte</span> = <span class=\"keyword\">uint8</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"keyword\">rune</span> = <span class=\"keyword\">int32</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型定义和类型别名的区别\"><a href=\"#类型定义和类型别名的区别\" class=\"headerlink\" title=\"类型定义和类型别名的区别\"></a>类型定义和类型别名的区别</h2><p>类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类型定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NewInt <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt = <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a NewInt</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b MyInt</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type of a:%T\\n&quot;</span>, a) <span class=\"comment\">//type of a:main.NewInt</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type of b:%T\\n&quot;</span>, b) <span class=\"comment\">//type of b:int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果显示a的类型是<code>main.NewInt</code>，表示main包下定义的<code>NewInt</code>类型。b的类型是<code>int</code>。<code>MyInt</code>类型只会在代码中存在，编译完成时并不会有<code>MyInt</code>类型。</p>\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称<code>struct</code>。 也就是我们可以通过<code>struct</code>来定义自己的类型了。</p>\n<p>Go语言中通过<code>struct</code>来实现面向对象。</p>\n<h2 id=\"结构体的定义\"><a href=\"#结构体的定义\" class=\"headerlink\" title=\"结构体的定义\"></a>结构体的定义</h2><p>使用<code>type</code>和<code>struct</code>关键字来定义结构体，具体代码格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> 类型名 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li>\n<li>字段名：表示结构体字段名。结构体中的字段名必须唯一。</li>\n<li>字段类型：表示结构体字段的具体类型。</li>\n</ul>\n<p>举个例子，我们定义一个<code>Person</code>（人）结构体，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcity <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样类型的字段也可以写在一行，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname, city <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage        <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就拥有了一个<code>person</code>的自定义类型，它有<code>name</code>、<code>city</code>、<code>age</code>三个字段，分别表示姓名、城市和年龄。这样我们使用这个<code>person</code>结构体就能够很方便的在程序中表示和存储人信息了。</p>\n<p>语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型</p>\n<h2 id=\"结构体实例化\"><a href=\"#结构体实例化\" class=\"headerlink\" title=\"结构体实例化\"></a>结构体实例化</h2><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p>\n<p>结构体本身也是一种类型，我们可以像声明内置类型一样使用<code>var</code>关键字声明结构体类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 结构体实例 结构体类型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本实例化\"><a href=\"#基本实例化\" class=\"headerlink\" title=\"基本实例化\"></a>基本实例化</h3><p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcity <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p1 person</span><br><span class=\"line\">\tp1.name = <span class=\"string\">&quot;沙河娜扎&quot;</span></span><br><span class=\"line\">\tp1.city = <span class=\"string\">&quot;北京&quot;</span></span><br><span class=\"line\">\tp1.age = <span class=\"number\">18</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;p1=%v\\n&quot;</span>, p1)  <span class=\"comment\">//p1=&#123;沙河娜扎 北京 18&#125;</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;p1=%#v\\n&quot;</span>, p1) <span class=\"comment\">//p1=main.person&#123;name:&quot;沙河娜扎&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过<code>.</code>来访问结构体的字段（成员变量）,例如<code>p1.name</code>和<code>p1.age</code>等。</p>\n<h3 id=\"匿名结构体\"><a href=\"#匿名结构体\" class=\"headerlink\" title=\"匿名结构体\"></a>匿名结构体</h3><p>在定义一些临时数据结构等场景下还可以使用匿名结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user <span class=\"keyword\">struct</span>&#123;Name <span class=\"keyword\">string</span>; Age <span class=\"keyword\">int</span>&#125;</span><br><span class=\"line\">    user.Name = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">    user.Age = <span class=\"number\">18</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, user)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建指针类型结构体\"><a href=\"#创建指针类型结构体\" class=\"headerlink\" title=\"创建指针类型结构体\"></a>创建指针类型结构体</h3><p>我们还可以通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">new</span>(person)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, p2)     <span class=\"comment\">//*main.person</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p2=%#v\\n&quot;</span>, p2) <span class=\"comment\">//p2=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>从打印的结果中我们可以看出<code>p2</code>是一个结构体指针。</p>\n<p>需要注意的是在Go语言中支持对结构体指针直接使用<code>.</code>来访问结构体的成员。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">new</span>(person)</span><br><span class=\"line\">p2.name = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">p2.age = <span class=\"number\">28</span></span><br><span class=\"line\">p2.city = <span class=\"string\">&quot;上海&quot;</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p2=%#v\\n&quot;</span>, p2) <span class=\"comment\">//p2=&amp;main.person&#123;name:&quot;小王子&quot;, city:&quot;上海&quot;, age:28&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取结构体的地址实例化\"><a href=\"#取结构体的地址实例化\" class=\"headerlink\" title=\"取结构体的地址实例化\"></a>取结构体的地址实例化</h3><p>使用<code>&amp;</code>对结构体进行取地址操作相当于对该结构体类型进行了一次<code>new</code>实例化操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p3 := &amp;person&#123;&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, p3)     <span class=\"comment\">//*main.person</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p3=%#v\\n&quot;</span>, p3) <span class=\"comment\">//p3=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br><span class=\"line\">p3.name = <span class=\"string\">&quot;七米&quot;</span></span><br><span class=\"line\">p3.age = <span class=\"number\">30</span></span><br><span class=\"line\">p3.city = <span class=\"string\">&quot;成都&quot;</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p3=%#v\\n&quot;</span>, p3) <span class=\"comment\">//p3=&amp;main.person&#123;name:&quot;七米&quot;, city:&quot;成都&quot;, age:30&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>p3.name = &quot;七米&quot;</code>其实在底层是<code>(*p3).name = &quot;七米&quot;</code>，这是Go语言帮我们实现的语法糖。</p>\n<h2 id=\"结构体初始化\"><a href=\"#结构体初始化\" class=\"headerlink\" title=\"结构体初始化\"></a>结构体初始化</h2><p>没有初始化的结构体，其成员变量都是对应其类型的零值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcity <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p4 person</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;p4=%#v\\n&quot;</span>, p4) <span class=\"comment\">//p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用键值对初始化\"><a href=\"#使用键值对初始化\" class=\"headerlink\" title=\"使用键值对初始化\"></a>使用键值对初始化</h3><p>使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p5 := person&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\tcity: <span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">\tage:  <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p5=%#v\\n&quot;</span>, p5) <span class=\"comment\">//p5=main.person&#123;name:&quot;小王子&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以对结构体指针进行键值对初始化，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p6 := &amp;person&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\tcity: <span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">\tage:  <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p6=%#v\\n&quot;</span>, p6) <span class=\"comment\">//p6=&amp;main.person&#123;name:&quot;小王子&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p7 := &amp;person&#123;</span><br><span class=\"line\">\tcity: <span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p7=%#v\\n&quot;</span>, p7) <span class=\"comment\">//p7=&amp;main.person&#123;name:&quot;&quot;, city:&quot;北京&quot;, age:0&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用值的列表初始化\"><a href=\"#使用值的列表初始化\" class=\"headerlink\" title=\"使用值的列表初始化\"></a>使用值的列表初始化</h3><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p8 := &amp;person&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;沙河娜扎&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">\t<span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p8=%#v\\n&quot;</span>, p8) <span class=\"comment\">//p8=&amp;main.person&#123;name:&quot;沙河娜扎&quot;, city:&quot;北京&quot;, age:28&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这种格式初始化时，需要注意：</p>\n<ol>\n<li>必须初始化结构体的所有字段。</li>\n<li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li>\n<li>该方式不能和键值初始化方式混用。</li>\n</ol>\n<h2 id=\"结构体内存布局\"><a href=\"#结构体内存布局\" class=\"headerlink\" title=\"结构体内存布局\"></a>结构体内存布局</h2><p>结构体占用一块连续的内存。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ta <span class=\"keyword\">int8</span></span><br><span class=\"line\">\tb <span class=\"keyword\">int8</span></span><br><span class=\"line\">\tc <span class=\"keyword\">int8</span></span><br><span class=\"line\">\td <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n := test&#123;</span><br><span class=\"line\">\t<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.a %p\\n&quot;</span>, &amp;n.a)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.b %p\\n&quot;</span>, &amp;n.b)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.c %p\\n&quot;</span>, &amp;n.c)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.d %p\\n&quot;</span>, &amp;n.d)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n.a 0xc0000a0060</span><br><span class=\"line\">n.b 0xc0000a0061</span><br><span class=\"line\">n.c 0xc0000a0062</span><br><span class=\"line\">n.d 0xc0000a0063</span><br></pre></td></tr></table></figure>\n\n<p>【进阶知识点】关于Go语言中的内存对齐推荐阅读:<a href=\"https://segmentfault.com/a/1190000017527311?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com\">在 Go 中恰到好处的内存对齐</a></p>\n<h3 id=\"空结构体\"><a href=\"#空结构体\" class=\"headerlink\" title=\"空结构体\"></a>空结构体</h3><p>空结构体是不占用空间的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">fmt.Println(unsafe.Sizeof(v))  <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>请问下面代码的执行结果是什么？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*student)</span><br><span class=\"line\">\tstus := []student&#123;</span><br><span class=\"line\">\t\t&#123;name: <span class=\"string\">&quot;小王子&quot;</span>, age: <span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">\t\t&#123;name: <span class=\"string\">&quot;娜扎&quot;</span>, age: <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">\t\t&#123;name: <span class=\"string\">&quot;大王八&quot;</span>, age: <span class=\"number\">9000</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, stu := <span class=\"keyword\">range</span> stus &#123;</span><br><span class=\"line\">\t\tm[stu.name] = &amp;stu</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> m &#123;</span><br><span class=\"line\">\t\tfmt.Println(k, <span class=\"string\">&quot;=&gt;&quot;</span>, v.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个<code>person</code>的构造函数。 因为<code>struct</code>是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newPerson</span><span class=\"params\">(name, city <span class=\"keyword\">string</span>, age <span class=\"keyword\">int8</span>)</span> *<span class=\"title\">person</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;person&#123;</span><br><span class=\"line\">\t\tname: name,</span><br><span class=\"line\">\t\tcity: city,</span><br><span class=\"line\">\t\tage:  age,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用构造函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p9 := newPerson(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;沙河&quot;</span>, <span class=\"number\">90</span>)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, p9) <span class=\"comment\">//&amp;main.person&#123;name:&quot;张三&quot;, city:&quot;沙河&quot;, age:90&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法和接收者\"><a href=\"#方法和接收者\" class=\"headerlink\" title=\"方法和接收者\"></a>方法和接收者</h2><p>Go语言中的<code>方法（Method）</code>是一种作用于特定类型变量的函数。这种特定类型变量叫做<code>接收者（Receiver）</code>。接收者的概念就类似于其他语言中的<code>this</code>或者 <code>self</code>。</p>\n<p>方法的定义格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(接收者变量 接收者类型)</span> 方法名<span class=\"params\">(参数列表)</span> <span class=\"params\">(返回参数)</span></span> &#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li>\n<li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li>\n<li>方法名、参数列表、返回参数：具体格式与函数定义相同。</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person 结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//NewPerson 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPerson</span><span class=\"params\">(name <span class=\"keyword\">string</span>, age <span class=\"keyword\">int8</span>)</span> *<span class=\"title\">Person</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Person&#123;</span><br><span class=\"line\">\t\tname: name,</span><br><span class=\"line\">\t\tage:  age,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Dream Person做梦的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span> <span class=\"title\">Dream</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s的梦想是学好Go语言！\\n&quot;</span>, p.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tp1.Dream()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p>\n<h3 id=\"指针类型的接收者\"><a href=\"#指针类型的接收者\" class=\"headerlink\" title=\"指针类型的接收者\"></a>指针类型的接收者</h3><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的<code>this</code>或者<code>self</code>。 例如我们为<code>Person</code>添加一个<code>SetAge</code>方法，来修改实例变量的年龄。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SetAge 设置p的年龄</span></span><br><span class=\"line\"><span class=\"comment\">// 使用指针接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span> <span class=\"title\">SetAge</span><span class=\"params\">(newAge <span class=\"keyword\">int8</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.age = newAge</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用该方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">\tp1.SetAge(<span class=\"number\">30</span>)</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值类型的接收者\"><a href=\"#值类型的接收者\" class=\"headerlink\" title=\"值类型的接收者\"></a>值类型的接收者</h3><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SetAge2 设置p的年龄</span></span><br><span class=\"line\"><span class=\"comment\">// 使用值接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span> <span class=\"title\">SetAge2</span><span class=\"params\">(newAge <span class=\"keyword\">int8</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.age = newAge</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tp1.Dream()</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">\tp1.SetAge2(<span class=\"number\">30</span>) <span class=\"comment\">// (*p1).SetAge2(30)</span></span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么时候应该使用指针类型接收者\"><a href=\"#什么时候应该使用指针类型接收者\" class=\"headerlink\" title=\"什么时候应该使用指针类型接收者\"></a>什么时候应该使用指针类型接收者</h3><ol>\n<li>需要修改接收者中的值</li>\n<li>接收者是拷贝代价比较大的大对象</li>\n<li>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</li>\n</ol>\n<h2 id=\"任意类型添加方法\"><a href=\"#任意类型添加方法\" class=\"headerlink\" title=\"任意类型添加方法\"></a>任意类型添加方法</h2><p>在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的<code>int</code>类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyInt 将int定义为自定义MyInt类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SayHello 为MyInt添加一个SayHello的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m MyInt)</span> <span class=\"title\">SayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello, 我是一个int。&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m1 MyInt</span><br><span class=\"line\">\tm1.SayHello() <span class=\"comment\">//Hello, 我是一个int。</span></span><br><span class=\"line\">\tm1 = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v  %T\\n&quot;</span>, m1, m1) <span class=\"comment\">//100  main.MyInt</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意事项：</strong> 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</p>\n<h2 id=\"结构体的匿名字段\"><a href=\"#结构体的匿名字段\" class=\"headerlink\" title=\"结构体的匿名字段\"></a>结构体的匿名字段</h2><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person 结构体Person类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := Person&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">18</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, p1)        <span class=\"comment\">//main.Person&#123;string:&quot;北京&quot;, int:18&#125;</span></span><br><span class=\"line\">\tfmt.Println(p1.<span class=\"keyword\">string</span>, p1.<span class=\"keyword\">int</span>) <span class=\"comment\">//北京 18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>这里匿名字段的说法并不代表没有字段名，而是默认会采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>\n<h2 id=\"嵌套结构体\"><a href=\"#嵌套结构体\" class=\"headerlink\" title=\"嵌套结构体\"></a>嵌套结构体</h2><p>一个结构体中可以嵌套包 含另一个结构体或结构体指针，就像下面的示例代码那样。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Address 地址结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProvince <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity     <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User 用户结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGender  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddress Address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuser1 := User&#123;</span><br><span class=\"line\">\t\tName:   <span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\t\tGender: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\tAddress: Address&#123;</span><br><span class=\"line\">\t\t\tProvince: <span class=\"string\">&quot;山东&quot;</span>,</span><br><span class=\"line\">\t\t\tCity:     <span class=\"string\">&quot;威海&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;user1=%#v\\n&quot;</span>, user1)<span class=\"comment\">//user1=main.User&#123;Name:&quot;小王子&quot;, Gender:&quot;男&quot;, Address:main.Address&#123;Province:&quot;山东&quot;, City:&quot;威海&quot;&#125;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套匿名字段\"><a href=\"#嵌套匿名字段\" class=\"headerlink\" title=\"嵌套匿名字段\"></a>嵌套匿名字段</h3><p>上面user结构体中嵌套的<code>Address</code>结构体也可以采用匿名字段的方式，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Address 地址结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProvince <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity     <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User 用户结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGender  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddress <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user2 User</span><br><span class=\"line\">\tuser2.Name = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">\tuser2.Gender = <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">\tuser2.Address.Province = <span class=\"string\">&quot;山东&quot;</span>    <span class=\"comment\">// 匿名字段默认使用类型名作为字段名</span></span><br><span class=\"line\">\tuser2.City = <span class=\"string\">&quot;威海&quot;</span>                <span class=\"comment\">// 匿名字段可以省略</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;user2=%#v\\n&quot;</span>, user2) <span class=\"comment\">//user2=main.User&#123;Name:&quot;小王子&quot;, Gender:&quot;男&quot;, Address:main.Address&#123;Province:&quot;山东&quot;, City:&quot;威海&quot;&#125;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当访问结构体成员时会先在结构体中查找该字段，找不到再去嵌套的匿名字段中查找。</p>\n<h3 id=\"嵌套结构体的字段名冲突\"><a href=\"#嵌套结构体的字段名冲突\" class=\"headerlink\" title=\"嵌套结构体的字段名冲突\"></a>嵌套结构体的字段名冲突</h3><p>嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Address 地址结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProvince   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity       <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Email 邮箱结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Email <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAccount    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User 用户结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGender <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddress</span><br><span class=\"line\">\tEmail</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user3 User</span><br><span class=\"line\">\tuser3.Name = <span class=\"string\">&quot;沙河娜扎&quot;</span></span><br><span class=\"line\">\tuser3.Gender = <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// user3.CreateTime = &quot;2019&quot; //ambiguous selector user3.CreateTime</span></span><br><span class=\"line\">\tuser3.Address.CreateTime = <span class=\"string\">&quot;2000&quot;</span> <span class=\"comment\">//指定Address结构体中的CreateTime</span></span><br><span class=\"line\">\tuser3.Email.CreateTime = <span class=\"string\">&quot;2000&quot;</span>   <span class=\"comment\">//指定Email结构体中的CreateTime</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体的“继承”\"><a href=\"#结构体的“继承”\" class=\"headerlink\" title=\"结构体的“继承”\"></a>结构体的“继承”</h2><p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Animal 动物</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给animal 实现一个移动方法’mothed‘</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Animal)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会动！\\n&quot;</span>, a.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Dog 狗</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tFeet    <span class=\"keyword\">int8</span></span><br><span class=\"line\">\t*Animal <span class=\"comment\">//通过嵌套匿名结构体实现继承</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给狗实现一个汪汪的方法“method”</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span> <span class=\"title\">wang</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会汪汪汪~\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td1 := &amp;Dog&#123;</span><br><span class=\"line\">\t\tFeet: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\tAnimal: &amp;Animal&#123; <span class=\"comment\">//注意嵌套的是结构体指针</span></span><br><span class=\"line\">\t\t\tname: <span class=\"string\">&quot;乐乐&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td1.wang() <span class=\"comment\">//乐乐会汪汪汪~</span></span><br><span class=\"line\">\td1.move() <span class=\"comment\">//乐乐会动！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体字段的可见性\"><a href=\"#结构体字段的可见性\" class=\"headerlink\" title=\"结构体字段的可见性\"></a>结构体字段的可见性</h2><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p>\n<h2 id=\"结构体与JSON序列化\"><a href=\"#结构体与JSON序列化\" class=\"headerlink\" title=\"结构体与JSON序列化\"></a>结构体与JSON序列化</h2><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号<code>&quot;&quot;</code>包裹，使用冒号<code>:</code>分隔，然后紧接着值；多个键值之间使用英文<code>,</code>分隔。</p>\n<blockquote>\n<p>结构体与json</p>\n<p>1.序列化: 把Go 语言中的结构体变量 – &gt; json 格式的字符串</p>\n<p>2.反序列化: json 格式的字符串 – &gt; Go语言能够是别的结构体变量</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Student 学生</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int</span></span><br><span class=\"line\">\tGender <span class=\"keyword\">string</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Class 班级</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Class <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTitle    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tStudents []*Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := &amp;Class&#123;</span><br><span class=\"line\">\t\tTitle:    <span class=\"string\">&quot;101&quot;</span>,</span><br><span class=\"line\">\t\tStudents: <span class=\"built_in\">make</span>([]*Student, <span class=\"number\">0</span>, <span class=\"number\">200</span>),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tstu := &amp;Student&#123;</span><br><span class=\"line\">\t\t\tName:   fmt.Sprintf(<span class=\"string\">&quot;stu%02d&quot;</span>, i),</span><br><span class=\"line\">\t\t\tGender: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\t\tID:     i,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.Students = <span class=\"built_in\">append</span>(c.Students, stu)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//JSON序列化：结构体--&gt;JSON格式的字符串</span></span><br><span class=\"line\">\tdata, err := json.Marshal(c)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;json marshal failed&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;json:%s\\n&quot;</span>, data)</span><br><span class=\"line\">\t<span class=\"comment\">//JSON反序列化：JSON格式的字符串--&gt;结构体</span></span><br><span class=\"line\">\tstr := <span class=\"string\">`&#123;&quot;Title&quot;:&quot;101&quot;,&quot;Students&quot;:[&#123;&quot;ID&quot;:0,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu00&quot;&#125;,&#123;&quot;ID&quot;:1,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu01&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu02&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu03&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu04&quot;&#125;,&#123;&quot;ID&quot;:5,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu05&quot;&#125;,&#123;&quot;ID&quot;:6,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu06&quot;&#125;,&#123;&quot;ID&quot;:7,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu07&quot;&#125;,&#123;&quot;ID&quot;:8,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu08&quot;&#125;,&#123;&quot;ID&quot;:9,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu09&quot;&#125;]&#125;`</span></span><br><span class=\"line\">\tc1 := &amp;Class&#123;&#125;</span><br><span class=\"line\">\terr = json.Unmarshal([]<span class=\"keyword\">byte</span>(str), c1)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;json unmarshal failed!&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, c1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体标签（Tag）\"><a href=\"#结构体标签（Tag）\" class=\"headerlink\" title=\"结构体标签（Tag）\"></a>结构体标签（Tag）</h2><p><code>Tag</code>是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 <code>Tag</code>在结构体字段的后方定义，由一对<strong>反引号</strong>包裹起来，具体的格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`key1:<span class=\"string\">&quot;value1&quot;</span> key2:<span class=\"string\">&quot;value2&quot;</span>`</span><br></pre></td></tr></table></figure>\n\n<p>结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。</p>\n<p><strong>注意事项：</strong> 为结构体编写<code>Tag</code>时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p>\n<p>例如我们为<code>Student</code>结构体的每个字段定义json序列化时使用的Tag：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Student 学生</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;id&quot;`</span> <span class=\"comment\">//通过指定tag实现json序列化该字段时的key</span></span><br><span class=\"line\">\tGender <span class=\"keyword\">string</span> <span class=\"comment\">//json序列化是默认使用字段名作为key</span></span><br><span class=\"line\">\tname   <span class=\"keyword\">string</span> <span class=\"comment\">//私有不能被json包访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts1 := Student&#123;</span><br><span class=\"line\">\t\tID:     <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tGender: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\tname:   <span class=\"string\">&quot;沙河娜扎&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata, err := json.Marshal(s1)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;json marshal failed!&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;json str:%s\\n&quot;</span>, data) <span class=\"comment\">//json str:&#123;&quot;id&quot;:1,&quot;Gender&quot;:&quot;男&quot;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体和方法补充知识点\"><a href=\"#结构体和方法补充知识点\" class=\"headerlink\" title=\"结构体和方法补充知识点\"></a>结构体和方法补充知识点</h2><p>因为slice和map这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage    <span class=\"keyword\">int8</span></span><br><span class=\"line\">\tdreams []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span> <span class=\"title\">SetDreams</span><span class=\"params\">(dreams []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.dreams = dreams</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := Person&#123;name: <span class=\"string\">&quot;小王子&quot;</span>, age: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">\tdata := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;吃饭&quot;</span>, <span class=\"string\">&quot;睡觉&quot;</span>, <span class=\"string\">&quot;打豆豆&quot;</span>&#125;</span><br><span class=\"line\">\tp1.SetDreams(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 你真的想要修改 p1.dreams 吗？</span></span><br><span class=\"line\">\tdata[<span class=\"number\">1</span>] = <span class=\"string\">&quot;不睡觉&quot;</span></span><br><span class=\"line\">\tfmt.Println(p1.dreams)  <span class=\"comment\">// ?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确的做法是在方法中使用传入的slice的拷贝进行结构体赋值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span> <span class=\"title\">SetDreams</span><span class=\"params\">(dreams []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.dreams = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"built_in\">len</span>(dreams))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(p.dreams, dreams)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的问题也存在于返回值slice和map的情况，在实际编码过程中一定要注意这个问题。</p>\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><ol>\n<li>使用“面向对象”的思维方式编写一个学生信息管理系统。<ol>\n<li>学生有id、姓名、年龄、分数等信息</li>\n<li>程序提供展示学生列表、添加学生、编辑学生信息、删除学生等功能</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"cover":false,"length":13861,"excerpt":"<p>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</p>\n<h1 id=\"类型别名和自定义类型\"><a href=\"#类型别名和自定义类型\" class=\"headerlink\" title=\"类型别名和自定义类型\"></a>类型别名和自定义类型</h1><h2 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h2><p>在Go语言中有一些基本的数据类型，如<code>string</code>、<code>整型</code>、<code>浮点型</code>、<code>布尔</code>等数据类型， Go语言中可以使用<code>type</code>关键字来定义自定义类型。</p>\n<p>自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将MyInt定义为int类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>通过<code>type</code>关键字的定义，<code>MyInt</code>就是一种新的类型，它具有<code>int</code>的特性。</p>\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类型别名是<code>Go1.9</code>版本添加的新功能。</p>\n<p>类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TypeAlias = Type</span><br></pre></td></tr></table></figure>\n\n<p>我们之前见过的<code>rune</code>和<code>byte</code>就是类型别名，他们的定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"keyword\">byte</span> = <span class=\"keyword\">uint8</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"keyword\">rune</span> = <span class=\"keyword\">int32</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型定义和类型别名的区别\"><a href=\"#类型定义和类型别名的区别\" class=\"headerlink\" title=\"类型定义和类型别名的区别\"></a>类型定义和类型别名的区别</h2><p>类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别。</p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类型定义</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NewInt <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt = <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a NewInt</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b MyInt</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type of a:%T\\n&quot;</span>, a) <span class=\"comment\">//type of a:main.NewInt</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type of b:%T\\n&quot;</span>, b) <span class=\"comment\">//type of b:int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果显示a的类型是<code>main.NewInt</code>，表示main包下定义的<code>NewInt</code>类型。b的类型是<code>int</code>。<code>MyInt</code>类型只会在代码中存在，编译完成时并不会有<code>MyInt</code>类型。</p>\n<h1 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h1><p>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称<code>struct</code>。 也就是我们可以通过<code>struct</code>来定义自己的类型了。</p>\n<p>Go语言中通过<code>struct</code>来实现面向对象。</p>\n<h2 id=\"结构体的定义\"><a href=\"#结构体的定义\" class=\"headerlink\" title=\"结构体的定义\"></a>结构体的定义</h2><p>使用<code>type</code>和<code>struct</code>关键字来定义结构体，具体代码格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> 类型名 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    字段名 字段类型</span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li>\n<li>字段名：表示结构体字段名。结构体中的字段名必须唯一。</li>\n<li>字段类型：表示结构体字段的具体类型。</li>\n</ul>\n<p>举个例子，我们定义一个<code>Person</code>（人）结构体，代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcity <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样类型的字段也可以写在一行，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname, city <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage        <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就拥有了一个<code>person</code>的自定义类型，它有<code>name</code>、<code>city</code>、<code>age</code>三个字段，分别表示姓名、城市和年龄。这样我们使用这个<code>person</code>结构体就能够很方便的在程序中表示和存储人信息了。</p>\n<p>语言内置的基础数据类型是用来描述一个值的，而结构体是用来描述一组值的。比如一个人有名字、年龄和居住城市等，本质上是一种聚合型的数据类型</p>\n<h2 id=\"结构体实例化\"><a href=\"#结构体实例化\" class=\"headerlink\" title=\"结构体实例化\"></a>结构体实例化</h2><p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p>\n<p>结构体本身也是一种类型，我们可以像声明内置类型一样使用<code>var</code>关键字声明结构体类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 结构体实例 结构体类型</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本实例化\"><a href=\"#基本实例化\" class=\"headerlink\" title=\"基本实例化\"></a>基本实例化</h3><p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcity <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p1 person</span><br><span class=\"line\">\tp1.name = <span class=\"string\">&quot;沙河娜扎&quot;</span></span><br><span class=\"line\">\tp1.city = <span class=\"string\">&quot;北京&quot;</span></span><br><span class=\"line\">\tp1.age = <span class=\"number\">18</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;p1=%v\\n&quot;</span>, p1)  <span class=\"comment\">//p1=&#123;沙河娜扎 北京 18&#125;</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;p1=%#v\\n&quot;</span>, p1) <span class=\"comment\">//p1=main.person&#123;name:&quot;沙河娜扎&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们通过<code>.</code>来访问结构体的字段（成员变量）,例如<code>p1.name</code>和<code>p1.age</code>等。</p>\n<h3 id=\"匿名结构体\"><a href=\"#匿名结构体\" class=\"headerlink\" title=\"匿名结构体\"></a>匿名结构体</h3><p>在定义一些临时数据结构等场景下还可以使用匿名结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user <span class=\"keyword\">struct</span>&#123;Name <span class=\"keyword\">string</span>; Age <span class=\"keyword\">int</span>&#125;</span><br><span class=\"line\">    user.Name = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">    user.Age = <span class=\"number\">18</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, user)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建指针类型结构体\"><a href=\"#创建指针类型结构体\" class=\"headerlink\" title=\"创建指针类型结构体\"></a>创建指针类型结构体</h3><p>我们还可以通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">new</span>(person)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, p2)     <span class=\"comment\">//*main.person</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p2=%#v\\n&quot;</span>, p2) <span class=\"comment\">//p2=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>从打印的结果中我们可以看出<code>p2</code>是一个结构体指针。</p>\n<p>需要注意的是在Go语言中支持对结构体指针直接使用<code>.</code>来访问结构体的成员。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">new</span>(person)</span><br><span class=\"line\">p2.name = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">p2.age = <span class=\"number\">28</span></span><br><span class=\"line\">p2.city = <span class=\"string\">&quot;上海&quot;</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p2=%#v\\n&quot;</span>, p2) <span class=\"comment\">//p2=&amp;main.person&#123;name:&quot;小王子&quot;, city:&quot;上海&quot;, age:28&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取结构体的地址实例化\"><a href=\"#取结构体的地址实例化\" class=\"headerlink\" title=\"取结构体的地址实例化\"></a>取结构体的地址实例化</h3><p>使用<code>&amp;</code>对结构体进行取地址操作相当于对该结构体类型进行了一次<code>new</code>实例化操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p3 := &amp;person&#123;&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%T\\n&quot;</span>, p3)     <span class=\"comment\">//*main.person</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p3=%#v\\n&quot;</span>, p3) <span class=\"comment\">//p3=&amp;main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br><span class=\"line\">p3.name = <span class=\"string\">&quot;七米&quot;</span></span><br><span class=\"line\">p3.age = <span class=\"number\">30</span></span><br><span class=\"line\">p3.city = <span class=\"string\">&quot;成都&quot;</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p3=%#v\\n&quot;</span>, p3) <span class=\"comment\">//p3=&amp;main.person&#123;name:&quot;七米&quot;, city:&quot;成都&quot;, age:30&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>p3.name = &quot;七米&quot;</code>其实在底层是<code>(*p3).name = &quot;七米&quot;</code>，这是Go语言帮我们实现的语法糖。</p>\n<h2 id=\"结构体初始化\"><a href=\"#结构体初始化\" class=\"headerlink\" title=\"结构体初始化\"></a>结构体初始化</h2><p>没有初始化的结构体，其成员变量都是对应其类型的零值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tcity <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p4 person</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;p4=%#v\\n&quot;</span>, p4) <span class=\"comment\">//p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用键值对初始化\"><a href=\"#使用键值对初始化\" class=\"headerlink\" title=\"使用键值对初始化\"></a>使用键值对初始化</h3><p>使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p5 := person&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\tcity: <span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">\tage:  <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p5=%#v\\n&quot;</span>, p5) <span class=\"comment\">//p5=main.person&#123;name:&quot;小王子&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以对结构体指针进行键值对初始化，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p6 := &amp;person&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\tcity: <span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">\tage:  <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p6=%#v\\n&quot;</span>, p6) <span class=\"comment\">//p6=&amp;main.person&#123;name:&quot;小王子&quot;, city:&quot;北京&quot;, age:18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p7 := &amp;person&#123;</span><br><span class=\"line\">\tcity: <span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p7=%#v\\n&quot;</span>, p7) <span class=\"comment\">//p7=&amp;main.person&#123;name:&quot;&quot;, city:&quot;北京&quot;, age:0&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用值的列表初始化\"><a href=\"#使用值的列表初始化\" class=\"headerlink\" title=\"使用值的列表初始化\"></a>使用值的列表初始化</h3><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p8 := &amp;person&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;沙河娜扎&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;北京&quot;</span>,</span><br><span class=\"line\">\t<span class=\"number\">28</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;p8=%#v\\n&quot;</span>, p8) <span class=\"comment\">//p8=&amp;main.person&#123;name:&quot;沙河娜扎&quot;, city:&quot;北京&quot;, age:28&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这种格式初始化时，需要注意：</p>\n<ol>\n<li>必须初始化结构体的所有字段。</li>\n<li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li>\n<li>该方式不能和键值初始化方式混用。</li>\n</ol>\n<h2 id=\"结构体内存布局\"><a href=\"#结构体内存布局\" class=\"headerlink\" title=\"结构体内存布局\"></a>结构体内存布局</h2><p>结构体占用一块连续的内存。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ta <span class=\"keyword\">int8</span></span><br><span class=\"line\">\tb <span class=\"keyword\">int8</span></span><br><span class=\"line\">\tc <span class=\"keyword\">int8</span></span><br><span class=\"line\">\td <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">n := test&#123;</span><br><span class=\"line\">\t<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.a %p\\n&quot;</span>, &amp;n.a)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.b %p\\n&quot;</span>, &amp;n.b)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.c %p\\n&quot;</span>, &amp;n.c)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;n.d %p\\n&quot;</span>, &amp;n.d)</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n.a 0xc0000a0060</span><br><span class=\"line\">n.b 0xc0000a0061</span><br><span class=\"line\">n.c 0xc0000a0062</span><br><span class=\"line\">n.d 0xc0000a0063</span><br></pre></td></tr></table></figure>\n\n<p>【进阶知识点】关于Go语言中的内存对齐推荐阅读:<a href=\"https://segmentfault.com/a/1190000017527311?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com\">在 Go 中恰到好处的内存对齐</a></p>\n<h3 id=\"空结构体\"><a href=\"#空结构体\" class=\"headerlink\" title=\"空结构体\"></a>空结构体</h3><p>空结构体是不占用空间的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">fmt.Println(unsafe.Sizeof(v))  <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>请问下面代码的执行结果是什么？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]*student)</span><br><span class=\"line\">\tstus := []student&#123;</span><br><span class=\"line\">\t\t&#123;name: <span class=\"string\">&quot;小王子&quot;</span>, age: <span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">\t\t&#123;name: <span class=\"string\">&quot;娜扎&quot;</span>, age: <span class=\"number\">23</span>&#125;,</span><br><span class=\"line\">\t\t&#123;name: <span class=\"string\">&quot;大王八&quot;</span>, age: <span class=\"number\">9000</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, stu := <span class=\"keyword\">range</span> stus &#123;</span><br><span class=\"line\">\t\tm[stu.name] = &amp;stu</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> m &#123;</span><br><span class=\"line\">\t\tfmt.Println(k, <span class=\"string\">&quot;=&gt;&quot;</span>, v.name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个<code>person</code>的构造函数。 因为<code>struct</code>是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newPerson</span><span class=\"params\">(name, city <span class=\"keyword\">string</span>, age <span class=\"keyword\">int8</span>)</span> *<span class=\"title\">person</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;person&#123;</span><br><span class=\"line\">\t\tname: name,</span><br><span class=\"line\">\t\tcity: city,</span><br><span class=\"line\">\t\tage:  age,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用构造函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p9 := newPerson(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;沙河&quot;</span>, <span class=\"number\">90</span>)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, p9) <span class=\"comment\">//&amp;main.person&#123;name:&quot;张三&quot;, city:&quot;沙河&quot;, age:90&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法和接收者\"><a href=\"#方法和接收者\" class=\"headerlink\" title=\"方法和接收者\"></a>方法和接收者</h2><p>Go语言中的<code>方法（Method）</code>是一种作用于特定类型变量的函数。这种特定类型变量叫做<code>接收者（Receiver）</code>。接收者的概念就类似于其他语言中的<code>this</code>或者 <code>self</code>。</p>\n<p>方法的定义格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(接收者变量 接收者类型)</span> 方法名<span class=\"params\">(参数列表)</span> <span class=\"params\">(返回参数)</span></span> &#123;</span><br><span class=\"line\">    函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，</p>\n<ul>\n<li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li>\n<li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li>\n<li>方法名、参数列表、返回参数：具体格式与函数定义相同。</li>\n</ul>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person 结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//NewPerson 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPerson</span><span class=\"params\">(name <span class=\"keyword\">string</span>, age <span class=\"keyword\">int8</span>)</span> *<span class=\"title\">Person</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Person&#123;</span><br><span class=\"line\">\t\tname: name,</span><br><span class=\"line\">\t\tage:  age,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Dream Person做梦的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span> <span class=\"title\">Dream</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s的梦想是学好Go语言！\\n&quot;</span>, p.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tp1.Dream()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p>\n<h3 id=\"指针类型的接收者\"><a href=\"#指针类型的接收者\" class=\"headerlink\" title=\"指针类型的接收者\"></a>指针类型的接收者</h3><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的<code>this</code>或者<code>self</code>。 例如我们为<code>Person</code>添加一个<code>SetAge</code>方法，来修改实例变量的年龄。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SetAge 设置p的年龄</span></span><br><span class=\"line\"><span class=\"comment\">// 使用指针接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span> <span class=\"title\">SetAge</span><span class=\"params\">(newAge <span class=\"keyword\">int8</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.age = newAge</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用该方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">\tp1.SetAge(<span class=\"number\">30</span>)</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值类型的接收者\"><a href=\"#值类型的接收者\" class=\"headerlink\" title=\"值类型的接收者\"></a>值类型的接收者</h3><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SetAge2 设置p的年龄</span></span><br><span class=\"line\"><span class=\"comment\">// 使用值接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span> <span class=\"title\">SetAge2</span><span class=\"params\">(newAge <span class=\"keyword\">int8</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.age = newAge</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := NewPerson(<span class=\"string\">&quot;小王子&quot;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">\tp1.Dream()</span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">\tp1.SetAge2(<span class=\"number\">30</span>) <span class=\"comment\">// (*p1).SetAge2(30)</span></span><br><span class=\"line\">\tfmt.Println(p1.age) <span class=\"comment\">// 25</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么时候应该使用指针类型接收者\"><a href=\"#什么时候应该使用指针类型接收者\" class=\"headerlink\" title=\"什么时候应该使用指针类型接收者\"></a>什么时候应该使用指针类型接收者</h3><ol>\n<li>需要修改接收者中的值</li>\n<li>接收者是拷贝代价比较大的大对象</li>\n<li>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</li>\n</ol>\n<h2 id=\"任意类型添加方法\"><a href=\"#任意类型添加方法\" class=\"headerlink\" title=\"任意类型添加方法\"></a>任意类型添加方法</h2><p>在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的<code>int</code>类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MyInt 将int定义为自定义MyInt类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SayHello 为MyInt添加一个SayHello的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m MyInt)</span> <span class=\"title\">SayHello</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello, 我是一个int。&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m1 MyInt</span><br><span class=\"line\">\tm1.SayHello() <span class=\"comment\">//Hello, 我是一个int。</span></span><br><span class=\"line\">\tm1 = <span class=\"number\">100</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v  %T\\n&quot;</span>, m1, m1) <span class=\"comment\">//100  main.MyInt</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意事项：</strong> 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</p>\n<h2 id=\"结构体的匿名字段\"><a href=\"#结构体的匿名字段\" class=\"headerlink\" title=\"结构体的匿名字段\"></a>结构体的匿名字段</h2><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person 结构体Person类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := Person&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"number\">18</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, p1)        <span class=\"comment\">//main.Person&#123;string:&quot;北京&quot;, int:18&#125;</span></span><br><span class=\"line\">\tfmt.Println(p1.<span class=\"keyword\">string</span>, p1.<span class=\"keyword\">int</span>) <span class=\"comment\">//北京 18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>这里匿名字段的说法并不代表没有字段名，而是默认会采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>\n<h2 id=\"嵌套结构体\"><a href=\"#嵌套结构体\" class=\"headerlink\" title=\"嵌套结构体\"></a>嵌套结构体</h2><p>一个结构体中可以嵌套包 含另一个结构体或结构体指针，就像下面的示例代码那样。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Address 地址结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProvince <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity     <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User 用户结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGender  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddress Address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tuser1 := User&#123;</span><br><span class=\"line\">\t\tName:   <span class=\"string\">&quot;小王子&quot;</span>,</span><br><span class=\"line\">\t\tGender: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\tAddress: Address&#123;</span><br><span class=\"line\">\t\t\tProvince: <span class=\"string\">&quot;山东&quot;</span>,</span><br><span class=\"line\">\t\t\tCity:     <span class=\"string\">&quot;威海&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;user1=%#v\\n&quot;</span>, user1)<span class=\"comment\">//user1=main.User&#123;Name:&quot;小王子&quot;, Gender:&quot;男&quot;, Address:main.Address&#123;Province:&quot;山东&quot;, City:&quot;威海&quot;&#125;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套匿名字段\"><a href=\"#嵌套匿名字段\" class=\"headerlink\" title=\"嵌套匿名字段\"></a>嵌套匿名字段</h3><p>上面user结构体中嵌套的<code>Address</code>结构体也可以采用匿名字段的方式，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Address 地址结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProvince <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity     <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User 用户结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGender  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddress <span class=\"comment\">//匿名字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user2 User</span><br><span class=\"line\">\tuser2.Name = <span class=\"string\">&quot;小王子&quot;</span></span><br><span class=\"line\">\tuser2.Gender = <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">\tuser2.Address.Province = <span class=\"string\">&quot;山东&quot;</span>    <span class=\"comment\">// 匿名字段默认使用类型名作为字段名</span></span><br><span class=\"line\">\tuser2.City = <span class=\"string\">&quot;威海&quot;</span>                <span class=\"comment\">// 匿名字段可以省略</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;user2=%#v\\n&quot;</span>, user2) <span class=\"comment\">//user2=main.User&#123;Name:&quot;小王子&quot;, Gender:&quot;男&quot;, Address:main.Address&#123;Province:&quot;山东&quot;, City:&quot;威海&quot;&#125;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当访问结构体成员时会先在结构体中查找该字段，找不到再去嵌套的匿名字段中查找。</p>\n<h3 id=\"嵌套结构体的字段名冲突\"><a href=\"#嵌套结构体的字段名冲突\" class=\"headerlink\" title=\"嵌套结构体的字段名冲突\"></a>嵌套结构体的字段名冲突</h3><p>嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Address 地址结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProvince   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCity       <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Email 邮箱结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Email <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAccount    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tCreateTime <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User 用户结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tGender <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAddress</span><br><span class=\"line\">\tEmail</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user3 User</span><br><span class=\"line\">\tuser3.Name = <span class=\"string\">&quot;沙河娜扎&quot;</span></span><br><span class=\"line\">\tuser3.Gender = <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// user3.CreateTime = &quot;2019&quot; //ambiguous selector user3.CreateTime</span></span><br><span class=\"line\">\tuser3.Address.CreateTime = <span class=\"string\">&quot;2000&quot;</span> <span class=\"comment\">//指定Address结构体中的CreateTime</span></span><br><span class=\"line\">\tuser3.Email.CreateTime = <span class=\"string\">&quot;2000&quot;</span>   <span class=\"comment\">//指定Email结构体中的CreateTime</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体的“继承”\"><a href=\"#结构体的“继承”\" class=\"headerlink\" title=\"结构体的“继承”\"></a>结构体的“继承”</h2><p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Animal 动物</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给animal 实现一个移动方法’mothed‘</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Animal)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会动！\\n&quot;</span>, a.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Dog 狗</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tFeet    <span class=\"keyword\">int8</span></span><br><span class=\"line\">\t*Animal <span class=\"comment\">//通过嵌套匿名结构体实现继承</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给狗实现一个汪汪的方法“method”</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span> <span class=\"title\">wang</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会汪汪汪~\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\td1 := &amp;Dog&#123;</span><br><span class=\"line\">\t\tFeet: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t\tAnimal: &amp;Animal&#123; <span class=\"comment\">//注意嵌套的是结构体指针</span></span><br><span class=\"line\">\t\t\tname: <span class=\"string\">&quot;乐乐&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td1.wang() <span class=\"comment\">//乐乐会汪汪汪~</span></span><br><span class=\"line\">\td1.move() <span class=\"comment\">//乐乐会动！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体字段的可见性\"><a href=\"#结构体字段的可见性\" class=\"headerlink\" title=\"结构体字段的可见性\"></a>结构体字段的可见性</h2><p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p>\n<h2 id=\"结构体与JSON序列化\"><a href=\"#结构体与JSON序列化\" class=\"headerlink\" title=\"结构体与JSON序列化\"></a>结构体与JSON序列化</h2><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号<code>&quot;&quot;</code>包裹，使用冒号<code>:</code>分隔，然后紧接着值；多个键值之间使用英文<code>,</code>分隔。</p>\n<blockquote>\n<p>结构体与json</p>\n<p>1.序列化: 把Go 语言中的结构体变量 – &gt; json 格式的字符串</p>\n<p>2.反序列化: json 格式的字符串 – &gt; Go语言能够是别的结构体变量</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Student 学生</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int</span></span><br><span class=\"line\">\tGender <span class=\"keyword\">string</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Class 班级</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Class <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTitle    <span class=\"keyword\">string</span></span><br><span class=\"line\">\tStudents []*Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := &amp;Class&#123;</span><br><span class=\"line\">\t\tTitle:    <span class=\"string\">&quot;101&quot;</span>,</span><br><span class=\"line\">\t\tStudents: <span class=\"built_in\">make</span>([]*Student, <span class=\"number\">0</span>, <span class=\"number\">200</span>),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tstu := &amp;Student&#123;</span><br><span class=\"line\">\t\t\tName:   fmt.Sprintf(<span class=\"string\">&quot;stu%02d&quot;</span>, i),</span><br><span class=\"line\">\t\t\tGender: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\t\tID:     i,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc.Students = <span class=\"built_in\">append</span>(c.Students, stu)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//JSON序列化：结构体--&gt;JSON格式的字符串</span></span><br><span class=\"line\">\tdata, err := json.Marshal(c)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;json marshal failed&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;json:%s\\n&quot;</span>, data)</span><br><span class=\"line\">\t<span class=\"comment\">//JSON反序列化：JSON格式的字符串--&gt;结构体</span></span><br><span class=\"line\">\tstr := <span class=\"string\">`&#123;&quot;Title&quot;:&quot;101&quot;,&quot;Students&quot;:[&#123;&quot;ID&quot;:0,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu00&quot;&#125;,&#123;&quot;ID&quot;:1,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu01&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu02&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu03&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu04&quot;&#125;,&#123;&quot;ID&quot;:5,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu05&quot;&#125;,&#123;&quot;ID&quot;:6,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu06&quot;&#125;,&#123;&quot;ID&quot;:7,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu07&quot;&#125;,&#123;&quot;ID&quot;:8,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu08&quot;&#125;,&#123;&quot;ID&quot;:9,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu09&quot;&#125;]&#125;`</span></span><br><span class=\"line\">\tc1 := &amp;Class&#123;&#125;</span><br><span class=\"line\">\terr = json.Unmarshal([]<span class=\"keyword\">byte</span>(str), c1)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;json unmarshal failed!&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%#v\\n&quot;</span>, c1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体标签（Tag）\"><a href=\"#结构体标签（Tag）\" class=\"headerlink\" title=\"结构体标签（Tag）\"></a>结构体标签（Tag）</h2><p><code>Tag</code>是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 <code>Tag</code>在结构体字段的后方定义，由一对<strong>反引号</strong>包裹起来，具体的格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`key1:<span class=\"string\">&quot;value1&quot;</span> key2:<span class=\"string\">&quot;value2&quot;</span>`</span><br></pre></td></tr></table></figure>\n\n<p>结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。</p>\n<p><strong>注意事项：</strong> 为结构体编写<code>Tag</code>时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p>\n<p>例如我们为<code>Student</code>结构体的每个字段定义json序列化时使用的Tag：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Student 学生</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;id&quot;`</span> <span class=\"comment\">//通过指定tag实现json序列化该字段时的key</span></span><br><span class=\"line\">\tGender <span class=\"keyword\">string</span> <span class=\"comment\">//json序列化是默认使用字段名作为key</span></span><br><span class=\"line\">\tname   <span class=\"keyword\">string</span> <span class=\"comment\">//私有不能被json包访问</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts1 := Student&#123;</span><br><span class=\"line\">\t\tID:     <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tGender: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">\t\tname:   <span class=\"string\">&quot;沙河娜扎&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata, err := json.Marshal(s1)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;json marshal failed!&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;json str:%s\\n&quot;</span>, data) <span class=\"comment\">//json str:&#123;&quot;id&quot;:1,&quot;Gender&quot;:&quot;男&quot;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体和方法补充知识点\"><a href=\"#结构体和方法补充知识点\" class=\"headerlink\" title=\"结构体和方法补充知识点\"></a>结构体和方法补充知识点</h2><p>因为slice和map这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage    <span class=\"keyword\">int8</span></span><br><span class=\"line\">\tdreams []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span> <span class=\"title\">SetDreams</span><span class=\"params\">(dreams []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.dreams = dreams</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := Person&#123;name: <span class=\"string\">&quot;小王子&quot;</span>, age: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">\tdata := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;吃饭&quot;</span>, <span class=\"string\">&quot;睡觉&quot;</span>, <span class=\"string\">&quot;打豆豆&quot;</span>&#125;</span><br><span class=\"line\">\tp1.SetDreams(data)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 你真的想要修改 p1.dreams 吗？</span></span><br><span class=\"line\">\tdata[<span class=\"number\">1</span>] = <span class=\"string\">&quot;不睡觉&quot;</span></span><br><span class=\"line\">\tfmt.Println(p1.dreams)  <span class=\"comment\">// ?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确的做法是在方法中使用传入的slice的拷贝进行结构体赋值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span> <span class=\"title\">SetDreams</span><span class=\"params\">(dreams []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tp.dreams = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"built_in\">len</span>(dreams))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(p.dreams, dreams)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样的问题也存在于返回值slice和map的情况，在实际编码过程中一定要注意这个问题。</p>\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><ol>\n<li>使用“面向对象”的思维方式编写一个学生信息管理系统。<ol>\n<li>学生有id、姓名、年龄、分数等信息</li>\n<li>程序提供展示学生列表、添加学生、编辑学生信息、删除学生等功能</li>\n</ol>\n</li>\n</ol>"},{"title":"Kubernetes容器网络","date":"2021-07-15T01:14:37.000Z","_content":"## 容器是什么\n\n容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬到任何地方运行。对于大多数如Docker、RKT，等Linux容器，其实就是利用Linux Namespace技术创建隔离的进程空间、文件系统、网络命名空间、用户空间、主机名的一组进程。\n\n所以说，容器，其实是一种特殊的进程而已。\n\n一个“容器”，实际上是一个由 Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境。\n\n### 容器优势\n\n- 开销更少，无需像虚拟化一样虚拟完整的内核以及初始化环境，和启动一些多余的系统进程。\n- 可移植性强，容器可以轻松在不同平台移植，如直接运行`docker run -d --name nginx -p 80:80 nginx`\n- 高效率，开发打完包构建容器后，可以更快部署，发布\n- 敏捷开发，更快的移植，无需担心依赖的环境不一致的问题\n- ....\n\n### Kebernetes\n\nk8s 是什么？为什么要引入 k8s，kubernetes 其实是google公司开源，和Redhat公司一起开发的一个容器编排项目。\n\n- k8s 是什么，为什么要引入k8s：https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/\n\n- k8s 组件有哪些：https://kubernetes.io/zh/docs/concepts/overview/components/ \n\n## 容器网络模型\n\n### docker 的三种网络模式\n\n在将容器网络之前先讲一下docker 的网络模式，`docker network ls`  可以看到\n\n```\n NETWORK ID          NAME                DRIVER              SCOPE\n7152832275d0        bridge              bridge              local\nbfc2647e9b0b        host                host                local\n00ed57db3efb        none                null                local\n```\n\n- bridge 借助虚拟网桥设备为容器建立网络连接\n\n- host 设置容器直接共享当前节点主机的网络名称空间\n\n- none 对于此容器，禁用所有网络。通常与自定义网络驱动程序结合使用\n\n  ```bash\n  # 每个容器都有自己的独立的'网络栈'，如果你想要实现两台主机之间的通信，最直接的办法，就是把它们用一根网线连接起来；而如果你想要实现多台主机之间的通信，那就需要用网线，把它们连接在一台交换机上，即网桥（Bridge）。它是一个工作在数据链路层（Data Link）的设备，主要功能是根据 MAC 地址学习来将数据包转发到网桥的不同端口（Port）上\n  # 在容器中，Docker安装完成时会创建一个名为docker0的linux bridge，不指定网络时，创建的网络默认为桥接网络，都会桥接到docker0上。\n  # 如何把容器连接到这个docker0 网桥上呢？这个时候就需要 Veth Pair 的虚拟设备了，该设备一般是成对的出现，并且，从其中一个“网卡”发出的数据包，可以直接出现在与它对应的另一张“网卡”上，哪怕这两个“网卡”在不同的 Network Namespace 里\n  $ brctl show\n  bridge name     bridge id               STP enabled     interfaces\n  docker0         8000.0242f2caa77e       no\n  pan1            8000.000000000000       no\n  $ docker run -d -u daemon  --name 'net-bridge' busybox top \n  $ docker exec -ti net-bridge  /bin/sh\n  # Veth Pair虚拟网卡设备eth0@if62\n  / $ ip a\n  1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1000\n      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n      inet 127.0.0.1/8 scope host lo\n         valid_lft forever preferred_lft forever\n  61: eth0@if62: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue\n      link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n      inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n         valid_lft forever preferred_lft forever\n  / $ route -n\n  Kernel IP routing table\n  Destination     Gateway         Genmask         Flags Metric Ref    Use Iface\n  0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n  172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n  # 宿主机上查看接口信息,启动了一个虚拟网卡设备 vethaf3497b@if61\n  $ ip a | tail -4\n  62: vethaf3497b@if61: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n      link/ether ca:2f:b0:6a:a1:28 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n      inet6 fe80::c82f:b0ff:fe6a:a128/64 scope link\n         valid_lft forever preferred_lft forever\n  \n  # brctl show 可以看到docker0 设备上多了一个接口 vethf29b81e 即刚才启动容器的虚拟网卡\n  $ brctl show\n  bridge name     bridge id               STP enabled     interfaces\n  docker0         8000.0242f2caa77e       no              vethaf3497b\n  pan1            8000.000000000000       no\n  \n  # host网络，就是和host主机共享网络，会和host使用一样的网络，host网络的性能比较高，但也会不可避免地引入共享网络资源的问题，比如端口冲突，比如隔离性问题。\n  \n  $ docker run --net=host busybox ifconfig\n  docker0   Link encap:Ethernet  HWaddr 02:42:F2:CA:A7:7E\n            inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0\n            inet6 addr: fe80::42:f2ff:feca:a77e/64 Scope:Link\n            UP BROADCAST MULTICAST  MTU:1500  Metric:1\n            RX packets:274096 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:323190 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:0\n            RX bytes:13525456 (12.8 MiB)  TX bytes:1664281006 (1.5 GiB)\n  \n  enp0s31f6 Link encap:Ethernet  HWaddr 54:E1:AD:08:B4:21\n            UP BROADCAST MULTICAST  MTU:1500  Metric:1\n            RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n            Interrupt:16 Memory:f2200000-f2220000\n  \n  lo        Link encap:Local Loopback\n            inet addr:127.0.0.1  Mask:255.0.0.0\n            inet6 addr: ::1/128 Scope:Host\n            UP LOOPBACK RUNNING  MTU:65536  Metric:1\n            RX packets:1850471 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:1850471 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:1186483790 (1.1 GiB)  TX bytes:1186483790 (1.1 GiB)\n  \n  pan1      Link encap:Ethernet  HWaddr 12:AA:30:13:D7:A4\n            inet addr:10.6.207.1  Bcast:10.6.207.255  Mask:255.255.255.0\n            inet6 addr: fe80::10aa:30ff:fe13:d7a4/64 Scope:Link\n            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n            RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:14194 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:0 (0.0 B)  TX bytes:2916067 (2.7 MiB)\n  wlp3s0    Link encap:Ethernet  HWaddr F8:59:71:8E:3F:55\n            inet addr:10.10.134.147  Bcast:10.10.143.255  Mask:255.255.240.0\n            inet6 addr: fe80::54ce:44cc:368:d288/64 Scope:Link\n            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n            RX packets:16914279 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:4101535 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:7919534294 (7.3 GiB)  TX bytes:2673781183 (2.4 GiB)          \n  ....\n  \n  # none网络，在该网络下的容器仅有lo网卡，属于封闭式网络，通常用于对安全性要求较高并且不需要联网的应用\n  docker run --rm -it --network=none busybox ip a\n  1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1000\n      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n      inet 127.0.0.1/8 scope host lo\n         valid_lft forever preferred_lft forever\n   \n  ```\n\n接下来以docker 两种通信方式来介绍容器通信模式：\n\n### 单机容器通信\n\n同一个宿主机上的不同容器通过 docker0 网桥进行通信的流程如图：\n\n![image-20210713104524840](https://i.loli.net/2021/07/14/VutyxR1TczBPSpv.png)\n\n如图说所示，在容器中，通过docker0网桥，凡是连接到docker0的容器，就可以通过它来进行通信。要想容器能够连接到docker0网桥，我们需要类似网线的虚拟设备Veth Pair来把容器连接到网桥上。 \n\n```bash\n# 启动一个container1 \n$ docker run -d --name 'container1' nginx\n$ dockrer exec -ti container1  /bin/sh\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n65: eth0@if66: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n\n# 启动一个container2\n$ docker run -d --name 'container2' nginx\n$ dockrer exec -ti container2  /bin/sh\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n63: eth0@if64: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n\n# 查看宿主机上的虚拟设备Veth Pair, veth182b3a5@if63 和 container2 的eth0@if64 是一对，container1 同理。\n$ ip a | tail -8\n64: veth182b3a5@if63: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 76:97:8e:fe:a9:c7 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet6 fe80::7497:8eff:fefe:a9c7/64 scope link\n       valid_lft forever preferred_lft forever\n66: veth877c7d8@if65: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 12:7e:d0:0f:ae:99 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n    inet6 fe80::107e:d0ff:fe0f:ae99/64 scope link\n       valid_lft forever preferred_lft forever\n\n# container1 ping container2 测试\n# ping 172.17.0.3\nPING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.\n64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.091 ms\n64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.059 ms\n64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.034 ms\n# 可以看到同一宿主机容器默认都是通的，是因为他们默认网关都是docker0 这块网卡。 \n\n```\n\n### 跨主机容器通信\n\n跨主机通信方案有以下几种方案：\n\n- NAT方式\n  NAT就是传统的docker网络，利用宿主机的IP和Iptables来达到容器，主机之间的通信。容器对外IP都是宿主机的IP，NAT的性能损耗比较大。但只要宿主机之间三层IP可达，容器之间就可以通信，比较普适。\n- Tunnel（overlay）方式，VPN，ipip，VXLAN等都是tunnel技术，简单讲就是在容器的数据包间封装一层或多层其他的数据协议头，达到连通的效果。这种方式一般也是只需要三层可达，容器就能互通，比较普适。\n- Routing方式\n  路由方案主要是通过路由设置的方式让容器对容器，容器对宿主机之间相通信。例如：calico的BGP路由方案（非IPIP）。这种方式一般适用于单个数据中心，最常见的是同一个vlan中使用，如果不是，需要设置路由规则。路由方案性能损耗少，和主机网络性能比较接近。\n\n先介绍下NAT方式，所有接入到该桥接设备上的容器都会被NAT隐藏，它们发往Docker主机外部的所有流量都会经过源地址转换后发出(SNAT)，并且默认是无法直接接受节点之外的其他主机发来的请求。当需要接入Docker主机外部流量，就需要进行目标地址转换(DNAT)甚至端口转换将其暴露在外部网络当中。大致的流程图：\n\n![image-20210713111835432](https://i.loli.net/2021/07/14/scPfALv6ibqEMWI.png)\n\n容器内的属于私有地址，需要在左侧的主机上的eth0上进行源地址转换，而右侧的地址需要被访问，就需要将eth0的地址进行NAT转换。SNAT---->DNAT。\n\n```\n#具体方案在2个主机上通过主机路由和iptables 地址伪装来实现跨主机容器的互通，这里就不做过多解释\n```\n\n## Kubernetes 容器网络CNI插件\n\n这里介绍完docker的网络方案之后，我们来聊聊kubernetes的容器间网络的通信方案。\n\n官网中文doc：https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/\n\n那么什么是CNI（container network interface）容器网络接口，k8s为了更好的控制网络的接入，推出了CNI即容器网络的API接口。CNI维护了一个单独的网桥来代替 docker0。这个网桥的名字就叫作：CNI 网桥，它在宿主机上的设备名称默认是：cni0。\n\nCNI主要解决Pod间的通信，目前流行的CNI插件如：calico, cilium, flannel, kube-ovn, kube-router\n\n## Flannel 插件跨主机通信原理\n\nFlannel 项目是 CoreOS 公司主推的容器网络方案。事实上，Flannel 项目本身只是一个框架，真正为我们提供容器网络功能的，是 Flannel 的后端实现。目前，Flannel 支持三种后端实现，分别是：\n\n- UDP\n- VXLAN\n- host-gw\n\n### udp模式\n\n![image-20210713190907679](https://i.loli.net/2021/07/14/zSH467pZwVF1LBg.png)\n\n可以看到，Flannel UDP 模式提供的其实是一个三层的 Overlay 网络，即：它首先对发出端的 IP 包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。这就好比，Flannel 在不同宿主机上的两个容器之间打通了一条“隧道”，使得这两个容器可以直接使用 IP 地址进行通信，而无需关心容器和宿主机的分布情况。\n\n但是UDP 模式有严重的性能问题，基本已经上被废弃了。\n\n基于 Flannel UDP 模式的容器通信多了一个额外的步骤，即 flanneld 的处理过程。而这个过程，由于使用到了 flannel0 这个 TUN 设备，仅在发出 IP 包的过程中，就需要经过三次用户态与内核态之间的数据拷贝，其性能可想而知。\n\n### VXLAN模式\n\nVXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚似化技术。所以说，VXLAN 可以完全在内核态实现上述封装和解封装的工作，从而通过与前面相似的“隧道”机制，构建出覆盖网络（Overlay Network）\n\n![image-20210713191114467](https://i.loli.net/2021/07/14/Kqv7ULZscznIGFC.png)\n\nVXLAN 模式组建的覆盖网络，其实就是一个由不同宿主机上的 VTEP 设备，也就是 flannel.1 设备组成的虚拟二层网络。对于 VTEP 设备来说，它发出的“内部数据帧”就仿佛是一直在这个虚拟的二层网络上流动。这，也正是覆盖网络的含义,具体就不展开了。\n\n## Kubernetes 三层网络方案\n\n讲了以上flannel 的以上2种方案，我们接下来讲一下纯三层的网络方案，如于 Flannel 的 host-gw 模式和 Calico BGP\n\n###  Flannel 的 host-gw 模式\n\n![image-20210714221235728](https://i.loli.net/2021/07/14/xp64BmUif5PMXsl.png)\n\n假设现在，Node 1 上的 Infra-container-1，要访问 Node 2 上的 Infra-container-2。\n\n当你设置 Flannel 使用 host-gw 模式之后，flanneld 会在宿主机上创建这样一条规则，以 Node 1 为例：\n\n```bash\n$ ip route\n...\n10.244.1.0/24 via 10.168.0.3 dev eth0\n```\n\n这条路由规则的含义是：目的 IP 地址属于 10.244.1.0/24 网段的 IP 包，应该经过本机的 eth0 设备发出去（即：dev eth0）；并且，它下一跳地址（next-hop）是 10.168.0.3（即：via 10.168.0.3）。\n\n如图所示这个下一跳地址对应的，正是我们的目的宿主机 Node 2。\n\n一旦配置了下一跳地址，那么接下来，当 IP 包从网络层进入链路层封装成帧的时候，eth0 设备就会使用下一跳地址对应的 MAC 地址，作为该数据帧的目的 MAC 地址。显然，这个 MAC 地址，正是 Node 2 的 MAC 地址。这样，这个数据帧就会从 Node 1 通过宿主机的二层网络顺利到达 Node 2 上。\n\n而 Node 2 的内核网络栈从二层数据帧里拿到 IP 包后，会“看到”这个 IP 包的目的 IP 地址是 10.244.1.3，即 Infra-container-2 的 IP 地址。这时候，根据 Node 2 上的路由表，该目的地址会匹配到第二条路由规则（也就是 10.244.1.0 对应的路由规则），从而进入 cni0 网桥，进而进入到 Infra-container-2 当中。\n\nhost-gw 模式的工作原理，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。所以宿主机充当了“网关”的角色，即顾名思义“host-gw”\n\n### Calico\n\nCalico 是一套开源的网络和网络安全方案，用于容器、虚拟机、宿主机之前的网络连接，可以用在kubernetes、OpenShift、DockerEE、OpenStrack等PaaS或IaaS平台上。\n\n首先看下calico 架构图\n\n[摘自网上]: https://www.programmersought.com/article/18013193559/\n\n![image-20210713170229021](https://i.loli.net/2021/07/14/t4dhz5sQkFiPWcl.png)\n\n- `Felix`：`calico`的核心组件，运行在每个节点上。主要的功能有接口管理、路由规则、ACL规则和状态报告\n- `Etcd`：保证数据一致性的数据库，存储集群中节点的所有路由信息。为保证数据的可靠和容错建议至少三个以上etcd节点。\n- `Bird`：BGP客户端，`Calico`在每个节点上的都会部署一个BGP客户端（利用Daemonset方式部署），它的作用是将Felix的路由信息读入内核，并通过BGP协议在集群中分发。当Felix将路由插入到Linux内核FIB中时，BGP客户端将获取这些路由并将它们分发到部署中的其他节点。这可以确保在部署时有效地路由流量。\n- `BGP Router Reflector`：使用 BGP client 形成 mesh 全网互联的方案就会导致规模限制，所有节点需要 N^2 个连接，为了解决这个规模问题，BGP 的 `Router Reflector`的方法，使所有 BGP Client 仅与特定 RR 节点互联并做路由同步，从而大大减少连接数。\n\n#### Calico 网络模式\n\n-  IPIP模式，把 IP 层封装到 IP 层的一个 tunnel。作用其实基本上就相当于一个基于IP层的网桥！一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。\n- Router Reflector 模式（RR），Calico 维护的网络在默认是（Node-to-Node Mesh）全互联模式，Calico集群中的节点之间都会相互建立连接，用于路由交换。但是随着集群规模的扩大，mesh模式将形成一个巨大服务网格，连接数成倍增加。这时就需要使用 Route Reflector（路由器反射）模式解决这个问题。\n\n#### BGP 协议\n\n`BGP（border gateway protocol）是外部路由协议（边界网关路由协议）`，用来在AS之间传递路由信息是一种增强的距离矢量路由协议（应用场景），基本功能是在自治系统间自动交换无环路的路由信息，通过交换带有自治系统号序列属性的路径可达信息，来构造自治系统的拓扑图，从而消除路由环路并实施用户配置的路由策略。**只要记住BGP简单理解其实就是实现大规模网络中节点路由信息同步共享的一种协议**。\n\n>实际上，Calico 项目提供的 `BGP` 网络解决方案，与 `Flannel` 的 `host-gw` 模式几乎一样。也就是说，Calico也是基于路由表实现容器数据包转发，但不同于Flannel使用flanneld进程来维护路由信息的做法，而Calico项目使用BGP协议来自动维护整个集群的路由信息。\n\nBGP模式\n\n- `全互联模式`（node-to-node mesh） 每一个BGP Speaker都需要和其他BGP Speaker建立BGP连接，这样BGP连接总数就是N^2，如果数量过大会消耗大量连接。如果集群数量超过100台官方不建议使用此种模式。\n- RR模式（Router Reflection），会指定一个或多个BGP Speaker为RouterReflection，它与网络中其他Speaker建立连接，每个Speaker只要与Router Reflection建立BGP就可以获得全网的路由信息。在calico中可以通过`Global Peer`实现RR模式。\n\n#### Calico IPIP\n\n![image-20210714210320203](https://i.loli.net/2021/07/14/dtF9w1YTnsIZ4Ek.png)\n\nIPIP 是linux内核的驱动程序，可以对数据包进行隧道，上图可以看到两个不同的网络 vlan1 和 vlan2。基于现有的以太网将原始包中的原始IP进行一次封装，通过tunl0解包，这个tunl0类似于ipip模块，和Flannel vxlan的veth很类似。\n\nPod1 访问 Pod2 流程如下：\n\n1. 数据包从 Pod1 出到达Veth Pair另一端（宿主机上，以cali前缀开头）。\n\n2. 进入IP隧道设备（tunl0），由Linux内核IPIP驱动封装，把源容器ip换成源宿主机ip，目的容器ip换成目的主机ip，这样就封装成 Node1 到 Node2 的数据包。\n\n   ```bash\n   此时包的类型：\n     原始IP包：\n     源IP：10.244.1.10\n     目的IP：10.244.2.10\n   \n      TCP：\n      源IP: 192.168.31.62\n      目的iP：192.168.32.63\n   ```\n\n3. 数据包经过路由器三层转发到 Node2\n\n4. Node2 收到数据包后，网络协议栈会使用IPIP驱动进行解包，从中拿到原始IP包。\n\n5. 然后根据路由规则，将数据包转发给cali设备，从而到达 Pod2。\n\n通过如上步骤可以看出，当 Calico 使用 IPIP 模式的时候，集群的网络性能会因为额外的封包和解包工作而下降。所以建议你将所有宿主机节点放在一个子网里，避免使用 IPIP。**不过这里可以利用IPIP模式的CrossSubnet来突破node不能跨VALN的问题，这个目前已经测试通过。**\n\n#### Calico BGP RR\n\ncalico还和flannel host-gw不同之处在于，它不会创建网桥设备，而是通过路由表来维护每个pod的通信，如下图：\n\n![image-20210714200920896](https://i.loli.net/2021/07/14/2nKSBwmRChpUqgD.png)\n\nPod1 访问 Pod2大致流程如下：\n\n- 数据包从Pod1出到达Veth Pair另一端（宿主机上，以cali前缀开头）\n- 宿主机根据路由规则，将数据包转发给下一跳（网关）\n- 到达Node2，根据路由规则将数据包转发给cali设备，从而到达Pod2\n\n实际例子：\n\n```bash\n1.启动2个容器\nkubectl create -f -<<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nettools-deploy\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nettools-deploy\n  template:\n    metadata:\n      labels:\n        app: nettools-deploy\n    spec:\n      containers:\n        - name: nettools-deploy\n          image: registry.ztosys.com/base/network-multitool:lastet\n          imagePullPolicy: IfNotPresent     \n          ports:\n            - containerPort: 80\nEOF\n2.查看2个pod 目前所在的node节点\nkubectl get pod -owide\nNAME                               READY   STATUS    RESTARTS   AGE    IP             NODE         NOMINATED NODE   READINESS GATES\nnettools-deploy-68b646bdfb-2ckgt   1/1     Running   0          113s   10.5.231.54    10.4.83.14   <none>           <none>\nnettools-deploy-68b646bdfb-xbpwd   1/1     Running   0          113s   10.5.228.128   10.4.83.11   <none>           <none>\n3.查看pod中的路由和网卡信息，可以看到路由指向的是一个不存在的网关地址169.254.1.1，这个主要利用了ARP代理欺骗的技术来把pod 所有数据流导到宿主机的 cali70d877f367d@if3 网卡上\nkubectl exec -ti nettools-deploy-68b646bdfb-2ckgt  /bin/sh\nip r\ndefault via 169.254.1.1 dev eth0\n169.254.1.1 dev eth0 scope link\n/ # ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n3: eth0@if9431: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether be:11:81:9a:9b:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.5.231.54/32 scope global eth0\n       valid_lft forever preferred_lft forever\n4.可以登录node 查看Veth Pair 设备和路由信息，这里可以看到网卡的编号和pod 中的网卡名是一样的。所以称之为虚拟网卡对(Veth Pair)，有了这个cali70d877f367d@if3 设备那么容器发出的IP包就会通过veth pair设备到达宿主机\nip r  | grep 10.5.231.54\n10.5.231.54 dev cali70d877f367d scope link\n\nip a | grep -A 4  9431\n9431: cali70d877f367d@if3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 7\n    inet6 fe80::ecee:eeff:feee:eeee/64 scope link\n       valid_lft forever preferred_lft forever\n5.pod1要想跟其他主机pod2通信那么检查node上是否存在相应的路由，然后到达目标宿主机，再到达目标容器\nip r | grep 10.5.228.128\n10.5.228.128/26 via 10.4.83.11 dev bond0 proto bird\n```\n\n其中，这里最核心的 下一跳 路由规则，就是由 Calico 的 Felix 进程负责维护的。这些路由规则信息，则是通过 BGP Client 中 BIRD 组件，使用 BGP 协议来传输。\n\n不难发现，Calico 项目实际上将集群里的所有节点，都当作是边界路由器来处理，它们一起组成了一个全连通的网络，互相之间通过 BGP 协议交换路由规则。这些节点，我们称为 BGP Peer。\n\n需要注意的是calico 维护网络的默认模式是 node-to-node mesh ,这种模式下，每台宿主机的BGP client都会跟集群所有的节点BGP client进行通信交换路由。这样一来，随着节点规模数量N的增加，连接会以N的2次方增长，会集群网络本身带来巨大压力，在集群规模比较大时，官方建议是使用BGP-RR 如下是我们使用网络硬件设备作为RR\n\n```bash\ncalicoctl node status\nCalico process is running.\n\nIPv4 BGP status\n+--------------+-----------+-------+------------+-------------+\n| PEER ADDRESS | PEER TYPE | STATE |   SINCE    |    INFO     |\n+--------------+-----------+-------+------------+-------------+\n| 10.4.36.250  | global    | up    | 2021-05-11 | Established |\n| 10.4.36.251  | global    | up    | 2021-05-11 | Established |\n+--------------+-----------+-------+------------+-------------+\n\n```\n\n\n\n#### 目前calico架构图\n\n![image-20210714205042267](https://i.loli.net/2021/07/14/cOREUpCYqS5omPI.png)\n\n现在的架构考虑到了冗余，隔离，性能\n\n- 网络隔离，所有的bgp 学习在一组交换机内，不向上通报，避免容器的bgp 影响到我们sdn 的bgp，带来的排障的麻烦，这是隔离。\n- 性能方面，现在集群 bgp 关闭full mesh，改为global，降低因容器集群规模变大，导致路由过多的问题。\n- 冗余方面，现在每台机器2条线，接2个交换机，bgp 跟2个交换机互联，实现了冗余，所有流量通过 交换机交换，满足了性能跟冗余的要求。\n\n#### Calico 优劣势\n\n优势\n\n- BGP RR没有封包和解包过程，完全基于两端宿主机的路由表进行转发\n- 可以配合使用 `Network Policy` 做 pod 和 pod 之前的访问控制\n\n劣势\n\n- 要求宿主机处于同一个2层网络下，也就是连在一台交换机上，但也可以突破\n- 每个node上会设置大量（大量)的iptables规则、路由，运维、排障难度大\n- 安全策略隔离上也略显不足\n\n### CNI插件性能比较\n\n基于flannel解包包的路由和转发的操作都是在CPU上进行的，这样就造成了计算资源的浪费。下图是从网上找的各种开源网络组件的性能对比。可以看出，无论是带宽还是网络延迟，性能都和calico主机差不多。\n\n![image-20210714212457115](https://i.loli.net/2021/07/14/5r1QBLDSUpcR7Hk.png)\n\n## Kubernetes Service NodePort 和Ingress\n\n#### Service\n\nService 这个 Kubernetes 里重要的服务对象。而 Kubernetes 之所以需要 Service，\n\n- 一方面是因为 Pod 的 IP 不是固定的\n\n- 另一方面则是因为一组 Pod 实例之间总会有负载均衡的需求\n\n实际上，Service 是由 kube-proxy 组件，加上 iptables 来共同实现的。\n\n> 并且现在还支持IPVS的模式，kube-proxy 通过 iptables 处理 Service 的过程，其实需要在宿主机上设置相当多的 iptables 规则。而且，kube-proxy 还需要在控制循环里不断地刷新这些规则来确保它们始终是正确的。当pod数量巨大时，成百上千条 iptables 规则不断地被刷新，会大量占用该宿主机的 CPU 资源，甚至会让宿主机“卡”在这个过程中。所以说，一直以来，基于 iptables 的 Service 实现，都是制约 Kubernetes 项目承载更多量级的 Pod 的主要障碍。我们知道IPVS跟IPtables都是工作基于内核的Netfilter 的 NAT 模式工作的，IPVS 并不需要在宿主机上为每个 Pod 设置 iptables 规则，而是把对这些“规则”的处理放到了内核态，从而极大地降低了维护这些规则的代价。所以当集群规模比较大的时候，可以使用ipvs 来提高性能。\n\nClusterIP 服务是默认的 Kubernetes Service。它为您提供集群内的服务，集群内的其他应用程序可以访问该服务,默认外部无法访问改地址。如图所示\n\n![image-20210714223846542](https://i.loli.net/2021/07/14/5VXtAYkF86OxiNH.png)\n\n#### NodePort\n\n NodePort服务是将外部流量直接发送到您的服务的最原始方式。NodePort，顾名思义，在所有节点（VM）上打开一个特定的端口，发送到这个端口的任何流量都会转发到服务，如图所示。\n\n![image-20210714224044599](https://i.loli.net/2021/07/14/w8H4RvuPsiJnDzN.png)\n\n#### Ingress\n\nIngress 实际上不是一种服务。相反，它位于多个服务的前面，充当“智能路由器”或集群的入口点。\n\nIngress 的功能其实很容易理解：所谓 Ingress，就是 Service 的“Service”，如图所示：\n\n![image-20210714224239095](https://i.loli.net/2021/07/14/hgznYwIPp87KHJF.png)\n\n## FAQ\n\n1. 为什么要用calico \n2. cilium 取代calico\n3. ....\n","source":"_posts/Kubernetes容器网络.md","raw":"---\ntitle: Kubernetes容器网络\ndate: 2021-07-15 09:14:37\ntags:\n---\n## 容器是什么\n\n容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬到任何地方运行。对于大多数如Docker、RKT，等Linux容器，其实就是利用Linux Namespace技术创建隔离的进程空间、文件系统、网络命名空间、用户空间、主机名的一组进程。\n\n所以说，容器，其实是一种特殊的进程而已。\n\n一个“容器”，实际上是一个由 Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境。\n\n### 容器优势\n\n- 开销更少，无需像虚拟化一样虚拟完整的内核以及初始化环境，和启动一些多余的系统进程。\n- 可移植性强，容器可以轻松在不同平台移植，如直接运行`docker run -d --name nginx -p 80:80 nginx`\n- 高效率，开发打完包构建容器后，可以更快部署，发布\n- 敏捷开发，更快的移植，无需担心依赖的环境不一致的问题\n- ....\n\n### Kebernetes\n\nk8s 是什么？为什么要引入 k8s，kubernetes 其实是google公司开源，和Redhat公司一起开发的一个容器编排项目。\n\n- k8s 是什么，为什么要引入k8s：https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/\n\n- k8s 组件有哪些：https://kubernetes.io/zh/docs/concepts/overview/components/ \n\n## 容器网络模型\n\n### docker 的三种网络模式\n\n在将容器网络之前先讲一下docker 的网络模式，`docker network ls`  可以看到\n\n```\n NETWORK ID          NAME                DRIVER              SCOPE\n7152832275d0        bridge              bridge              local\nbfc2647e9b0b        host                host                local\n00ed57db3efb        none                null                local\n```\n\n- bridge 借助虚拟网桥设备为容器建立网络连接\n\n- host 设置容器直接共享当前节点主机的网络名称空间\n\n- none 对于此容器，禁用所有网络。通常与自定义网络驱动程序结合使用\n\n  ```bash\n  # 每个容器都有自己的独立的'网络栈'，如果你想要实现两台主机之间的通信，最直接的办法，就是把它们用一根网线连接起来；而如果你想要实现多台主机之间的通信，那就需要用网线，把它们连接在一台交换机上，即网桥（Bridge）。它是一个工作在数据链路层（Data Link）的设备，主要功能是根据 MAC 地址学习来将数据包转发到网桥的不同端口（Port）上\n  # 在容器中，Docker安装完成时会创建一个名为docker0的linux bridge，不指定网络时，创建的网络默认为桥接网络，都会桥接到docker0上。\n  # 如何把容器连接到这个docker0 网桥上呢？这个时候就需要 Veth Pair 的虚拟设备了，该设备一般是成对的出现，并且，从其中一个“网卡”发出的数据包，可以直接出现在与它对应的另一张“网卡”上，哪怕这两个“网卡”在不同的 Network Namespace 里\n  $ brctl show\n  bridge name     bridge id               STP enabled     interfaces\n  docker0         8000.0242f2caa77e       no\n  pan1            8000.000000000000       no\n  $ docker run -d -u daemon  --name 'net-bridge' busybox top \n  $ docker exec -ti net-bridge  /bin/sh\n  # Veth Pair虚拟网卡设备eth0@if62\n  / $ ip a\n  1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1000\n      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n      inet 127.0.0.1/8 scope host lo\n         valid_lft forever preferred_lft forever\n  61: eth0@if62: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue\n      link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n      inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n         valid_lft forever preferred_lft forever\n  / $ route -n\n  Kernel IP routing table\n  Destination     Gateway         Genmask         Flags Metric Ref    Use Iface\n  0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n  172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n  # 宿主机上查看接口信息,启动了一个虚拟网卡设备 vethaf3497b@if61\n  $ ip a | tail -4\n  62: vethaf3497b@if61: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n      link/ether ca:2f:b0:6a:a1:28 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n      inet6 fe80::c82f:b0ff:fe6a:a128/64 scope link\n         valid_lft forever preferred_lft forever\n  \n  # brctl show 可以看到docker0 设备上多了一个接口 vethf29b81e 即刚才启动容器的虚拟网卡\n  $ brctl show\n  bridge name     bridge id               STP enabled     interfaces\n  docker0         8000.0242f2caa77e       no              vethaf3497b\n  pan1            8000.000000000000       no\n  \n  # host网络，就是和host主机共享网络，会和host使用一样的网络，host网络的性能比较高，但也会不可避免地引入共享网络资源的问题，比如端口冲突，比如隔离性问题。\n  \n  $ docker run --net=host busybox ifconfig\n  docker0   Link encap:Ethernet  HWaddr 02:42:F2:CA:A7:7E\n            inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0\n            inet6 addr: fe80::42:f2ff:feca:a77e/64 Scope:Link\n            UP BROADCAST MULTICAST  MTU:1500  Metric:1\n            RX packets:274096 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:323190 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:0\n            RX bytes:13525456 (12.8 MiB)  TX bytes:1664281006 (1.5 GiB)\n  \n  enp0s31f6 Link encap:Ethernet  HWaddr 54:E1:AD:08:B4:21\n            UP BROADCAST MULTICAST  MTU:1500  Metric:1\n            RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n            Interrupt:16 Memory:f2200000-f2220000\n  \n  lo        Link encap:Local Loopback\n            inet addr:127.0.0.1  Mask:255.0.0.0\n            inet6 addr: ::1/128 Scope:Host\n            UP LOOPBACK RUNNING  MTU:65536  Metric:1\n            RX packets:1850471 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:1850471 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:1186483790 (1.1 GiB)  TX bytes:1186483790 (1.1 GiB)\n  \n  pan1      Link encap:Ethernet  HWaddr 12:AA:30:13:D7:A4\n            inet addr:10.6.207.1  Bcast:10.6.207.255  Mask:255.255.255.0\n            inet6 addr: fe80::10aa:30ff:fe13:d7a4/64 Scope:Link\n            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n            RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:14194 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:0 (0.0 B)  TX bytes:2916067 (2.7 MiB)\n  wlp3s0    Link encap:Ethernet  HWaddr F8:59:71:8E:3F:55\n            inet addr:10.10.134.147  Bcast:10.10.143.255  Mask:255.255.240.0\n            inet6 addr: fe80::54ce:44cc:368:d288/64 Scope:Link\n            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n            RX packets:16914279 errors:0 dropped:0 overruns:0 frame:0\n            TX packets:4101535 errors:0 dropped:0 overruns:0 carrier:0\n            collisions:0 txqueuelen:1000\n            RX bytes:7919534294 (7.3 GiB)  TX bytes:2673781183 (2.4 GiB)          \n  ....\n  \n  # none网络，在该网络下的容器仅有lo网卡，属于封闭式网络，通常用于对安全性要求较高并且不需要联网的应用\n  docker run --rm -it --network=none busybox ip a\n  1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1000\n      link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n      inet 127.0.0.1/8 scope host lo\n         valid_lft forever preferred_lft forever\n   \n  ```\n\n接下来以docker 两种通信方式来介绍容器通信模式：\n\n### 单机容器通信\n\n同一个宿主机上的不同容器通过 docker0 网桥进行通信的流程如图：\n\n![image-20210713104524840](https://i.loli.net/2021/07/14/VutyxR1TczBPSpv.png)\n\n如图说所示，在容器中，通过docker0网桥，凡是连接到docker0的容器，就可以通过它来进行通信。要想容器能够连接到docker0网桥，我们需要类似网线的虚拟设备Veth Pair来把容器连接到网桥上。 \n\n```bash\n# 启动一个container1 \n$ docker run -d --name 'container1' nginx\n$ dockrer exec -ti container1  /bin/sh\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n65: eth0@if66: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n$ route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n\n# 启动一个container2\n$ docker run -d --name 'container2' nginx\n$ dockrer exec -ti container2  /bin/sh\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n63: eth0@if64: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n# route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n\n# 查看宿主机上的虚拟设备Veth Pair, veth182b3a5@if63 和 container2 的eth0@if64 是一对，container1 同理。\n$ ip a | tail -8\n64: veth182b3a5@if63: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 76:97:8e:fe:a9:c7 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet6 fe80::7497:8eff:fefe:a9c7/64 scope link\n       valid_lft forever preferred_lft forever\n66: veth877c7d8@if65: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n    link/ether 12:7e:d0:0f:ae:99 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n    inet6 fe80::107e:d0ff:fe0f:ae99/64 scope link\n       valid_lft forever preferred_lft forever\n\n# container1 ping container2 测试\n# ping 172.17.0.3\nPING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.\n64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.091 ms\n64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.059 ms\n64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.034 ms\n# 可以看到同一宿主机容器默认都是通的，是因为他们默认网关都是docker0 这块网卡。 \n\n```\n\n### 跨主机容器通信\n\n跨主机通信方案有以下几种方案：\n\n- NAT方式\n  NAT就是传统的docker网络，利用宿主机的IP和Iptables来达到容器，主机之间的通信。容器对外IP都是宿主机的IP，NAT的性能损耗比较大。但只要宿主机之间三层IP可达，容器之间就可以通信，比较普适。\n- Tunnel（overlay）方式，VPN，ipip，VXLAN等都是tunnel技术，简单讲就是在容器的数据包间封装一层或多层其他的数据协议头，达到连通的效果。这种方式一般也是只需要三层可达，容器就能互通，比较普适。\n- Routing方式\n  路由方案主要是通过路由设置的方式让容器对容器，容器对宿主机之间相通信。例如：calico的BGP路由方案（非IPIP）。这种方式一般适用于单个数据中心，最常见的是同一个vlan中使用，如果不是，需要设置路由规则。路由方案性能损耗少，和主机网络性能比较接近。\n\n先介绍下NAT方式，所有接入到该桥接设备上的容器都会被NAT隐藏，它们发往Docker主机外部的所有流量都会经过源地址转换后发出(SNAT)，并且默认是无法直接接受节点之外的其他主机发来的请求。当需要接入Docker主机外部流量，就需要进行目标地址转换(DNAT)甚至端口转换将其暴露在外部网络当中。大致的流程图：\n\n![image-20210713111835432](https://i.loli.net/2021/07/14/scPfALv6ibqEMWI.png)\n\n容器内的属于私有地址，需要在左侧的主机上的eth0上进行源地址转换，而右侧的地址需要被访问，就需要将eth0的地址进行NAT转换。SNAT---->DNAT。\n\n```\n#具体方案在2个主机上通过主机路由和iptables 地址伪装来实现跨主机容器的互通，这里就不做过多解释\n```\n\n## Kubernetes 容器网络CNI插件\n\n这里介绍完docker的网络方案之后，我们来聊聊kubernetes的容器间网络的通信方案。\n\n官网中文doc：https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/\n\n那么什么是CNI（container network interface）容器网络接口，k8s为了更好的控制网络的接入，推出了CNI即容器网络的API接口。CNI维护了一个单独的网桥来代替 docker0。这个网桥的名字就叫作：CNI 网桥，它在宿主机上的设备名称默认是：cni0。\n\nCNI主要解决Pod间的通信，目前流行的CNI插件如：calico, cilium, flannel, kube-ovn, kube-router\n\n## Flannel 插件跨主机通信原理\n\nFlannel 项目是 CoreOS 公司主推的容器网络方案。事实上，Flannel 项目本身只是一个框架，真正为我们提供容器网络功能的，是 Flannel 的后端实现。目前，Flannel 支持三种后端实现，分别是：\n\n- UDP\n- VXLAN\n- host-gw\n\n### udp模式\n\n![image-20210713190907679](https://i.loli.net/2021/07/14/zSH467pZwVF1LBg.png)\n\n可以看到，Flannel UDP 模式提供的其实是一个三层的 Overlay 网络，即：它首先对发出端的 IP 包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。这就好比，Flannel 在不同宿主机上的两个容器之间打通了一条“隧道”，使得这两个容器可以直接使用 IP 地址进行通信，而无需关心容器和宿主机的分布情况。\n\n但是UDP 模式有严重的性能问题，基本已经上被废弃了。\n\n基于 Flannel UDP 模式的容器通信多了一个额外的步骤，即 flanneld 的处理过程。而这个过程，由于使用到了 flannel0 这个 TUN 设备，仅在发出 IP 包的过程中，就需要经过三次用户态与内核态之间的数据拷贝，其性能可想而知。\n\n### VXLAN模式\n\nVXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚似化技术。所以说，VXLAN 可以完全在内核态实现上述封装和解封装的工作，从而通过与前面相似的“隧道”机制，构建出覆盖网络（Overlay Network）\n\n![image-20210713191114467](https://i.loli.net/2021/07/14/Kqv7ULZscznIGFC.png)\n\nVXLAN 模式组建的覆盖网络，其实就是一个由不同宿主机上的 VTEP 设备，也就是 flannel.1 设备组成的虚拟二层网络。对于 VTEP 设备来说，它发出的“内部数据帧”就仿佛是一直在这个虚拟的二层网络上流动。这，也正是覆盖网络的含义,具体就不展开了。\n\n## Kubernetes 三层网络方案\n\n讲了以上flannel 的以上2种方案，我们接下来讲一下纯三层的网络方案，如于 Flannel 的 host-gw 模式和 Calico BGP\n\n###  Flannel 的 host-gw 模式\n\n![image-20210714221235728](https://i.loli.net/2021/07/14/xp64BmUif5PMXsl.png)\n\n假设现在，Node 1 上的 Infra-container-1，要访问 Node 2 上的 Infra-container-2。\n\n当你设置 Flannel 使用 host-gw 模式之后，flanneld 会在宿主机上创建这样一条规则，以 Node 1 为例：\n\n```bash\n$ ip route\n...\n10.244.1.0/24 via 10.168.0.3 dev eth0\n```\n\n这条路由规则的含义是：目的 IP 地址属于 10.244.1.0/24 网段的 IP 包，应该经过本机的 eth0 设备发出去（即：dev eth0）；并且，它下一跳地址（next-hop）是 10.168.0.3（即：via 10.168.0.3）。\n\n如图所示这个下一跳地址对应的，正是我们的目的宿主机 Node 2。\n\n一旦配置了下一跳地址，那么接下来，当 IP 包从网络层进入链路层封装成帧的时候，eth0 设备就会使用下一跳地址对应的 MAC 地址，作为该数据帧的目的 MAC 地址。显然，这个 MAC 地址，正是 Node 2 的 MAC 地址。这样，这个数据帧就会从 Node 1 通过宿主机的二层网络顺利到达 Node 2 上。\n\n而 Node 2 的内核网络栈从二层数据帧里拿到 IP 包后，会“看到”这个 IP 包的目的 IP 地址是 10.244.1.3，即 Infra-container-2 的 IP 地址。这时候，根据 Node 2 上的路由表，该目的地址会匹配到第二条路由规则（也就是 10.244.1.0 对应的路由规则），从而进入 cni0 网桥，进而进入到 Infra-container-2 当中。\n\nhost-gw 模式的工作原理，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。所以宿主机充当了“网关”的角色，即顾名思义“host-gw”\n\n### Calico\n\nCalico 是一套开源的网络和网络安全方案，用于容器、虚拟机、宿主机之前的网络连接，可以用在kubernetes、OpenShift、DockerEE、OpenStrack等PaaS或IaaS平台上。\n\n首先看下calico 架构图\n\n[摘自网上]: https://www.programmersought.com/article/18013193559/\n\n![image-20210713170229021](https://i.loli.net/2021/07/14/t4dhz5sQkFiPWcl.png)\n\n- `Felix`：`calico`的核心组件，运行在每个节点上。主要的功能有接口管理、路由规则、ACL规则和状态报告\n- `Etcd`：保证数据一致性的数据库，存储集群中节点的所有路由信息。为保证数据的可靠和容错建议至少三个以上etcd节点。\n- `Bird`：BGP客户端，`Calico`在每个节点上的都会部署一个BGP客户端（利用Daemonset方式部署），它的作用是将Felix的路由信息读入内核，并通过BGP协议在集群中分发。当Felix将路由插入到Linux内核FIB中时，BGP客户端将获取这些路由并将它们分发到部署中的其他节点。这可以确保在部署时有效地路由流量。\n- `BGP Router Reflector`：使用 BGP client 形成 mesh 全网互联的方案就会导致规模限制，所有节点需要 N^2 个连接，为了解决这个规模问题，BGP 的 `Router Reflector`的方法，使所有 BGP Client 仅与特定 RR 节点互联并做路由同步，从而大大减少连接数。\n\n#### Calico 网络模式\n\n-  IPIP模式，把 IP 层封装到 IP 层的一个 tunnel。作用其实基本上就相当于一个基于IP层的网桥！一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。\n- Router Reflector 模式（RR），Calico 维护的网络在默认是（Node-to-Node Mesh）全互联模式，Calico集群中的节点之间都会相互建立连接，用于路由交换。但是随着集群规模的扩大，mesh模式将形成一个巨大服务网格，连接数成倍增加。这时就需要使用 Route Reflector（路由器反射）模式解决这个问题。\n\n#### BGP 协议\n\n`BGP（border gateway protocol）是外部路由协议（边界网关路由协议）`，用来在AS之间传递路由信息是一种增强的距离矢量路由协议（应用场景），基本功能是在自治系统间自动交换无环路的路由信息，通过交换带有自治系统号序列属性的路径可达信息，来构造自治系统的拓扑图，从而消除路由环路并实施用户配置的路由策略。**只要记住BGP简单理解其实就是实现大规模网络中节点路由信息同步共享的一种协议**。\n\n>实际上，Calico 项目提供的 `BGP` 网络解决方案，与 `Flannel` 的 `host-gw` 模式几乎一样。也就是说，Calico也是基于路由表实现容器数据包转发，但不同于Flannel使用flanneld进程来维护路由信息的做法，而Calico项目使用BGP协议来自动维护整个集群的路由信息。\n\nBGP模式\n\n- `全互联模式`（node-to-node mesh） 每一个BGP Speaker都需要和其他BGP Speaker建立BGP连接，这样BGP连接总数就是N^2，如果数量过大会消耗大量连接。如果集群数量超过100台官方不建议使用此种模式。\n- RR模式（Router Reflection），会指定一个或多个BGP Speaker为RouterReflection，它与网络中其他Speaker建立连接，每个Speaker只要与Router Reflection建立BGP就可以获得全网的路由信息。在calico中可以通过`Global Peer`实现RR模式。\n\n#### Calico IPIP\n\n![image-20210714210320203](https://i.loli.net/2021/07/14/dtF9w1YTnsIZ4Ek.png)\n\nIPIP 是linux内核的驱动程序，可以对数据包进行隧道，上图可以看到两个不同的网络 vlan1 和 vlan2。基于现有的以太网将原始包中的原始IP进行一次封装，通过tunl0解包，这个tunl0类似于ipip模块，和Flannel vxlan的veth很类似。\n\nPod1 访问 Pod2 流程如下：\n\n1. 数据包从 Pod1 出到达Veth Pair另一端（宿主机上，以cali前缀开头）。\n\n2. 进入IP隧道设备（tunl0），由Linux内核IPIP驱动封装，把源容器ip换成源宿主机ip，目的容器ip换成目的主机ip，这样就封装成 Node1 到 Node2 的数据包。\n\n   ```bash\n   此时包的类型：\n     原始IP包：\n     源IP：10.244.1.10\n     目的IP：10.244.2.10\n   \n      TCP：\n      源IP: 192.168.31.62\n      目的iP：192.168.32.63\n   ```\n\n3. 数据包经过路由器三层转发到 Node2\n\n4. Node2 收到数据包后，网络协议栈会使用IPIP驱动进行解包，从中拿到原始IP包。\n\n5. 然后根据路由规则，将数据包转发给cali设备，从而到达 Pod2。\n\n通过如上步骤可以看出，当 Calico 使用 IPIP 模式的时候，集群的网络性能会因为额外的封包和解包工作而下降。所以建议你将所有宿主机节点放在一个子网里，避免使用 IPIP。**不过这里可以利用IPIP模式的CrossSubnet来突破node不能跨VALN的问题，这个目前已经测试通过。**\n\n#### Calico BGP RR\n\ncalico还和flannel host-gw不同之处在于，它不会创建网桥设备，而是通过路由表来维护每个pod的通信，如下图：\n\n![image-20210714200920896](https://i.loli.net/2021/07/14/2nKSBwmRChpUqgD.png)\n\nPod1 访问 Pod2大致流程如下：\n\n- 数据包从Pod1出到达Veth Pair另一端（宿主机上，以cali前缀开头）\n- 宿主机根据路由规则，将数据包转发给下一跳（网关）\n- 到达Node2，根据路由规则将数据包转发给cali设备，从而到达Pod2\n\n实际例子：\n\n```bash\n1.启动2个容器\nkubectl create -f -<<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nettools-deploy\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nettools-deploy\n  template:\n    metadata:\n      labels:\n        app: nettools-deploy\n    spec:\n      containers:\n        - name: nettools-deploy\n          image: registry.ztosys.com/base/network-multitool:lastet\n          imagePullPolicy: IfNotPresent     \n          ports:\n            - containerPort: 80\nEOF\n2.查看2个pod 目前所在的node节点\nkubectl get pod -owide\nNAME                               READY   STATUS    RESTARTS   AGE    IP             NODE         NOMINATED NODE   READINESS GATES\nnettools-deploy-68b646bdfb-2ckgt   1/1     Running   0          113s   10.5.231.54    10.4.83.14   <none>           <none>\nnettools-deploy-68b646bdfb-xbpwd   1/1     Running   0          113s   10.5.228.128   10.4.83.11   <none>           <none>\n3.查看pod中的路由和网卡信息，可以看到路由指向的是一个不存在的网关地址169.254.1.1，这个主要利用了ARP代理欺骗的技术来把pod 所有数据流导到宿主机的 cali70d877f367d@if3 网卡上\nkubectl exec -ti nettools-deploy-68b646bdfb-2ckgt  /bin/sh\nip r\ndefault via 169.254.1.1 dev eth0\n169.254.1.1 dev eth0 scope link\n/ # ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n3: eth0@if9431: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether be:11:81:9a:9b:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.5.231.54/32 scope global eth0\n       valid_lft forever preferred_lft forever\n4.可以登录node 查看Veth Pair 设备和路由信息，这里可以看到网卡的编号和pod 中的网卡名是一样的。所以称之为虚拟网卡对(Veth Pair)，有了这个cali70d877f367d@if3 设备那么容器发出的IP包就会通过veth pair设备到达宿主机\nip r  | grep 10.5.231.54\n10.5.231.54 dev cali70d877f367d scope link\n\nip a | grep -A 4  9431\n9431: cali70d877f367d@if3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 7\n    inet6 fe80::ecee:eeff:feee:eeee/64 scope link\n       valid_lft forever preferred_lft forever\n5.pod1要想跟其他主机pod2通信那么检查node上是否存在相应的路由，然后到达目标宿主机，再到达目标容器\nip r | grep 10.5.228.128\n10.5.228.128/26 via 10.4.83.11 dev bond0 proto bird\n```\n\n其中，这里最核心的 下一跳 路由规则，就是由 Calico 的 Felix 进程负责维护的。这些路由规则信息，则是通过 BGP Client 中 BIRD 组件，使用 BGP 协议来传输。\n\n不难发现，Calico 项目实际上将集群里的所有节点，都当作是边界路由器来处理，它们一起组成了一个全连通的网络，互相之间通过 BGP 协议交换路由规则。这些节点，我们称为 BGP Peer。\n\n需要注意的是calico 维护网络的默认模式是 node-to-node mesh ,这种模式下，每台宿主机的BGP client都会跟集群所有的节点BGP client进行通信交换路由。这样一来，随着节点规模数量N的增加，连接会以N的2次方增长，会集群网络本身带来巨大压力，在集群规模比较大时，官方建议是使用BGP-RR 如下是我们使用网络硬件设备作为RR\n\n```bash\ncalicoctl node status\nCalico process is running.\n\nIPv4 BGP status\n+--------------+-----------+-------+------------+-------------+\n| PEER ADDRESS | PEER TYPE | STATE |   SINCE    |    INFO     |\n+--------------+-----------+-------+------------+-------------+\n| 10.4.36.250  | global    | up    | 2021-05-11 | Established |\n| 10.4.36.251  | global    | up    | 2021-05-11 | Established |\n+--------------+-----------+-------+------------+-------------+\n\n```\n\n\n\n#### 目前calico架构图\n\n![image-20210714205042267](https://i.loli.net/2021/07/14/cOREUpCYqS5omPI.png)\n\n现在的架构考虑到了冗余，隔离，性能\n\n- 网络隔离，所有的bgp 学习在一组交换机内，不向上通报，避免容器的bgp 影响到我们sdn 的bgp，带来的排障的麻烦，这是隔离。\n- 性能方面，现在集群 bgp 关闭full mesh，改为global，降低因容器集群规模变大，导致路由过多的问题。\n- 冗余方面，现在每台机器2条线，接2个交换机，bgp 跟2个交换机互联，实现了冗余，所有流量通过 交换机交换，满足了性能跟冗余的要求。\n\n#### Calico 优劣势\n\n优势\n\n- BGP RR没有封包和解包过程，完全基于两端宿主机的路由表进行转发\n- 可以配合使用 `Network Policy` 做 pod 和 pod 之前的访问控制\n\n劣势\n\n- 要求宿主机处于同一个2层网络下，也就是连在一台交换机上，但也可以突破\n- 每个node上会设置大量（大量)的iptables规则、路由，运维、排障难度大\n- 安全策略隔离上也略显不足\n\n### CNI插件性能比较\n\n基于flannel解包包的路由和转发的操作都是在CPU上进行的，这样就造成了计算资源的浪费。下图是从网上找的各种开源网络组件的性能对比。可以看出，无论是带宽还是网络延迟，性能都和calico主机差不多。\n\n![image-20210714212457115](https://i.loli.net/2021/07/14/5r1QBLDSUpcR7Hk.png)\n\n## Kubernetes Service NodePort 和Ingress\n\n#### Service\n\nService 这个 Kubernetes 里重要的服务对象。而 Kubernetes 之所以需要 Service，\n\n- 一方面是因为 Pod 的 IP 不是固定的\n\n- 另一方面则是因为一组 Pod 实例之间总会有负载均衡的需求\n\n实际上，Service 是由 kube-proxy 组件，加上 iptables 来共同实现的。\n\n> 并且现在还支持IPVS的模式，kube-proxy 通过 iptables 处理 Service 的过程，其实需要在宿主机上设置相当多的 iptables 规则。而且，kube-proxy 还需要在控制循环里不断地刷新这些规则来确保它们始终是正确的。当pod数量巨大时，成百上千条 iptables 规则不断地被刷新，会大量占用该宿主机的 CPU 资源，甚至会让宿主机“卡”在这个过程中。所以说，一直以来，基于 iptables 的 Service 实现，都是制约 Kubernetes 项目承载更多量级的 Pod 的主要障碍。我们知道IPVS跟IPtables都是工作基于内核的Netfilter 的 NAT 模式工作的，IPVS 并不需要在宿主机上为每个 Pod 设置 iptables 规则，而是把对这些“规则”的处理放到了内核态，从而极大地降低了维护这些规则的代价。所以当集群规模比较大的时候，可以使用ipvs 来提高性能。\n\nClusterIP 服务是默认的 Kubernetes Service。它为您提供集群内的服务，集群内的其他应用程序可以访问该服务,默认外部无法访问改地址。如图所示\n\n![image-20210714223846542](https://i.loli.net/2021/07/14/5VXtAYkF86OxiNH.png)\n\n#### NodePort\n\n NodePort服务是将外部流量直接发送到您的服务的最原始方式。NodePort，顾名思义，在所有节点（VM）上打开一个特定的端口，发送到这个端口的任何流量都会转发到服务，如图所示。\n\n![image-20210714224044599](https://i.loli.net/2021/07/14/w8H4RvuPsiJnDzN.png)\n\n#### Ingress\n\nIngress 实际上不是一种服务。相反，它位于多个服务的前面，充当“智能路由器”或集群的入口点。\n\nIngress 的功能其实很容易理解：所谓 Ingress，就是 Service 的“Service”，如图所示：\n\n![image-20210714224239095](https://i.loli.net/2021/07/14/hgznYwIPp87KHJF.png)\n\n## FAQ\n\n1. 为什么要用calico \n2. cilium 取代calico\n3. ....\n","slug":"Kubernetes容器网络","published":1,"updated":"2023-02-03T05:11:27.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkrl0008srvibxwffk8x","content":"<h2 id=\"容器是什么\"><a href=\"#容器是什么\" class=\"headerlink\" title=\"容器是什么\"></a>容器是什么</h2><p>容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬到任何地方运行。对于大多数如Docker、RKT，等Linux容器，其实就是利用Linux Namespace技术创建隔离的进程空间、文件系统、网络命名空间、用户空间、主机名的一组进程。</p>\n<p>所以说，容器，其实是一种特殊的进程而已。</p>\n<p>一个“容器”，实际上是一个由 Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境。</p>\n<h3 id=\"容器优势\"><a href=\"#容器优势\" class=\"headerlink\" title=\"容器优势\"></a>容器优势</h3><ul>\n<li>开销更少，无需像虚拟化一样虚拟完整的内核以及初始化环境，和启动一些多余的系统进程。</li>\n<li>可移植性强，容器可以轻松在不同平台移植，如直接运行<code>docker run -d --name nginx -p 80:80 nginx</code></li>\n<li>高效率，开发打完包构建容器后，可以更快部署，发布</li>\n<li>敏捷开发，更快的移植，无需担心依赖的环境不一致的问题</li>\n<li>….</li>\n</ul>\n<h3 id=\"Kebernetes\"><a href=\"#Kebernetes\" class=\"headerlink\" title=\"Kebernetes\"></a>Kebernetes</h3><p>k8s 是什么？为什么要引入 k8s，kubernetes 其实是google公司开源，和Redhat公司一起开发的一个容器编排项目。</p>\n<ul>\n<li><p>k8s 是什么，为什么要引入k8s：<a href=\"https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/\">https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/</a></p>\n</li>\n<li><p>k8s 组件有哪些：<a href=\"https://kubernetes.io/zh/docs/concepts/overview/components/\">https://kubernetes.io/zh/docs/concepts/overview/components/</a> </p>\n</li>\n</ul>\n<h2 id=\"容器网络模型\"><a href=\"#容器网络模型\" class=\"headerlink\" title=\"容器网络模型\"></a>容器网络模型</h2><h3 id=\"docker-的三种网络模式\"><a href=\"#docker-的三种网络模式\" class=\"headerlink\" title=\"docker 的三种网络模式\"></a>docker 的三种网络模式</h3><p>在将容器网络之前先讲一下docker 的网络模式，<code>docker network ls</code>  可以看到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">7152832275d0        bridge              bridge              local</span><br><span class=\"line\">bfc2647e9b0b        host                host                local</span><br><span class=\"line\">00ed57db3efb        none                null                local</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>bridge 借助虚拟网桥设备为容器建立网络连接</p>\n</li>\n<li><p>host 设置容器直接共享当前节点主机的网络名称空间</p>\n</li>\n<li><p>none 对于此容器，禁用所有网络。通常与自定义网络驱动程序结合使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每个容器都有自己的独立的&#x27;网络栈&#x27;，如果你想要实现两台主机之间的通信，最直接的办法，就是把它们用一根网线连接起来；而如果你想要实现多台主机之间的通信，那就需要用网线，把它们连接在一台交换机上，即网桥（Bridge）。它是一个工作在数据链路层（Data Link）的设备，主要功能是根据 MAC 地址学习来将数据包转发到网桥的不同端口（Port）上</span></span><br><span class=\"line\"><span class=\"comment\"># 在容器中，Docker安装完成时会创建一个名为docker0的linux bridge，不指定网络时，创建的网络默认为桥接网络，都会桥接到docker0上。</span></span><br><span class=\"line\"><span class=\"comment\"># 如何把容器连接到这个docker0 网桥上呢？这个时候就需要 Veth Pair 的虚拟设备了，该设备一般是成对的出现，并且，从其中一个“网卡”发出的数据包，可以直接出现在与它对应的另一张“网卡”上，哪怕这两个“网卡”在不同的 Network Namespace 里</span></span><br><span class=\"line\">$ brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.0242f2caa77e       no</span><br><span class=\"line\">pan1            8000.000000000000       no</span><br><span class=\"line\">$ docker run -d -u daemon  --name <span class=\"string\">&#x27;net-bridge&#x27;</span> busybox top </span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti net-bridge  /bin/sh</span><br><span class=\"line\"><span class=\"comment\"># Veth Pair虚拟网卡设备eth0@if62</span></span><br><span class=\"line\">/ $ ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">61: eth0@if62: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue</span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">/ $ route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"><span class=\"comment\"># 宿主机上查看接口信息,启动了一个虚拟网卡设备 vethaf3497b@if61</span></span><br><span class=\"line\">$ ip a | tail -4</span><br><span class=\"line\">62: vethaf3497b@if61: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether ca:2f:b0:6a:a1:28 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::c82f:b0ff:fe6a:a128/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># brctl show 可以看到docker0 设备上多了一个接口 vethf29b81e 即刚才启动容器的虚拟网卡</span></span><br><span class=\"line\">$ brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.0242f2caa77e       no              vethaf3497b</span><br><span class=\"line\">pan1            8000.000000000000       no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># host网络，就是和host主机共享网络，会和host使用一样的网络，host网络的性能比较高，但也会不可避免地引入共享网络资源的问题，比如端口冲突，比如隔离性问题。</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker run --net=host busybox ifconfig</span><br><span class=\"line\">docker0   Link encap:Ethernet  HWaddr 02:42:F2:CA:A7:7E</span><br><span class=\"line\">          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:f2ff:feca:a77e/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:274096 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:323190 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0</span><br><span class=\"line\">          RX bytes:13525456 (12.8 MiB)  TX bytes:1664281006 (1.5 GiB)</span><br><span class=\"line\"></span><br><span class=\"line\">enp0s31f6 Link encap:Ethernet  HWaddr 54:E1:AD:08:B4:21</span><br><span class=\"line\">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">          Interrupt:16 Memory:f2200000-f2220000</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback</span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:1850471 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:1850471 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:1186483790 (1.1 GiB)  TX bytes:1186483790 (1.1 GiB)</span><br><span class=\"line\"></span><br><span class=\"line\">pan1      Link encap:Ethernet  HWaddr 12:AA:30:13:D7:A4</span><br><span class=\"line\">          inet addr:10.6.207.1  Bcast:10.6.207.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::10aa:30ff:fe13:d7a4/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:14194 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:2916067 (2.7 MiB)</span><br><span class=\"line\">wlp3s0    Link encap:Ethernet  HWaddr F8:59:71:8E:3F:55</span><br><span class=\"line\">          inet addr:10.10.134.147  Bcast:10.10.143.255  Mask:255.255.240.0</span><br><span class=\"line\">          inet6 addr: fe80::54ce:44cc:368:d288/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:16914279 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:4101535 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:7919534294 (7.3 GiB)  TX bytes:2673781183 (2.4 GiB)          </span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># none网络，在该网络下的容器仅有lo网卡，属于封闭式网络，通常用于对安全性要求较高并且不需要联网的应用</span></span><br><span class=\"line\">docker run --rm -it --network=none busybox ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>接下来以docker 两种通信方式来介绍容器通信模式：</p>\n<h3 id=\"单机容器通信\"><a href=\"#单机容器通信\" class=\"headerlink\" title=\"单机容器通信\"></a>单机容器通信</h3><p>同一个宿主机上的不同容器通过 docker0 网桥进行通信的流程如图：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/VutyxR1TczBPSpv.png\" alt=\"image-20210713104524840\"></p>\n<p>如图说所示，在容器中，通过docker0网桥，凡是连接到docker0的容器，就可以通过它来进行通信。要想容器能够连接到docker0网桥，我们需要类似网线的虚拟设备Veth Pair来把容器连接到网桥上。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个container1 </span></span><br><span class=\"line\">$ docker run -d --name <span class=\"string\">&#x27;container1&#x27;</span> nginx</span><br><span class=\"line\">$ dockrer <span class=\"built_in\">exec</span> -ti container1  /bin/sh</span><br><span class=\"line\">$ ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">65: eth0@if66: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">$ route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动一个container2</span></span><br><span class=\"line\">$ docker run -d --name <span class=\"string\">&#x27;container2&#x27;</span> nginx</span><br><span class=\"line\">$ dockrer <span class=\"built_in\">exec</span> -ti container2  /bin/sh</span><br><span class=\"line\">$ ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">63: eth0@if64: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"><span class=\"comment\"># route -n</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看宿主机上的虚拟设备Veth Pair, veth182b3a5@if63 和 container2 的eth0@if64 是一对，container1 同理。</span></span><br><span class=\"line\">$ ip a | tail -8</span><br><span class=\"line\">64: veth182b3a5@if63: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 76:97:8e:fe:a9:c7 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::7497:8eff:fefe:a9c7/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">66: veth877c7d8@if65: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 12:7e:d0:0f:ae:99 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class=\"line\">    inet6 fe80::107e:d0ff:fe0f:ae99/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># container1 ping container2 测试</span></span><br><span class=\"line\"><span class=\"comment\"># ping 172.17.0.3</span></span><br><span class=\"line\">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.091 ms</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.034 ms</span><br><span class=\"line\"><span class=\"comment\"># 可以看到同一宿主机容器默认都是通的，是因为他们默认网关都是docker0 这块网卡。 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跨主机容器通信\"><a href=\"#跨主机容器通信\" class=\"headerlink\" title=\"跨主机容器通信\"></a>跨主机容器通信</h3><p>跨主机通信方案有以下几种方案：</p>\n<ul>\n<li>NAT方式<br>NAT就是传统的docker网络，利用宿主机的IP和Iptables来达到容器，主机之间的通信。容器对外IP都是宿主机的IP，NAT的性能损耗比较大。但只要宿主机之间三层IP可达，容器之间就可以通信，比较普适。</li>\n<li>Tunnel（overlay）方式，VPN，ipip，VXLAN等都是tunnel技术，简单讲就是在容器的数据包间封装一层或多层其他的数据协议头，达到连通的效果。这种方式一般也是只需要三层可达，容器就能互通，比较普适。</li>\n<li>Routing方式<br>路由方案主要是通过路由设置的方式让容器对容器，容器对宿主机之间相通信。例如：calico的BGP路由方案（非IPIP）。这种方式一般适用于单个数据中心，最常见的是同一个vlan中使用，如果不是，需要设置路由规则。路由方案性能损耗少，和主机网络性能比较接近。</li>\n</ul>\n<p>先介绍下NAT方式，所有接入到该桥接设备上的容器都会被NAT隐藏，它们发往Docker主机外部的所有流量都会经过源地址转换后发出(SNAT)，并且默认是无法直接接受节点之外的其他主机发来的请求。当需要接入Docker主机外部流量，就需要进行目标地址转换(DNAT)甚至端口转换将其暴露在外部网络当中。大致的流程图：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/scPfALv6ibqEMWI.png\" alt=\"image-20210713111835432\"></p>\n<p>容器内的属于私有地址，需要在左侧的主机上的eth0上进行源地址转换，而右侧的地址需要被访问，就需要将eth0的地址进行NAT转换。SNAT—-&gt;DNAT。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#具体方案在2个主机上通过主机路由和iptables 地址伪装来实现跨主机容器的互通，这里就不做过多解释</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kubernetes-容器网络CNI插件\"><a href=\"#Kubernetes-容器网络CNI插件\" class=\"headerlink\" title=\"Kubernetes 容器网络CNI插件\"></a>Kubernetes 容器网络CNI插件</h2><p>这里介绍完docker的网络方案之后，我们来聊聊kubernetes的容器间网络的通信方案。</p>\n<p>官网中文doc：<a href=\"https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/\">https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/</a></p>\n<p>那么什么是CNI（container network interface）容器网络接口，k8s为了更好的控制网络的接入，推出了CNI即容器网络的API接口。CNI维护了一个单独的网桥来代替 docker0。这个网桥的名字就叫作：CNI 网桥，它在宿主机上的设备名称默认是：cni0。</p>\n<p>CNI主要解决Pod间的通信，目前流行的CNI插件如：calico, cilium, flannel, kube-ovn, kube-router</p>\n<h2 id=\"Flannel-插件跨主机通信原理\"><a href=\"#Flannel-插件跨主机通信原理\" class=\"headerlink\" title=\"Flannel 插件跨主机通信原理\"></a>Flannel 插件跨主机通信原理</h2><p>Flannel 项目是 CoreOS 公司主推的容器网络方案。事实上，Flannel 项目本身只是一个框架，真正为我们提供容器网络功能的，是 Flannel 的后端实现。目前，Flannel 支持三种后端实现，分别是：</p>\n<ul>\n<li>UDP</li>\n<li>VXLAN</li>\n<li>host-gw</li>\n</ul>\n<h3 id=\"udp模式\"><a href=\"#udp模式\" class=\"headerlink\" title=\"udp模式\"></a>udp模式</h3><p><img src=\"https://i.loli.net/2021/07/14/zSH467pZwVF1LBg.png\" alt=\"image-20210713190907679\"></p>\n<p>可以看到，Flannel UDP 模式提供的其实是一个三层的 Overlay 网络，即：它首先对发出端的 IP 包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。这就好比，Flannel 在不同宿主机上的两个容器之间打通了一条“隧道”，使得这两个容器可以直接使用 IP 地址进行通信，而无需关心容器和宿主机的分布情况。</p>\n<p>但是UDP 模式有严重的性能问题，基本已经上被废弃了。</p>\n<p>基于 Flannel UDP 模式的容器通信多了一个额外的步骤，即 flanneld 的处理过程。而这个过程，由于使用到了 flannel0 这个 TUN 设备，仅在发出 IP 包的过程中，就需要经过三次用户态与内核态之间的数据拷贝，其性能可想而知。</p>\n<h3 id=\"VXLAN模式\"><a href=\"#VXLAN模式\" class=\"headerlink\" title=\"VXLAN模式\"></a>VXLAN模式</h3><p>VXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚似化技术。所以说，VXLAN 可以完全在内核态实现上述封装和解封装的工作，从而通过与前面相似的“隧道”机制，构建出覆盖网络（Overlay Network）</p>\n<p><img src=\"https://i.loli.net/2021/07/14/Kqv7ULZscznIGFC.png\" alt=\"image-20210713191114467\"></p>\n<p>VXLAN 模式组建的覆盖网络，其实就是一个由不同宿主机上的 VTEP 设备，也就是 flannel.1 设备组成的虚拟二层网络。对于 VTEP 设备来说，它发出的“内部数据帧”就仿佛是一直在这个虚拟的二层网络上流动。这，也正是覆盖网络的含义,具体就不展开了。</p>\n<h2 id=\"Kubernetes-三层网络方案\"><a href=\"#Kubernetes-三层网络方案\" class=\"headerlink\" title=\"Kubernetes 三层网络方案\"></a>Kubernetes 三层网络方案</h2><p>讲了以上flannel 的以上2种方案，我们接下来讲一下纯三层的网络方案，如于 Flannel 的 host-gw 模式和 Calico BGP</p>\n<h3 id=\"Flannel-的-host-gw-模式\"><a href=\"#Flannel-的-host-gw-模式\" class=\"headerlink\" title=\"Flannel 的 host-gw 模式\"></a>Flannel 的 host-gw 模式</h3><p><img src=\"https://i.loli.net/2021/07/14/xp64BmUif5PMXsl.png\" alt=\"image-20210714221235728\"></p>\n<p>假设现在，Node 1 上的 Infra-container-1，要访问 Node 2 上的 Infra-container-2。</p>\n<p>当你设置 Flannel 使用 host-gw 模式之后，flanneld 会在宿主机上创建这样一条规则，以 Node 1 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip route</span><br><span class=\"line\">...</span><br><span class=\"line\">10.244.1.0/24 via 10.168.0.3 dev eth0</span><br></pre></td></tr></table></figure>\n\n<p>这条路由规则的含义是：目的 IP 地址属于 10.244.1.0/24 网段的 IP 包，应该经过本机的 eth0 设备发出去（即：dev eth0）；并且，它下一跳地址（next-hop）是 10.168.0.3（即：via 10.168.0.3）。</p>\n<p>如图所示这个下一跳地址对应的，正是我们的目的宿主机 Node 2。</p>\n<p>一旦配置了下一跳地址，那么接下来，当 IP 包从网络层进入链路层封装成帧的时候，eth0 设备就会使用下一跳地址对应的 MAC 地址，作为该数据帧的目的 MAC 地址。显然，这个 MAC 地址，正是 Node 2 的 MAC 地址。这样，这个数据帧就会从 Node 1 通过宿主机的二层网络顺利到达 Node 2 上。</p>\n<p>而 Node 2 的内核网络栈从二层数据帧里拿到 IP 包后，会“看到”这个 IP 包的目的 IP 地址是 10.244.1.3，即 Infra-container-2 的 IP 地址。这时候，根据 Node 2 上的路由表，该目的地址会匹配到第二条路由规则（也就是 10.244.1.0 对应的路由规则），从而进入 cni0 网桥，进而进入到 Infra-container-2 当中。</p>\n<p>host-gw 模式的工作原理，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。所以宿主机充当了“网关”的角色，即顾名思义“host-gw”</p>\n<h3 id=\"Calico\"><a href=\"#Calico\" class=\"headerlink\" title=\"Calico\"></a>Calico</h3><p>Calico 是一套开源的网络和网络安全方案，用于容器、虚拟机、宿主机之前的网络连接，可以用在kubernetes、OpenShift、DockerEE、OpenStrack等PaaS或IaaS平台上。</p>\n<p>首先看下calico 架构图</p>\n<p><img src=\"https://i.loli.net/2021/07/14/t4dhz5sQkFiPWcl.png\" alt=\"image-20210713170229021\"></p>\n<ul>\n<li><code>Felix</code>：<code>calico</code>的核心组件，运行在每个节点上。主要的功能有接口管理、路由规则、ACL规则和状态报告</li>\n<li><code>Etcd</code>：保证数据一致性的数据库，存储集群中节点的所有路由信息。为保证数据的可靠和容错建议至少三个以上etcd节点。</li>\n<li><code>Bird</code>：BGP客户端，<code>Calico</code>在每个节点上的都会部署一个BGP客户端（利用Daemonset方式部署），它的作用是将Felix的路由信息读入内核，并通过BGP协议在集群中分发。当Felix将路由插入到Linux内核FIB中时，BGP客户端将获取这些路由并将它们分发到部署中的其他节点。这可以确保在部署时有效地路由流量。</li>\n<li><code>BGP Router Reflector</code>：使用 BGP client 形成 mesh 全网互联的方案就会导致规模限制，所有节点需要 N^2 个连接，为了解决这个规模问题，BGP 的 <code>Router Reflector</code>的方法，使所有 BGP Client 仅与特定 RR 节点互联并做路由同步，从而大大减少连接数。</li>\n</ul>\n<h4 id=\"Calico-网络模式\"><a href=\"#Calico-网络模式\" class=\"headerlink\" title=\"Calico 网络模式\"></a>Calico 网络模式</h4><ul>\n<li> IPIP模式，把 IP 层封装到 IP 层的一个 tunnel。作用其实基本上就相当于一个基于IP层的网桥！一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。</li>\n<li>Router Reflector 模式（RR），Calico 维护的网络在默认是（Node-to-Node Mesh）全互联模式，Calico集群中的节点之间都会相互建立连接，用于路由交换。但是随着集群规模的扩大，mesh模式将形成一个巨大服务网格，连接数成倍增加。这时就需要使用 Route Reflector（路由器反射）模式解决这个问题。</li>\n</ul>\n<h4 id=\"BGP-协议\"><a href=\"#BGP-协议\" class=\"headerlink\" title=\"BGP 协议\"></a>BGP 协议</h4><p><code>BGP（border gateway protocol）是外部路由协议（边界网关路由协议）</code>，用来在AS之间传递路由信息是一种增强的距离矢量路由协议（应用场景），基本功能是在自治系统间自动交换无环路的路由信息，通过交换带有自治系统号序列属性的路径可达信息，来构造自治系统的拓扑图，从而消除路由环路并实施用户配置的路由策略。<strong>只要记住BGP简单理解其实就是实现大规模网络中节点路由信息同步共享的一种协议</strong>。</p>\n<blockquote>\n<p>实际上，Calico 项目提供的 <code>BGP</code> 网络解决方案，与 <code>Flannel</code> 的 <code>host-gw</code> 模式几乎一样。也就是说，Calico也是基于路由表实现容器数据包转发，但不同于Flannel使用flanneld进程来维护路由信息的做法，而Calico项目使用BGP协议来自动维护整个集群的路由信息。</p>\n</blockquote>\n<p>BGP模式</p>\n<ul>\n<li><code>全互联模式</code>（node-to-node mesh） 每一个BGP Speaker都需要和其他BGP Speaker建立BGP连接，这样BGP连接总数就是N^2，如果数量过大会消耗大量连接。如果集群数量超过100台官方不建议使用此种模式。</li>\n<li>RR模式（Router Reflection），会指定一个或多个BGP Speaker为RouterReflection，它与网络中其他Speaker建立连接，每个Speaker只要与Router Reflection建立BGP就可以获得全网的路由信息。在calico中可以通过<code>Global Peer</code>实现RR模式。</li>\n</ul>\n<h4 id=\"Calico-IPIP\"><a href=\"#Calico-IPIP\" class=\"headerlink\" title=\"Calico IPIP\"></a>Calico IPIP</h4><p><img src=\"https://i.loli.net/2021/07/14/dtF9w1YTnsIZ4Ek.png\" alt=\"image-20210714210320203\"></p>\n<p>IPIP 是linux内核的驱动程序，可以对数据包进行隧道，上图可以看到两个不同的网络 vlan1 和 vlan2。基于现有的以太网将原始包中的原始IP进行一次封装，通过tunl0解包，这个tunl0类似于ipip模块，和Flannel vxlan的veth很类似。</p>\n<p>Pod1 访问 Pod2 流程如下：</p>\n<ol>\n<li><p>数据包从 Pod1 出到达Veth Pair另一端（宿主机上，以cali前缀开头）。</p>\n</li>\n<li><p>进入IP隧道设备（tunl0），由Linux内核IPIP驱动封装，把源容器ip换成源宿主机ip，目的容器ip换成目的主机ip，这样就封装成 Node1 到 Node2 的数据包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时包的类型：</span><br><span class=\"line\">  原始IP包：</span><br><span class=\"line\">  源IP：10.244.1.10</span><br><span class=\"line\">  目的IP：10.244.2.10</span><br><span class=\"line\"></span><br><span class=\"line\">   TCP：</span><br><span class=\"line\">   源IP: 192.168.31.62</span><br><span class=\"line\">   目的iP：192.168.32.63</span><br></pre></td></tr></table></figure></li>\n<li><p>数据包经过路由器三层转发到 Node2</p>\n</li>\n<li><p>Node2 收到数据包后，网络协议栈会使用IPIP驱动进行解包，从中拿到原始IP包。</p>\n</li>\n<li><p>然后根据路由规则，将数据包转发给cali设备，从而到达 Pod2。</p>\n</li>\n</ol>\n<p>通过如上步骤可以看出，当 Calico 使用 IPIP 模式的时候，集群的网络性能会因为额外的封包和解包工作而下降。所以建议你将所有宿主机节点放在一个子网里，避免使用 IPIP。<strong>不过这里可以利用IPIP模式的CrossSubnet来突破node不能跨VALN的问题，这个目前已经测试通过。</strong></p>\n<h4 id=\"Calico-BGP-RR\"><a href=\"#Calico-BGP-RR\" class=\"headerlink\" title=\"Calico BGP RR\"></a>Calico BGP RR</h4><p>calico还和flannel host-gw不同之处在于，它不会创建网桥设备，而是通过路由表来维护每个pod的通信，如下图：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/2nKSBwmRChpUqgD.png\" alt=\"image-20210714200920896\"></p>\n<p>Pod1 访问 Pod2大致流程如下：</p>\n<ul>\n<li>数据包从Pod1出到达Veth Pair另一端（宿主机上，以cali前缀开头）</li>\n<li>宿主机根据路由规则，将数据包转发给下一跳（网关）</li>\n<li>到达Node2，根据路由规则将数据包转发给cali设备，从而到达Pod2</li>\n</ul>\n<p>实际例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.启动2个容器</span><br><span class=\"line\">kubectl create -f -&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: apps/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: Deployment</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  replicas: 2</span></span><br><span class=\"line\"><span class=\"string\">  selector:</span></span><br><span class=\"line\"><span class=\"string\">    matchLabels:</span></span><br><span class=\"line\"><span class=\"string\">      app: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">  template:</span></span><br><span class=\"line\"><span class=\"string\">    metadata:</span></span><br><span class=\"line\"><span class=\"string\">      labels:</span></span><br><span class=\"line\"><span class=\"string\">        app: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">    spec:</span></span><br><span class=\"line\"><span class=\"string\">      containers:</span></span><br><span class=\"line\"><span class=\"string\">        - name: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">          image: registry.ztosys.com/base/network-multitool:lastet</span></span><br><span class=\"line\"><span class=\"string\">          imagePullPolicy: IfNotPresent     </span></span><br><span class=\"line\"><span class=\"string\">          ports:</span></span><br><span class=\"line\"><span class=\"string\">            - containerPort: 80</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">2.查看2个pod 目前所在的node节点</span><br><span class=\"line\">kubectl get pod -owide</span><br><span class=\"line\">NAME                               READY   STATUS    RESTARTS   AGE    IP             NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nettools-deploy-68b646bdfb-2ckgt   1/1     Running   0          113s   10.5.231.54    10.4.83.14   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nettools-deploy-68b646bdfb-xbpwd   1/1     Running   0          113s   10.5.228.128   10.4.83.11   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">3.查看pod中的路由和网卡信息，可以看到路由指向的是一个不存在的网关地址169.254.1.1，这个主要利用了ARP代理欺骗的技术来把pod 所有数据流导到宿主机的 cali70d877f367d@if3 网卡上</span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -ti nettools-deploy-68b646bdfb-2ckgt  /bin/sh</span><br><span class=\"line\">ip r</span><br><span class=\"line\">default via 169.254.1.1 dev eth0</span><br><span class=\"line\">169.254.1.1 dev eth0 scope link</span><br><span class=\"line\">/ <span class=\"comment\"># ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: eth0@if9431: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether be:11:81:9a:9b:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 10.5.231.54/32 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4.可以登录node 查看Veth Pair 设备和路由信息，这里可以看到网卡的编号和pod 中的网卡名是一样的。所以称之为虚拟网卡对(Veth Pair)，有了这个cali70d877f367d@if3 设备那么容器发出的IP包就会通过veth pair设备到达宿主机</span><br><span class=\"line\">ip r  | grep 10.5.231.54</span><br><span class=\"line\">10.5.231.54 dev cali70d877f367d scope link</span><br><span class=\"line\"></span><br><span class=\"line\">ip a | grep -A 4  9431</span><br><span class=\"line\">9431: cali70d877f367d@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 7</span><br><span class=\"line\">    inet6 fe80::ecee:eeff:feee:eeee/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">5.pod1要想跟其他主机pod2通信那么检查node上是否存在相应的路由，然后到达目标宿主机，再到达目标容器</span><br><span class=\"line\">ip r | grep 10.5.228.128</span><br><span class=\"line\">10.5.228.128/26 via 10.4.83.11 dev bond0 proto bird</span><br></pre></td></tr></table></figure>\n\n<p>其中，这里最核心的 下一跳 路由规则，就是由 Calico 的 Felix 进程负责维护的。这些路由规则信息，则是通过 BGP Client 中 BIRD 组件，使用 BGP 协议来传输。</p>\n<p>不难发现，Calico 项目实际上将集群里的所有节点，都当作是边界路由器来处理，它们一起组成了一个全连通的网络，互相之间通过 BGP 协议交换路由规则。这些节点，我们称为 BGP Peer。</p>\n<p>需要注意的是calico 维护网络的默认模式是 node-to-node mesh ,这种模式下，每台宿主机的BGP client都会跟集群所有的节点BGP client进行通信交换路由。这样一来，随着节点规模数量N的增加，连接会以N的2次方增长，会集群网络本身带来巨大压力，在集群规模比较大时，官方建议是使用BGP-RR 如下是我们使用网络硬件设备作为RR</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl node status</span><br><span class=\"line\">Calico process is running.</span><br><span class=\"line\"></span><br><span class=\"line\">IPv4 BGP status</span><br><span class=\"line\">+--------------+-----------+-------+------------+-------------+</span><br><span class=\"line\">| PEER ADDRESS | PEER TYPE | STATE |   SINCE    |    INFO     |</span><br><span class=\"line\">+--------------+-----------+-------+------------+-------------+</span><br><span class=\"line\">| 10.4.36.250  | global    | up    | 2021-05-11 | Established |</span><br><span class=\"line\">| 10.4.36.251  | global    | up    | 2021-05-11 | Established |</span><br><span class=\"line\">+--------------+-----------+-------+------------+-------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"目前calico架构图\"><a href=\"#目前calico架构图\" class=\"headerlink\" title=\"目前calico架构图\"></a>目前calico架构图</h4><p><img src=\"https://i.loli.net/2021/07/14/cOREUpCYqS5omPI.png\" alt=\"image-20210714205042267\"></p>\n<p>现在的架构考虑到了冗余，隔离，性能</p>\n<ul>\n<li>网络隔离，所有的bgp 学习在一组交换机内，不向上通报，避免容器的bgp 影响到我们sdn 的bgp，带来的排障的麻烦，这是隔离。</li>\n<li>性能方面，现在集群 bgp 关闭full mesh，改为global，降低因容器集群规模变大，导致路由过多的问题。</li>\n<li>冗余方面，现在每台机器2条线，接2个交换机，bgp 跟2个交换机互联，实现了冗余，所有流量通过 交换机交换，满足了性能跟冗余的要求。</li>\n</ul>\n<h4 id=\"Calico-优劣势\"><a href=\"#Calico-优劣势\" class=\"headerlink\" title=\"Calico 优劣势\"></a>Calico 优劣势</h4><p>优势</p>\n<ul>\n<li>BGP RR没有封包和解包过程，完全基于两端宿主机的路由表进行转发</li>\n<li>可以配合使用 <code>Network Policy</code> 做 pod 和 pod 之前的访问控制</li>\n</ul>\n<p>劣势</p>\n<ul>\n<li>要求宿主机处于同一个2层网络下，也就是连在一台交换机上，但也可以突破</li>\n<li>每个node上会设置大量（大量)的iptables规则、路由，运维、排障难度大</li>\n<li>安全策略隔离上也略显不足</li>\n</ul>\n<h3 id=\"CNI插件性能比较\"><a href=\"#CNI插件性能比较\" class=\"headerlink\" title=\"CNI插件性能比较\"></a>CNI插件性能比较</h3><p>基于flannel解包包的路由和转发的操作都是在CPU上进行的，这样就造成了计算资源的浪费。下图是从网上找的各种开源网络组件的性能对比。可以看出，无论是带宽还是网络延迟，性能都和calico主机差不多。</p>\n<p><img src=\"https://i.loli.net/2021/07/14/5r1QBLDSUpcR7Hk.png\" alt=\"image-20210714212457115\"></p>\n<h2 id=\"Kubernetes-Service-NodePort-和Ingress\"><a href=\"#Kubernetes-Service-NodePort-和Ingress\" class=\"headerlink\" title=\"Kubernetes Service NodePort 和Ingress\"></a>Kubernetes Service NodePort 和Ingress</h2><h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><p>Service 这个 Kubernetes 里重要的服务对象。而 Kubernetes 之所以需要 Service，</p>\n<ul>\n<li><p>一方面是因为 Pod 的 IP 不是固定的</p>\n</li>\n<li><p>另一方面则是因为一组 Pod 实例之间总会有负载均衡的需求</p>\n</li>\n</ul>\n<p>实际上，Service 是由 kube-proxy 组件，加上 iptables 来共同实现的。</p>\n<blockquote>\n<p>并且现在还支持IPVS的模式，kube-proxy 通过 iptables 处理 Service 的过程，其实需要在宿主机上设置相当多的 iptables 规则。而且，kube-proxy 还需要在控制循环里不断地刷新这些规则来确保它们始终是正确的。当pod数量巨大时，成百上千条 iptables 规则不断地被刷新，会大量占用该宿主机的 CPU 资源，甚至会让宿主机“卡”在这个过程中。所以说，一直以来，基于 iptables 的 Service 实现，都是制约 Kubernetes 项目承载更多量级的 Pod 的主要障碍。我们知道IPVS跟IPtables都是工作基于内核的Netfilter 的 NAT 模式工作的，IPVS 并不需要在宿主机上为每个 Pod 设置 iptables 规则，而是把对这些“规则”的处理放到了内核态，从而极大地降低了维护这些规则的代价。所以当集群规模比较大的时候，可以使用ipvs 来提高性能。</p>\n</blockquote>\n<p>ClusterIP 服务是默认的 Kubernetes Service。它为您提供集群内的服务，集群内的其他应用程序可以访问该服务,默认外部无法访问改地址。如图所示</p>\n<p><img src=\"https://i.loli.net/2021/07/14/5VXtAYkF86OxiNH.png\" alt=\"image-20210714223846542\"></p>\n<h4 id=\"NodePort\"><a href=\"#NodePort\" class=\"headerlink\" title=\"NodePort\"></a>NodePort</h4><p> NodePort服务是将外部流量直接发送到您的服务的最原始方式。NodePort，顾名思义，在所有节点（VM）上打开一个特定的端口，发送到这个端口的任何流量都会转发到服务，如图所示。</p>\n<p><img src=\"https://i.loli.net/2021/07/14/w8H4RvuPsiJnDzN.png\" alt=\"image-20210714224044599\"></p>\n<h4 id=\"Ingress\"><a href=\"#Ingress\" class=\"headerlink\" title=\"Ingress\"></a>Ingress</h4><p>Ingress 实际上不是一种服务。相反，它位于多个服务的前面，充当“智能路由器”或集群的入口点。</p>\n<p>Ingress 的功能其实很容易理解：所谓 Ingress，就是 Service 的“Service”，如图所示：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/hgznYwIPp87KHJF.png\" alt=\"image-20210714224239095\"></p>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><ol>\n<li>为什么要用calico </li>\n<li>cilium 取代calico</li>\n<li>….</li>\n</ol>\n","site":{"data":{}},"cover":false,"length":16007,"excerpt":"","more":"<h2 id=\"容器是什么\"><a href=\"#容器是什么\" class=\"headerlink\" title=\"容器是什么\"></a>容器是什么</h2><p>容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬到任何地方运行。对于大多数如Docker、RKT，等Linux容器，其实就是利用Linux Namespace技术创建隔离的进程空间、文件系统、网络命名空间、用户空间、主机名的一组进程。</p>\n<p>所以说，容器，其实是一种特殊的进程而已。</p>\n<p>一个“容器”，实际上是一个由 Linux Namespace、Linux Cgroups 和 rootfs 三种技术构建出来的进程的隔离环境。</p>\n<h3 id=\"容器优势\"><a href=\"#容器优势\" class=\"headerlink\" title=\"容器优势\"></a>容器优势</h3><ul>\n<li>开销更少，无需像虚拟化一样虚拟完整的内核以及初始化环境，和启动一些多余的系统进程。</li>\n<li>可移植性强，容器可以轻松在不同平台移植，如直接运行<code>docker run -d --name nginx -p 80:80 nginx</code></li>\n<li>高效率，开发打完包构建容器后，可以更快部署，发布</li>\n<li>敏捷开发，更快的移植，无需担心依赖的环境不一致的问题</li>\n<li>….</li>\n</ul>\n<h3 id=\"Kebernetes\"><a href=\"#Kebernetes\" class=\"headerlink\" title=\"Kebernetes\"></a>Kebernetes</h3><p>k8s 是什么？为什么要引入 k8s，kubernetes 其实是google公司开源，和Redhat公司一起开发的一个容器编排项目。</p>\n<ul>\n<li><p>k8s 是什么，为什么要引入k8s：<a href=\"https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/\">https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/</a></p>\n</li>\n<li><p>k8s 组件有哪些：<a href=\"https://kubernetes.io/zh/docs/concepts/overview/components/\">https://kubernetes.io/zh/docs/concepts/overview/components/</a> </p>\n</li>\n</ul>\n<h2 id=\"容器网络模型\"><a href=\"#容器网络模型\" class=\"headerlink\" title=\"容器网络模型\"></a>容器网络模型</h2><h3 id=\"docker-的三种网络模式\"><a href=\"#docker-的三种网络模式\" class=\"headerlink\" title=\"docker 的三种网络模式\"></a>docker 的三种网络模式</h3><p>在将容器网络之前先讲一下docker 的网络模式，<code>docker network ls</code>  可以看到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">7152832275d0        bridge              bridge              local</span><br><span class=\"line\">bfc2647e9b0b        host                host                local</span><br><span class=\"line\">00ed57db3efb        none                null                local</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>bridge 借助虚拟网桥设备为容器建立网络连接</p>\n</li>\n<li><p>host 设置容器直接共享当前节点主机的网络名称空间</p>\n</li>\n<li><p>none 对于此容器，禁用所有网络。通常与自定义网络驱动程序结合使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每个容器都有自己的独立的&#x27;网络栈&#x27;，如果你想要实现两台主机之间的通信，最直接的办法，就是把它们用一根网线连接起来；而如果你想要实现多台主机之间的通信，那就需要用网线，把它们连接在一台交换机上，即网桥（Bridge）。它是一个工作在数据链路层（Data Link）的设备，主要功能是根据 MAC 地址学习来将数据包转发到网桥的不同端口（Port）上</span></span><br><span class=\"line\"><span class=\"comment\"># 在容器中，Docker安装完成时会创建一个名为docker0的linux bridge，不指定网络时，创建的网络默认为桥接网络，都会桥接到docker0上。</span></span><br><span class=\"line\"><span class=\"comment\"># 如何把容器连接到这个docker0 网桥上呢？这个时候就需要 Veth Pair 的虚拟设备了，该设备一般是成对的出现，并且，从其中一个“网卡”发出的数据包，可以直接出现在与它对应的另一张“网卡”上，哪怕这两个“网卡”在不同的 Network Namespace 里</span></span><br><span class=\"line\">$ brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.0242f2caa77e       no</span><br><span class=\"line\">pan1            8000.000000000000       no</span><br><span class=\"line\">$ docker run -d -u daemon  --name <span class=\"string\">&#x27;net-bridge&#x27;</span> busybox top </span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -ti net-bridge  /bin/sh</span><br><span class=\"line\"><span class=\"comment\"># Veth Pair虚拟网卡设备eth0@if62</span></span><br><span class=\"line\">/ $ ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">61: eth0@if62: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue</span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">/ $ route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"><span class=\"comment\"># 宿主机上查看接口信息,启动了一个虚拟网卡设备 vethaf3497b@if61</span></span><br><span class=\"line\">$ ip a | tail -4</span><br><span class=\"line\">62: vethaf3497b@if61: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether ca:2f:b0:6a:a1:28 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::c82f:b0ff:fe6a:a128/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># brctl show 可以看到docker0 设备上多了一个接口 vethf29b81e 即刚才启动容器的虚拟网卡</span></span><br><span class=\"line\">$ brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">docker0         8000.0242f2caa77e       no              vethaf3497b</span><br><span class=\"line\">pan1            8000.000000000000       no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># host网络，就是和host主机共享网络，会和host使用一样的网络，host网络的性能比较高，但也会不可避免地引入共享网络资源的问题，比如端口冲突，比如隔离性问题。</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker run --net=host busybox ifconfig</span><br><span class=\"line\">docker0   Link encap:Ethernet  HWaddr 02:42:F2:CA:A7:7E</span><br><span class=\"line\">          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:f2ff:feca:a77e/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:274096 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:323190 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0</span><br><span class=\"line\">          RX bytes:13525456 (12.8 MiB)  TX bytes:1664281006 (1.5 GiB)</span><br><span class=\"line\"></span><br><span class=\"line\">enp0s31f6 Link encap:Ethernet  HWaddr 54:E1:AD:08:B4:21</span><br><span class=\"line\">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">          Interrupt:16 Memory:f2200000-f2220000</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback</span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:1850471 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:1850471 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:1186483790 (1.1 GiB)  TX bytes:1186483790 (1.1 GiB)</span><br><span class=\"line\"></span><br><span class=\"line\">pan1      Link encap:Ethernet  HWaddr 12:AA:30:13:D7:A4</span><br><span class=\"line\">          inet addr:10.6.207.1  Bcast:10.6.207.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::10aa:30ff:fe13:d7a4/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:14194 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:2916067 (2.7 MiB)</span><br><span class=\"line\">wlp3s0    Link encap:Ethernet  HWaddr F8:59:71:8E:3F:55</span><br><span class=\"line\">          inet addr:10.10.134.147  Bcast:10.10.143.255  Mask:255.255.240.0</span><br><span class=\"line\">          inet6 addr: fe80::54ce:44cc:368:d288/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:16914279 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:4101535 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000</span><br><span class=\"line\">          RX bytes:7919534294 (7.3 GiB)  TX bytes:2673781183 (2.4 GiB)          </span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># none网络，在该网络下的容器仅有lo网卡，属于封闭式网络，通常用于对安全性要求较高并且不需要联网的应用</span></span><br><span class=\"line\">docker run --rm -it --network=none busybox ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>接下来以docker 两种通信方式来介绍容器通信模式：</p>\n<h3 id=\"单机容器通信\"><a href=\"#单机容器通信\" class=\"headerlink\" title=\"单机容器通信\"></a>单机容器通信</h3><p>同一个宿主机上的不同容器通过 docker0 网桥进行通信的流程如图：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/VutyxR1TczBPSpv.png\" alt=\"image-20210713104524840\"></p>\n<p>如图说所示，在容器中，通过docker0网桥，凡是连接到docker0的容器，就可以通过它来进行通信。要想容器能够连接到docker0网桥，我们需要类似网线的虚拟设备Veth Pair来把容器连接到网桥上。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个container1 </span></span><br><span class=\"line\">$ docker run -d --name <span class=\"string\">&#x27;container1&#x27;</span> nginx</span><br><span class=\"line\">$ dockrer <span class=\"built_in\">exec</span> -ti container1  /bin/sh</span><br><span class=\"line\">$ ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">65: eth0@if66: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">$ route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动一个container2</span></span><br><span class=\"line\">$ docker run -d --name <span class=\"string\">&#x27;container2&#x27;</span> nginx</span><br><span class=\"line\">$ dockrer <span class=\"built_in\">exec</span> -ti container2  /bin/sh</span><br><span class=\"line\">$ ip a</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">63: eth0@if64: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"><span class=\"comment\"># route -n</span></span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看宿主机上的虚拟设备Veth Pair, veth182b3a5@if63 和 container2 的eth0@if64 是一对，container1 同理。</span></span><br><span class=\"line\">$ ip a | tail -8</span><br><span class=\"line\">64: veth182b3a5@if63: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 76:97:8e:fe:a9:c7 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::7497:8eff:fefe:a9c7/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">66: veth877c7d8@if65: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    link/ether 12:7e:d0:0f:ae:99 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class=\"line\">    inet6 fe80::107e:d0ff:fe0f:ae99/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># container1 ping container2 测试</span></span><br><span class=\"line\"><span class=\"comment\"># ping 172.17.0.3</span></span><br><span class=\"line\">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.091 ms</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class=\"line\">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.034 ms</span><br><span class=\"line\"><span class=\"comment\"># 可以看到同一宿主机容器默认都是通的，是因为他们默认网关都是docker0 这块网卡。 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跨主机容器通信\"><a href=\"#跨主机容器通信\" class=\"headerlink\" title=\"跨主机容器通信\"></a>跨主机容器通信</h3><p>跨主机通信方案有以下几种方案：</p>\n<ul>\n<li>NAT方式<br>NAT就是传统的docker网络，利用宿主机的IP和Iptables来达到容器，主机之间的通信。容器对外IP都是宿主机的IP，NAT的性能损耗比较大。但只要宿主机之间三层IP可达，容器之间就可以通信，比较普适。</li>\n<li>Tunnel（overlay）方式，VPN，ipip，VXLAN等都是tunnel技术，简单讲就是在容器的数据包间封装一层或多层其他的数据协议头，达到连通的效果。这种方式一般也是只需要三层可达，容器就能互通，比较普适。</li>\n<li>Routing方式<br>路由方案主要是通过路由设置的方式让容器对容器，容器对宿主机之间相通信。例如：calico的BGP路由方案（非IPIP）。这种方式一般适用于单个数据中心，最常见的是同一个vlan中使用，如果不是，需要设置路由规则。路由方案性能损耗少，和主机网络性能比较接近。</li>\n</ul>\n<p>先介绍下NAT方式，所有接入到该桥接设备上的容器都会被NAT隐藏，它们发往Docker主机外部的所有流量都会经过源地址转换后发出(SNAT)，并且默认是无法直接接受节点之外的其他主机发来的请求。当需要接入Docker主机外部流量，就需要进行目标地址转换(DNAT)甚至端口转换将其暴露在外部网络当中。大致的流程图：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/scPfALv6ibqEMWI.png\" alt=\"image-20210713111835432\"></p>\n<p>容器内的属于私有地址，需要在左侧的主机上的eth0上进行源地址转换，而右侧的地址需要被访问，就需要将eth0的地址进行NAT转换。SNAT—-&gt;DNAT。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#具体方案在2个主机上通过主机路由和iptables 地址伪装来实现跨主机容器的互通，这里就不做过多解释</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kubernetes-容器网络CNI插件\"><a href=\"#Kubernetes-容器网络CNI插件\" class=\"headerlink\" title=\"Kubernetes 容器网络CNI插件\"></a>Kubernetes 容器网络CNI插件</h2><p>这里介绍完docker的网络方案之后，我们来聊聊kubernetes的容器间网络的通信方案。</p>\n<p>官网中文doc：<a href=\"https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/\">https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/</a></p>\n<p>那么什么是CNI（container network interface）容器网络接口，k8s为了更好的控制网络的接入，推出了CNI即容器网络的API接口。CNI维护了一个单独的网桥来代替 docker0。这个网桥的名字就叫作：CNI 网桥，它在宿主机上的设备名称默认是：cni0。</p>\n<p>CNI主要解决Pod间的通信，目前流行的CNI插件如：calico, cilium, flannel, kube-ovn, kube-router</p>\n<h2 id=\"Flannel-插件跨主机通信原理\"><a href=\"#Flannel-插件跨主机通信原理\" class=\"headerlink\" title=\"Flannel 插件跨主机通信原理\"></a>Flannel 插件跨主机通信原理</h2><p>Flannel 项目是 CoreOS 公司主推的容器网络方案。事实上，Flannel 项目本身只是一个框架，真正为我们提供容器网络功能的，是 Flannel 的后端实现。目前，Flannel 支持三种后端实现，分别是：</p>\n<ul>\n<li>UDP</li>\n<li>VXLAN</li>\n<li>host-gw</li>\n</ul>\n<h3 id=\"udp模式\"><a href=\"#udp模式\" class=\"headerlink\" title=\"udp模式\"></a>udp模式</h3><p><img src=\"https://i.loli.net/2021/07/14/zSH467pZwVF1LBg.png\" alt=\"image-20210713190907679\"></p>\n<p>可以看到，Flannel UDP 模式提供的其实是一个三层的 Overlay 网络，即：它首先对发出端的 IP 包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。这就好比，Flannel 在不同宿主机上的两个容器之间打通了一条“隧道”，使得这两个容器可以直接使用 IP 地址进行通信，而无需关心容器和宿主机的分布情况。</p>\n<p>但是UDP 模式有严重的性能问题，基本已经上被废弃了。</p>\n<p>基于 Flannel UDP 模式的容器通信多了一个额外的步骤，即 flanneld 的处理过程。而这个过程，由于使用到了 flannel0 这个 TUN 设备，仅在发出 IP 包的过程中，就需要经过三次用户态与内核态之间的数据拷贝，其性能可想而知。</p>\n<h3 id=\"VXLAN模式\"><a href=\"#VXLAN模式\" class=\"headerlink\" title=\"VXLAN模式\"></a>VXLAN模式</h3><p>VXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚似化技术。所以说，VXLAN 可以完全在内核态实现上述封装和解封装的工作，从而通过与前面相似的“隧道”机制，构建出覆盖网络（Overlay Network）</p>\n<p><img src=\"https://i.loli.net/2021/07/14/Kqv7ULZscznIGFC.png\" alt=\"image-20210713191114467\"></p>\n<p>VXLAN 模式组建的覆盖网络，其实就是一个由不同宿主机上的 VTEP 设备，也就是 flannel.1 设备组成的虚拟二层网络。对于 VTEP 设备来说，它发出的“内部数据帧”就仿佛是一直在这个虚拟的二层网络上流动。这，也正是覆盖网络的含义,具体就不展开了。</p>\n<h2 id=\"Kubernetes-三层网络方案\"><a href=\"#Kubernetes-三层网络方案\" class=\"headerlink\" title=\"Kubernetes 三层网络方案\"></a>Kubernetes 三层网络方案</h2><p>讲了以上flannel 的以上2种方案，我们接下来讲一下纯三层的网络方案，如于 Flannel 的 host-gw 模式和 Calico BGP</p>\n<h3 id=\"Flannel-的-host-gw-模式\"><a href=\"#Flannel-的-host-gw-模式\" class=\"headerlink\" title=\"Flannel 的 host-gw 模式\"></a>Flannel 的 host-gw 模式</h3><p><img src=\"https://i.loli.net/2021/07/14/xp64BmUif5PMXsl.png\" alt=\"image-20210714221235728\"></p>\n<p>假设现在，Node 1 上的 Infra-container-1，要访问 Node 2 上的 Infra-container-2。</p>\n<p>当你设置 Flannel 使用 host-gw 模式之后，flanneld 会在宿主机上创建这样一条规则，以 Node 1 为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip route</span><br><span class=\"line\">...</span><br><span class=\"line\">10.244.1.0/24 via 10.168.0.3 dev eth0</span><br></pre></td></tr></table></figure>\n\n<p>这条路由规则的含义是：目的 IP 地址属于 10.244.1.0/24 网段的 IP 包，应该经过本机的 eth0 设备发出去（即：dev eth0）；并且，它下一跳地址（next-hop）是 10.168.0.3（即：via 10.168.0.3）。</p>\n<p>如图所示这个下一跳地址对应的，正是我们的目的宿主机 Node 2。</p>\n<p>一旦配置了下一跳地址，那么接下来，当 IP 包从网络层进入链路层封装成帧的时候，eth0 设备就会使用下一跳地址对应的 MAC 地址，作为该数据帧的目的 MAC 地址。显然，这个 MAC 地址，正是 Node 2 的 MAC 地址。这样，这个数据帧就会从 Node 1 通过宿主机的二层网络顺利到达 Node 2 上。</p>\n<p>而 Node 2 的内核网络栈从二层数据帧里拿到 IP 包后，会“看到”这个 IP 包的目的 IP 地址是 10.244.1.3，即 Infra-container-2 的 IP 地址。这时候，根据 Node 2 上的路由表，该目的地址会匹配到第二条路由规则（也就是 10.244.1.0 对应的路由规则），从而进入 cni0 网桥，进而进入到 Infra-container-2 当中。</p>\n<p>host-gw 模式的工作原理，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。所以宿主机充当了“网关”的角色，即顾名思义“host-gw”</p>\n<h3 id=\"Calico\"><a href=\"#Calico\" class=\"headerlink\" title=\"Calico\"></a>Calico</h3><p>Calico 是一套开源的网络和网络安全方案，用于容器、虚拟机、宿主机之前的网络连接，可以用在kubernetes、OpenShift、DockerEE、OpenStrack等PaaS或IaaS平台上。</p>\n<p>首先看下calico 架构图</p>\n<p><img src=\"https://i.loli.net/2021/07/14/t4dhz5sQkFiPWcl.png\" alt=\"image-20210713170229021\"></p>\n<ul>\n<li><code>Felix</code>：<code>calico</code>的核心组件，运行在每个节点上。主要的功能有接口管理、路由规则、ACL规则和状态报告</li>\n<li><code>Etcd</code>：保证数据一致性的数据库，存储集群中节点的所有路由信息。为保证数据的可靠和容错建议至少三个以上etcd节点。</li>\n<li><code>Bird</code>：BGP客户端，<code>Calico</code>在每个节点上的都会部署一个BGP客户端（利用Daemonset方式部署），它的作用是将Felix的路由信息读入内核，并通过BGP协议在集群中分发。当Felix将路由插入到Linux内核FIB中时，BGP客户端将获取这些路由并将它们分发到部署中的其他节点。这可以确保在部署时有效地路由流量。</li>\n<li><code>BGP Router Reflector</code>：使用 BGP client 形成 mesh 全网互联的方案就会导致规模限制，所有节点需要 N^2 个连接，为了解决这个规模问题，BGP 的 <code>Router Reflector</code>的方法，使所有 BGP Client 仅与特定 RR 节点互联并做路由同步，从而大大减少连接数。</li>\n</ul>\n<h4 id=\"Calico-网络模式\"><a href=\"#Calico-网络模式\" class=\"headerlink\" title=\"Calico 网络模式\"></a>Calico 网络模式</h4><ul>\n<li> IPIP模式，把 IP 层封装到 IP 层的一个 tunnel。作用其实基本上就相当于一个基于IP层的网桥！一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。</li>\n<li>Router Reflector 模式（RR），Calico 维护的网络在默认是（Node-to-Node Mesh）全互联模式，Calico集群中的节点之间都会相互建立连接，用于路由交换。但是随着集群规模的扩大，mesh模式将形成一个巨大服务网格，连接数成倍增加。这时就需要使用 Route Reflector（路由器反射）模式解决这个问题。</li>\n</ul>\n<h4 id=\"BGP-协议\"><a href=\"#BGP-协议\" class=\"headerlink\" title=\"BGP 协议\"></a>BGP 协议</h4><p><code>BGP（border gateway protocol）是外部路由协议（边界网关路由协议）</code>，用来在AS之间传递路由信息是一种增强的距离矢量路由协议（应用场景），基本功能是在自治系统间自动交换无环路的路由信息，通过交换带有自治系统号序列属性的路径可达信息，来构造自治系统的拓扑图，从而消除路由环路并实施用户配置的路由策略。<strong>只要记住BGP简单理解其实就是实现大规模网络中节点路由信息同步共享的一种协议</strong>。</p>\n<blockquote>\n<p>实际上，Calico 项目提供的 <code>BGP</code> 网络解决方案，与 <code>Flannel</code> 的 <code>host-gw</code> 模式几乎一样。也就是说，Calico也是基于路由表实现容器数据包转发，但不同于Flannel使用flanneld进程来维护路由信息的做法，而Calico项目使用BGP协议来自动维护整个集群的路由信息。</p>\n</blockquote>\n<p>BGP模式</p>\n<ul>\n<li><code>全互联模式</code>（node-to-node mesh） 每一个BGP Speaker都需要和其他BGP Speaker建立BGP连接，这样BGP连接总数就是N^2，如果数量过大会消耗大量连接。如果集群数量超过100台官方不建议使用此种模式。</li>\n<li>RR模式（Router Reflection），会指定一个或多个BGP Speaker为RouterReflection，它与网络中其他Speaker建立连接，每个Speaker只要与Router Reflection建立BGP就可以获得全网的路由信息。在calico中可以通过<code>Global Peer</code>实现RR模式。</li>\n</ul>\n<h4 id=\"Calico-IPIP\"><a href=\"#Calico-IPIP\" class=\"headerlink\" title=\"Calico IPIP\"></a>Calico IPIP</h4><p><img src=\"https://i.loli.net/2021/07/14/dtF9w1YTnsIZ4Ek.png\" alt=\"image-20210714210320203\"></p>\n<p>IPIP 是linux内核的驱动程序，可以对数据包进行隧道，上图可以看到两个不同的网络 vlan1 和 vlan2。基于现有的以太网将原始包中的原始IP进行一次封装，通过tunl0解包，这个tunl0类似于ipip模块，和Flannel vxlan的veth很类似。</p>\n<p>Pod1 访问 Pod2 流程如下：</p>\n<ol>\n<li><p>数据包从 Pod1 出到达Veth Pair另一端（宿主机上，以cali前缀开头）。</p>\n</li>\n<li><p>进入IP隧道设备（tunl0），由Linux内核IPIP驱动封装，把源容器ip换成源宿主机ip，目的容器ip换成目的主机ip，这样就封装成 Node1 到 Node2 的数据包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时包的类型：</span><br><span class=\"line\">  原始IP包：</span><br><span class=\"line\">  源IP：10.244.1.10</span><br><span class=\"line\">  目的IP：10.244.2.10</span><br><span class=\"line\"></span><br><span class=\"line\">   TCP：</span><br><span class=\"line\">   源IP: 192.168.31.62</span><br><span class=\"line\">   目的iP：192.168.32.63</span><br></pre></td></tr></table></figure></li>\n<li><p>数据包经过路由器三层转发到 Node2</p>\n</li>\n<li><p>Node2 收到数据包后，网络协议栈会使用IPIP驱动进行解包，从中拿到原始IP包。</p>\n</li>\n<li><p>然后根据路由规则，将数据包转发给cali设备，从而到达 Pod2。</p>\n</li>\n</ol>\n<p>通过如上步骤可以看出，当 Calico 使用 IPIP 模式的时候，集群的网络性能会因为额外的封包和解包工作而下降。所以建议你将所有宿主机节点放在一个子网里，避免使用 IPIP。<strong>不过这里可以利用IPIP模式的CrossSubnet来突破node不能跨VALN的问题，这个目前已经测试通过。</strong></p>\n<h4 id=\"Calico-BGP-RR\"><a href=\"#Calico-BGP-RR\" class=\"headerlink\" title=\"Calico BGP RR\"></a>Calico BGP RR</h4><p>calico还和flannel host-gw不同之处在于，它不会创建网桥设备，而是通过路由表来维护每个pod的通信，如下图：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/2nKSBwmRChpUqgD.png\" alt=\"image-20210714200920896\"></p>\n<p>Pod1 访问 Pod2大致流程如下：</p>\n<ul>\n<li>数据包从Pod1出到达Veth Pair另一端（宿主机上，以cali前缀开头）</li>\n<li>宿主机根据路由规则，将数据包转发给下一跳（网关）</li>\n<li>到达Node2，根据路由规则将数据包转发给cali设备，从而到达Pod2</li>\n</ul>\n<p>实际例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.启动2个容器</span><br><span class=\"line\">kubectl create -f -&lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: apps/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: Deployment</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  replicas: 2</span></span><br><span class=\"line\"><span class=\"string\">  selector:</span></span><br><span class=\"line\"><span class=\"string\">    matchLabels:</span></span><br><span class=\"line\"><span class=\"string\">      app: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">  template:</span></span><br><span class=\"line\"><span class=\"string\">    metadata:</span></span><br><span class=\"line\"><span class=\"string\">      labels:</span></span><br><span class=\"line\"><span class=\"string\">        app: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">    spec:</span></span><br><span class=\"line\"><span class=\"string\">      containers:</span></span><br><span class=\"line\"><span class=\"string\">        - name: nettools-deploy</span></span><br><span class=\"line\"><span class=\"string\">          image: registry.ztosys.com/base/network-multitool:lastet</span></span><br><span class=\"line\"><span class=\"string\">          imagePullPolicy: IfNotPresent     </span></span><br><span class=\"line\"><span class=\"string\">          ports:</span></span><br><span class=\"line\"><span class=\"string\">            - containerPort: 80</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">2.查看2个pod 目前所在的node节点</span><br><span class=\"line\">kubectl get pod -owide</span><br><span class=\"line\">NAME                               READY   STATUS    RESTARTS   AGE    IP             NODE         NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nettools-deploy-68b646bdfb-2ckgt   1/1     Running   0          113s   10.5.231.54    10.4.83.14   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">nettools-deploy-68b646bdfb-xbpwd   1/1     Running   0          113s   10.5.228.128   10.4.83.11   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\">3.查看pod中的路由和网卡信息，可以看到路由指向的是一个不存在的网关地址169.254.1.1，这个主要利用了ARP代理欺骗的技术来把pod 所有数据流导到宿主机的 cali70d877f367d@if3 网卡上</span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -ti nettools-deploy-68b646bdfb-2ckgt  /bin/sh</span><br><span class=\"line\">ip r</span><br><span class=\"line\">default via 169.254.1.1 dev eth0</span><br><span class=\"line\">169.254.1.1 dev eth0 scope link</span><br><span class=\"line\">/ <span class=\"comment\"># ip a</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: eth0@if9431: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether be:11:81:9a:9b:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 10.5.231.54/32 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4.可以登录node 查看Veth Pair 设备和路由信息，这里可以看到网卡的编号和pod 中的网卡名是一样的。所以称之为虚拟网卡对(Veth Pair)，有了这个cali70d877f367d@if3 设备那么容器发出的IP包就会通过veth pair设备到达宿主机</span><br><span class=\"line\">ip r  | grep 10.5.231.54</span><br><span class=\"line\">10.5.231.54 dev cali70d877f367d scope link</span><br><span class=\"line\"></span><br><span class=\"line\">ip a | grep -A 4  9431</span><br><span class=\"line\">9431: cali70d877f367d@if3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 7</span><br><span class=\"line\">    inet6 fe80::ecee:eeff:feee:eeee/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">5.pod1要想跟其他主机pod2通信那么检查node上是否存在相应的路由，然后到达目标宿主机，再到达目标容器</span><br><span class=\"line\">ip r | grep 10.5.228.128</span><br><span class=\"line\">10.5.228.128/26 via 10.4.83.11 dev bond0 proto bird</span><br></pre></td></tr></table></figure>\n\n<p>其中，这里最核心的 下一跳 路由规则，就是由 Calico 的 Felix 进程负责维护的。这些路由规则信息，则是通过 BGP Client 中 BIRD 组件，使用 BGP 协议来传输。</p>\n<p>不难发现，Calico 项目实际上将集群里的所有节点，都当作是边界路由器来处理，它们一起组成了一个全连通的网络，互相之间通过 BGP 协议交换路由规则。这些节点，我们称为 BGP Peer。</p>\n<p>需要注意的是calico 维护网络的默认模式是 node-to-node mesh ,这种模式下，每台宿主机的BGP client都会跟集群所有的节点BGP client进行通信交换路由。这样一来，随着节点规模数量N的增加，连接会以N的2次方增长，会集群网络本身带来巨大压力，在集群规模比较大时，官方建议是使用BGP-RR 如下是我们使用网络硬件设备作为RR</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl node status</span><br><span class=\"line\">Calico process is running.</span><br><span class=\"line\"></span><br><span class=\"line\">IPv4 BGP status</span><br><span class=\"line\">+--------------+-----------+-------+------------+-------------+</span><br><span class=\"line\">| PEER ADDRESS | PEER TYPE | STATE |   SINCE    |    INFO     |</span><br><span class=\"line\">+--------------+-----------+-------+------------+-------------+</span><br><span class=\"line\">| 10.4.36.250  | global    | up    | 2021-05-11 | Established |</span><br><span class=\"line\">| 10.4.36.251  | global    | up    | 2021-05-11 | Established |</span><br><span class=\"line\">+--------------+-----------+-------+------------+-------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"目前calico架构图\"><a href=\"#目前calico架构图\" class=\"headerlink\" title=\"目前calico架构图\"></a>目前calico架构图</h4><p><img src=\"https://i.loli.net/2021/07/14/cOREUpCYqS5omPI.png\" alt=\"image-20210714205042267\"></p>\n<p>现在的架构考虑到了冗余，隔离，性能</p>\n<ul>\n<li>网络隔离，所有的bgp 学习在一组交换机内，不向上通报，避免容器的bgp 影响到我们sdn 的bgp，带来的排障的麻烦，这是隔离。</li>\n<li>性能方面，现在集群 bgp 关闭full mesh，改为global，降低因容器集群规模变大，导致路由过多的问题。</li>\n<li>冗余方面，现在每台机器2条线，接2个交换机，bgp 跟2个交换机互联，实现了冗余，所有流量通过 交换机交换，满足了性能跟冗余的要求。</li>\n</ul>\n<h4 id=\"Calico-优劣势\"><a href=\"#Calico-优劣势\" class=\"headerlink\" title=\"Calico 优劣势\"></a>Calico 优劣势</h4><p>优势</p>\n<ul>\n<li>BGP RR没有封包和解包过程，完全基于两端宿主机的路由表进行转发</li>\n<li>可以配合使用 <code>Network Policy</code> 做 pod 和 pod 之前的访问控制</li>\n</ul>\n<p>劣势</p>\n<ul>\n<li>要求宿主机处于同一个2层网络下，也就是连在一台交换机上，但也可以突破</li>\n<li>每个node上会设置大量（大量)的iptables规则、路由，运维、排障难度大</li>\n<li>安全策略隔离上也略显不足</li>\n</ul>\n<h3 id=\"CNI插件性能比较\"><a href=\"#CNI插件性能比较\" class=\"headerlink\" title=\"CNI插件性能比较\"></a>CNI插件性能比较</h3><p>基于flannel解包包的路由和转发的操作都是在CPU上进行的，这样就造成了计算资源的浪费。下图是从网上找的各种开源网络组件的性能对比。可以看出，无论是带宽还是网络延迟，性能都和calico主机差不多。</p>\n<p><img src=\"https://i.loli.net/2021/07/14/5r1QBLDSUpcR7Hk.png\" alt=\"image-20210714212457115\"></p>\n<h2 id=\"Kubernetes-Service-NodePort-和Ingress\"><a href=\"#Kubernetes-Service-NodePort-和Ingress\" class=\"headerlink\" title=\"Kubernetes Service NodePort 和Ingress\"></a>Kubernetes Service NodePort 和Ingress</h2><h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><p>Service 这个 Kubernetes 里重要的服务对象。而 Kubernetes 之所以需要 Service，</p>\n<ul>\n<li><p>一方面是因为 Pod 的 IP 不是固定的</p>\n</li>\n<li><p>另一方面则是因为一组 Pod 实例之间总会有负载均衡的需求</p>\n</li>\n</ul>\n<p>实际上，Service 是由 kube-proxy 组件，加上 iptables 来共同实现的。</p>\n<blockquote>\n<p>并且现在还支持IPVS的模式，kube-proxy 通过 iptables 处理 Service 的过程，其实需要在宿主机上设置相当多的 iptables 规则。而且，kube-proxy 还需要在控制循环里不断地刷新这些规则来确保它们始终是正确的。当pod数量巨大时，成百上千条 iptables 规则不断地被刷新，会大量占用该宿主机的 CPU 资源，甚至会让宿主机“卡”在这个过程中。所以说，一直以来，基于 iptables 的 Service 实现，都是制约 Kubernetes 项目承载更多量级的 Pod 的主要障碍。我们知道IPVS跟IPtables都是工作基于内核的Netfilter 的 NAT 模式工作的，IPVS 并不需要在宿主机上为每个 Pod 设置 iptables 规则，而是把对这些“规则”的处理放到了内核态，从而极大地降低了维护这些规则的代价。所以当集群规模比较大的时候，可以使用ipvs 来提高性能。</p>\n</blockquote>\n<p>ClusterIP 服务是默认的 Kubernetes Service。它为您提供集群内的服务，集群内的其他应用程序可以访问该服务,默认外部无法访问改地址。如图所示</p>\n<p><img src=\"https://i.loli.net/2021/07/14/5VXtAYkF86OxiNH.png\" alt=\"image-20210714223846542\"></p>\n<h4 id=\"NodePort\"><a href=\"#NodePort\" class=\"headerlink\" title=\"NodePort\"></a>NodePort</h4><p> NodePort服务是将外部流量直接发送到您的服务的最原始方式。NodePort，顾名思义，在所有节点（VM）上打开一个特定的端口，发送到这个端口的任何流量都会转发到服务，如图所示。</p>\n<p><img src=\"https://i.loli.net/2021/07/14/w8H4RvuPsiJnDzN.png\" alt=\"image-20210714224044599\"></p>\n<h4 id=\"Ingress\"><a href=\"#Ingress\" class=\"headerlink\" title=\"Ingress\"></a>Ingress</h4><p>Ingress 实际上不是一种服务。相反，它位于多个服务的前面，充当“智能路由器”或集群的入口点。</p>\n<p>Ingress 的功能其实很容易理解：所谓 Ingress，就是 Service 的“Service”，如图所示：</p>\n<p><img src=\"https://i.loli.net/2021/07/14/hgznYwIPp87KHJF.png\" alt=\"image-20210714224239095\"></p>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><ol>\n<li>为什么要用calico </li>\n<li>cilium 取代calico</li>\n<li>….</li>\n</ol>\n"},{"title":"Go语言基础之接口","date":"2021-07-02T00:29:27.000Z","_content":"接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。\n\n# 接口\n\n## 接口类型\n\n在Go语言中接口（interface）是一种类型，一种抽象的类型。\n\n`interface`是一组`method`的集合，是`duck-type programming`的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。\n\n为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。\n\n## 为什么要使用接口\n\n```go\ntype Cat struct{}\n\nfunc (c Cat) Say() string { return \"喵喵喵\" }\n\ntype Dog struct{}\n\nfunc (d Dog) Say() string { return \"汪汪汪\" }\n\nfunc main() {\n\tc := Cat{}\n\tfmt.Println(\"猫:\", c.Say())\n\td := Dog{}\n\tfmt.Println(\"狗:\", d.Say())\n}\n```\n\n上面的代码中定义了猫和狗，然后它们都会叫，你会发现main函数中明显有重复的代码，如果我们后续再加上猪、青蛙等动物的话，我们的代码还会一直重复下去。那我们能不能把它们当成“能叫的动物”来处理呢？\n\n像类似的例子在我们编程过程中会经常遇到：\n\n比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？\n\n比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？\n\n比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？\n\nGo语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。\n\n<!--more-->\n\n## 接口的定义\n\nGo语言提倡面向接口编程。\n\n每个接口由数个方法组成，接口的定义格式如下：\n\n```go\ntype 接口类型名 interface{\n    方法名1( 参数列表1 ) 返回值列表1\n    方法名2( 参数列表2 ) 返回值列表2\n    …\n}\n```\n\n其中：\n\n- 接口名：使用`type`将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加`er`，如有写操作的接口叫`Writer`，有字符串功能的接口叫`Stringer`等。接口名最好要能突出该接口的类型含义。\n- 方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。\n- 参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。\n举个例子：\n\n```go\ntype writer interface{\n    Write([]byte) error\n}\n```\n\n当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。\n\n## 实现接口的条件\n\n一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个**需要实现的方法列表**。\n\n我们来定义一个`Sayer`接口：\n\n```go\n// Sayer 接口\ntype Sayer interface {\n\tsay()\n}\n```\n\n定义`dog`和`cat`两个结构体：\n\n```go\ntype dog struct {}\n\ntype cat struct {}\n```\n\n因为`Sayer`接口里只有一个`say`方法，所以我们只需要给`dog`和`cat `分别实现`say`方法就可以实现`Sayer`接口了。\n\n```go\n// dog实现了Sayer接口\nfunc (d dog) say() {\n\tfmt.Println(\"汪汪汪\")\n}\n\n// cat实现了Sayer接口\nfunc (c cat) say() {\n\tfmt.Println(\"喵喵喵\")\n}\n```\n\n接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。\n\n## 接口类型变量\n\n那实现了接口有什么用呢？\n\n接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，`Sayer`类型的变量能够存储`dog`和`cat`类型的变量。\n\n```go\nfunc main() {\n\tvar x Sayer // 声明一个Sayer类型的变量x\n\ta := cat{}  // 实例化一个cat\n\tb := dog{}  // 实例化一个dog\n\tx = a       // 可以把cat实例直接赋值给x\n\tx.say()     // 喵喵喵\n\tx = b       // 可以把dog实例直接赋值给x\n\tx.say()     // 汪汪汪\n}\n```\n\n**Tips：** 观察下面的代码，体味此处`_`的妙用\n\n```go\n// 摘自gin框架routergroup.go\ntype IRouter interface{ ... }\n\ntype RouterGroup struct { ... }\n\nvar _ IRouter = &RouterGroup{}  // 确保RouterGroup实现了接口IRouter\n```\n\n## 值接收者和指针接收者实现接口的区别\n\n使用值接收者实现接口和使用指针接收者实现接口有什么区别呢？接下来我们通过一个例子看一下其中的区别。\n\n我们有一个`Mover`接口和一个`dog`结构体。\n\n```go\ntype Mover interface {\n\tmove()\n}\n\ntype dog struct {}\n```\n\n### 值接收者实现接口\n\n```go\nfunc (d dog) move() {\n\tfmt.Println(\"狗会动\")\n}\n```\n\n此时实现接口的是`dog`类型：\n\n```go\nfunc main() {\n\tvar x Mover\n\tvar wangcai = dog{} // 旺财是dog类型\n\tx = wangcai         // x可以接收dog类型\n\tvar fugui = &dog{}  // 富贵是*dog类型\n\tx = fugui           // x可以接收*dog类型\n\tx.move()\n}\n```\n\n从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是dog结构体还是结构体指针*dog类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，dog指针`fugui`内部会自动求值`*fugui`。\n\n### 指针接收者实现接口\n\n同样的代码我们再来测试一下使用指针接收者有什么区别：\n\n```go\nfunc (d *dog) move() {\n\tfmt.Println(\"狗会动\")\n}\nfunc main() {\n\tvar x Mover\n\tvar wangcai = dog{} // 旺财是dog类型\n\tx = wangcai         // x不可以接收dog类型\n\tvar fugui = &dog{}  // 富贵是*dog类型\n\tx = fugui           // x可以接收*dog类型\n}\n```\n\n此时实现`Mover`接口的是`*dog`类型，所以不能给`x`传入`dog`类型的wangcai，此时x只能存储`*dog`类型的值。\n\n### 面试题\n\n**注意：**这是一道你需要回答“能”或者“不能”的题！\n\n首先请观察下面的这段代码，然后请回答这段代码能不能通过编译？\n\n```go\ntype People interface {\n\tSpeak(string) string\n}\n\ntype Student struct{}\n\nfunc (stu *Student) Speak(think string) (talk string) {\n\tif think == \"sb\" {\n\t\ttalk = \"你是个大帅比\"\n\t} else {\n\t\ttalk = \"您好\"\n\t}\n\treturn\n}\n\nfunc main() {\n\tvar peo People = Student{}\n\tthink := \"bitch\"\n\tfmt.Println(peo.Speak(think))\n}\n```\n\n## 类型与接口的关系\n\n### 一个类型实现多个接口\n\n一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以叫，也可以动。我们就分别定义Sayer接口和Mover接口，如下： `Mover`接口。\n\n```go\n// Sayer 接口\ntype Sayer interface {\n\tsay()\n}\n\n// Mover 接口\ntype Mover interface {\n\tmove()\n}\n```\n\ndog既可以实现Sayer接口，也可以实现Mover接口。\n\n```go\ntype dog struct {\n\tname string\n}\n\n// 实现Sayer接口\nfunc (d dog) say() {\n\tfmt.Printf(\"%s会叫汪汪汪\\n\", d.name)\n}\n\n// 实现Mover接口\nfunc (d dog) move() {\n\tfmt.Printf(\"%s会动\\n\", d.name)\n}\n\nfunc main() {\n\tvar x Sayer\n\tvar y Mover\n\n\tvar a = dog{name: \"旺财\"}\n\tx = a\n\ty = a\n\tx.say()\n\ty.move()\n}\n```\n\n### 多个类型实现同一接口\n\nGo语言中不同的类型还可以实现同一接口 首先我们定义一个`Mover`接口，它要求必须由一个`move`方法。\n\n```go\n// Mover 接口\ntype Mover interface {\n\tmove()\n}\n```\n\n例如狗可以动，汽车也可以动，可以使用如下代码实现这个关系：\n\n```go\ntype dog struct {\n\tname string\n}\n\ntype car struct {\n\tbrand string\n}\n\n// dog类型实现Mover接口\nfunc (d dog) move() {\n\tfmt.Printf(\"%s会跑\\n\", d.name)\n}\n\n// car类型实现Mover接口\nfunc (c car) move() {\n\tfmt.Printf(\"%s速度70迈\\n\", c.brand)\n}\n```\n\n这个时候我们在代码中就可以把狗和汽车当成一个会动的物体来处理了，不再需要关注它们具体是什么，只需要调用它们的`move`方法就可以了。\n\n```go\nfunc main() {\n\tvar x Mover\n\tvar a = dog{name: \"旺财\"}\n\tvar b = car{brand: \"保时捷\"}\n\tx = a\n\tx.move()\n\tx = b\n\tx.move()\n}\n```\n\n上面的代码执行结果如下：\n\n```go\n旺财会跑\n保时捷速度70迈\n```\n\n并且一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。\n\n```go\n// WashingMachine 洗衣机\ntype WashingMachine interface {\n\twash()\n\tdry()\n}\n\n// 甩干器\ntype dryer struct{}\n\n// 实现WashingMachine接口的dry()方法\nfunc (d dryer) dry() {\n\tfmt.Println(\"甩一甩\")\n}\n\n// 海尔洗衣机\ntype haier struct {\n\tdryer //嵌入甩干器\n}\n\n// 实现WashingMachine接口的wash()方法\nfunc (h haier) wash() {\n\tfmt.Println(\"洗刷刷\")\n}\n```\n\n## 接口嵌套\n\n接口与接口间可以通过嵌套创造出新的接口。\n\n```go\n// Sayer 接口\ntype Sayer interface {\n\tsay()\n}\n\n// Mover 接口\ntype Mover interface {\n\tmove()\n}\n\n// 接口嵌套\ntype animal interface {\n\tSayer\n\tMover\n}\n```\n\n嵌套得到的接口的使用与普通接口一样，这里我们让cat实现animal接口：\n\n```go\ntype cat struct {\n\tname string\n}\n\nfunc (c cat) say() {\n\tfmt.Println(\"喵喵喵\")\n}\n\nfunc (c cat) move() {\n\tfmt.Println(\"猫会动\")\n}\n\nfunc main() {\n\tvar x animal\n\tx = cat{name: \"花花\"}\n\tx.move()\n\tx.say()\n}\n```\n\n## 空接口\n\n### 空接口的定义\n\n空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。\n\n空接口类型的变量可以存储任意类型的变量。\n\n```go\nfunc main() {\n\t// 定义一个空接口x\n\tvar x interface{}\n\ts := \"Hello 沙河\"\n\tx = s\n\tfmt.Printf(\"type:%T value:%v\\n\", x, x)\n\ti := 100\n\tx = i\n\tfmt.Printf(\"type:%T value:%v\\n\", x, x)\n\tb := true\n\tx = b\n\tfmt.Printf(\"type:%T value:%v\\n\", x, x)\n}\n```\n\n### 空接口的应用\n\n#### 空接口作为函数的参数\n\n使用空接口实现可以接收任意类型的函数参数。\n\n```go\n// 空接口作为函数参数\nfunc show(a interface{}) {\n\tfmt.Printf(\"type:%T value:%v\\n\", a, a)\n}\n```\n\n#### 空接口作为map的值\n\n使用空接口实现可以保存任意值的字典。\n\n```go\n// 空接口作为map值\n\tvar studentInfo = make(map[string]interface{})\n\tstudentInfo[\"name\"] = \"沙河娜扎\"\n\tstudentInfo[\"age\"] = 18\n\tstudentInfo[\"married\"] = false\n\tfmt.Println(studentInfo)\n```\n\n## 类型断言\n\n空接口可以存储任意类型的值，那我们如何获取其存储的具体数据呢？\n\n### 接口值\n\n一个接口的值（简称接口值）是由`一个具体类型`和`具体类型的值`两部分组成的。这两部分分别称为接口的`动态类型`和`动态值`。\n\n我们来看一个具体的例子：\n\n```go\nvar w io.Writer\nw = os.Stdout\nw = new(bytes.Buffer)\nw = nil\n```\n\n请看下图分解：![接口值图解](https://liwenzhou.com/images/Go/interface/interface.png)\n\n想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：\n\n```go\nx.(T)\n```\n\n其中：\n\n- x：表示类型为`interface{}`的变量\n- T：表示断言`x`可能是的类型。\n\n该语法返回两个参数，第一个参数是`x`转化为`T`类型后的变量，第二个值是一个布尔值，若为`true`则表示断言成功，为`false`则表示断言失败。\n\n举个例子：\n\n```go\nfunc main() {\n\tvar x interface{}\n\tx = \"Hello 沙河\"\n\tv, ok := x.(string)\n\tif ok {\n\t\tfmt.Println(v)\n\t} else {\n\t\tfmt.Println(\"类型断言失败\")\n\t}\n}\n```\n\n上面的示例中如果要断言多次就需要写多个`if`判断，这个时候我们可以使用`switch`语句来实现：\n\n```go\nfunc justifyType(x interface{}) {\n\tswitch v := x.(type) {\n\tcase string:\n\t\tfmt.Printf(\"x is a string，value is %v\\n\", v)\n\tcase int:\n\t\tfmt.Printf(\"x is a int is %v\\n\", v)\n\tcase bool:\n\t\tfmt.Printf(\"x is a bool is %v\\n\", v)\n\tdefault:\n\t\tfmt.Println(\"unsupport type！\")\n\t}\n}\n```\n\n因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。\n\n关于接口需要注意的是，只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。\n\n# 练习题\n\n使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库。\n","source":"_posts/Go语言基础之接口.md","raw":"---\ntitle: Go语言基础之接口\ndate: 2021-07-02 08:29:27\ntags: [Go, Golang, Go学习]\n---\n接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。\n\n# 接口\n\n## 接口类型\n\n在Go语言中接口（interface）是一种类型，一种抽象的类型。\n\n`interface`是一组`method`的集合，是`duck-type programming`的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。\n\n为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。\n\n## 为什么要使用接口\n\n```go\ntype Cat struct{}\n\nfunc (c Cat) Say() string { return \"喵喵喵\" }\n\ntype Dog struct{}\n\nfunc (d Dog) Say() string { return \"汪汪汪\" }\n\nfunc main() {\n\tc := Cat{}\n\tfmt.Println(\"猫:\", c.Say())\n\td := Dog{}\n\tfmt.Println(\"狗:\", d.Say())\n}\n```\n\n上面的代码中定义了猫和狗，然后它们都会叫，你会发现main函数中明显有重复的代码，如果我们后续再加上猪、青蛙等动物的话，我们的代码还会一直重复下去。那我们能不能把它们当成“能叫的动物”来处理呢？\n\n像类似的例子在我们编程过程中会经常遇到：\n\n比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？\n\n比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？\n\n比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？\n\nGo语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。\n\n<!--more-->\n\n## 接口的定义\n\nGo语言提倡面向接口编程。\n\n每个接口由数个方法组成，接口的定义格式如下：\n\n```go\ntype 接口类型名 interface{\n    方法名1( 参数列表1 ) 返回值列表1\n    方法名2( 参数列表2 ) 返回值列表2\n    …\n}\n```\n\n其中：\n\n- 接口名：使用`type`将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加`er`，如有写操作的接口叫`Writer`，有字符串功能的接口叫`Stringer`等。接口名最好要能突出该接口的类型含义。\n- 方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。\n- 参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。\n举个例子：\n\n```go\ntype writer interface{\n    Write([]byte) error\n}\n```\n\n当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。\n\n## 实现接口的条件\n\n一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个**需要实现的方法列表**。\n\n我们来定义一个`Sayer`接口：\n\n```go\n// Sayer 接口\ntype Sayer interface {\n\tsay()\n}\n```\n\n定义`dog`和`cat`两个结构体：\n\n```go\ntype dog struct {}\n\ntype cat struct {}\n```\n\n因为`Sayer`接口里只有一个`say`方法，所以我们只需要给`dog`和`cat `分别实现`say`方法就可以实现`Sayer`接口了。\n\n```go\n// dog实现了Sayer接口\nfunc (d dog) say() {\n\tfmt.Println(\"汪汪汪\")\n}\n\n// cat实现了Sayer接口\nfunc (c cat) say() {\n\tfmt.Println(\"喵喵喵\")\n}\n```\n\n接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。\n\n## 接口类型变量\n\n那实现了接口有什么用呢？\n\n接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，`Sayer`类型的变量能够存储`dog`和`cat`类型的变量。\n\n```go\nfunc main() {\n\tvar x Sayer // 声明一个Sayer类型的变量x\n\ta := cat{}  // 实例化一个cat\n\tb := dog{}  // 实例化一个dog\n\tx = a       // 可以把cat实例直接赋值给x\n\tx.say()     // 喵喵喵\n\tx = b       // 可以把dog实例直接赋值给x\n\tx.say()     // 汪汪汪\n}\n```\n\n**Tips：** 观察下面的代码，体味此处`_`的妙用\n\n```go\n// 摘自gin框架routergroup.go\ntype IRouter interface{ ... }\n\ntype RouterGroup struct { ... }\n\nvar _ IRouter = &RouterGroup{}  // 确保RouterGroup实现了接口IRouter\n```\n\n## 值接收者和指针接收者实现接口的区别\n\n使用值接收者实现接口和使用指针接收者实现接口有什么区别呢？接下来我们通过一个例子看一下其中的区别。\n\n我们有一个`Mover`接口和一个`dog`结构体。\n\n```go\ntype Mover interface {\n\tmove()\n}\n\ntype dog struct {}\n```\n\n### 值接收者实现接口\n\n```go\nfunc (d dog) move() {\n\tfmt.Println(\"狗会动\")\n}\n```\n\n此时实现接口的是`dog`类型：\n\n```go\nfunc main() {\n\tvar x Mover\n\tvar wangcai = dog{} // 旺财是dog类型\n\tx = wangcai         // x可以接收dog类型\n\tvar fugui = &dog{}  // 富贵是*dog类型\n\tx = fugui           // x可以接收*dog类型\n\tx.move()\n}\n```\n\n从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是dog结构体还是结构体指针*dog类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，dog指针`fugui`内部会自动求值`*fugui`。\n\n### 指针接收者实现接口\n\n同样的代码我们再来测试一下使用指针接收者有什么区别：\n\n```go\nfunc (d *dog) move() {\n\tfmt.Println(\"狗会动\")\n}\nfunc main() {\n\tvar x Mover\n\tvar wangcai = dog{} // 旺财是dog类型\n\tx = wangcai         // x不可以接收dog类型\n\tvar fugui = &dog{}  // 富贵是*dog类型\n\tx = fugui           // x可以接收*dog类型\n}\n```\n\n此时实现`Mover`接口的是`*dog`类型，所以不能给`x`传入`dog`类型的wangcai，此时x只能存储`*dog`类型的值。\n\n### 面试题\n\n**注意：**这是一道你需要回答“能”或者“不能”的题！\n\n首先请观察下面的这段代码，然后请回答这段代码能不能通过编译？\n\n```go\ntype People interface {\n\tSpeak(string) string\n}\n\ntype Student struct{}\n\nfunc (stu *Student) Speak(think string) (talk string) {\n\tif think == \"sb\" {\n\t\ttalk = \"你是个大帅比\"\n\t} else {\n\t\ttalk = \"您好\"\n\t}\n\treturn\n}\n\nfunc main() {\n\tvar peo People = Student{}\n\tthink := \"bitch\"\n\tfmt.Println(peo.Speak(think))\n}\n```\n\n## 类型与接口的关系\n\n### 一个类型实现多个接口\n\n一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以叫，也可以动。我们就分别定义Sayer接口和Mover接口，如下： `Mover`接口。\n\n```go\n// Sayer 接口\ntype Sayer interface {\n\tsay()\n}\n\n// Mover 接口\ntype Mover interface {\n\tmove()\n}\n```\n\ndog既可以实现Sayer接口，也可以实现Mover接口。\n\n```go\ntype dog struct {\n\tname string\n}\n\n// 实现Sayer接口\nfunc (d dog) say() {\n\tfmt.Printf(\"%s会叫汪汪汪\\n\", d.name)\n}\n\n// 实现Mover接口\nfunc (d dog) move() {\n\tfmt.Printf(\"%s会动\\n\", d.name)\n}\n\nfunc main() {\n\tvar x Sayer\n\tvar y Mover\n\n\tvar a = dog{name: \"旺财\"}\n\tx = a\n\ty = a\n\tx.say()\n\ty.move()\n}\n```\n\n### 多个类型实现同一接口\n\nGo语言中不同的类型还可以实现同一接口 首先我们定义一个`Mover`接口，它要求必须由一个`move`方法。\n\n```go\n// Mover 接口\ntype Mover interface {\n\tmove()\n}\n```\n\n例如狗可以动，汽车也可以动，可以使用如下代码实现这个关系：\n\n```go\ntype dog struct {\n\tname string\n}\n\ntype car struct {\n\tbrand string\n}\n\n// dog类型实现Mover接口\nfunc (d dog) move() {\n\tfmt.Printf(\"%s会跑\\n\", d.name)\n}\n\n// car类型实现Mover接口\nfunc (c car) move() {\n\tfmt.Printf(\"%s速度70迈\\n\", c.brand)\n}\n```\n\n这个时候我们在代码中就可以把狗和汽车当成一个会动的物体来处理了，不再需要关注它们具体是什么，只需要调用它们的`move`方法就可以了。\n\n```go\nfunc main() {\n\tvar x Mover\n\tvar a = dog{name: \"旺财\"}\n\tvar b = car{brand: \"保时捷\"}\n\tx = a\n\tx.move()\n\tx = b\n\tx.move()\n}\n```\n\n上面的代码执行结果如下：\n\n```go\n旺财会跑\n保时捷速度70迈\n```\n\n并且一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。\n\n```go\n// WashingMachine 洗衣机\ntype WashingMachine interface {\n\twash()\n\tdry()\n}\n\n// 甩干器\ntype dryer struct{}\n\n// 实现WashingMachine接口的dry()方法\nfunc (d dryer) dry() {\n\tfmt.Println(\"甩一甩\")\n}\n\n// 海尔洗衣机\ntype haier struct {\n\tdryer //嵌入甩干器\n}\n\n// 实现WashingMachine接口的wash()方法\nfunc (h haier) wash() {\n\tfmt.Println(\"洗刷刷\")\n}\n```\n\n## 接口嵌套\n\n接口与接口间可以通过嵌套创造出新的接口。\n\n```go\n// Sayer 接口\ntype Sayer interface {\n\tsay()\n}\n\n// Mover 接口\ntype Mover interface {\n\tmove()\n}\n\n// 接口嵌套\ntype animal interface {\n\tSayer\n\tMover\n}\n```\n\n嵌套得到的接口的使用与普通接口一样，这里我们让cat实现animal接口：\n\n```go\ntype cat struct {\n\tname string\n}\n\nfunc (c cat) say() {\n\tfmt.Println(\"喵喵喵\")\n}\n\nfunc (c cat) move() {\n\tfmt.Println(\"猫会动\")\n}\n\nfunc main() {\n\tvar x animal\n\tx = cat{name: \"花花\"}\n\tx.move()\n\tx.say()\n}\n```\n\n## 空接口\n\n### 空接口的定义\n\n空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。\n\n空接口类型的变量可以存储任意类型的变量。\n\n```go\nfunc main() {\n\t// 定义一个空接口x\n\tvar x interface{}\n\ts := \"Hello 沙河\"\n\tx = s\n\tfmt.Printf(\"type:%T value:%v\\n\", x, x)\n\ti := 100\n\tx = i\n\tfmt.Printf(\"type:%T value:%v\\n\", x, x)\n\tb := true\n\tx = b\n\tfmt.Printf(\"type:%T value:%v\\n\", x, x)\n}\n```\n\n### 空接口的应用\n\n#### 空接口作为函数的参数\n\n使用空接口实现可以接收任意类型的函数参数。\n\n```go\n// 空接口作为函数参数\nfunc show(a interface{}) {\n\tfmt.Printf(\"type:%T value:%v\\n\", a, a)\n}\n```\n\n#### 空接口作为map的值\n\n使用空接口实现可以保存任意值的字典。\n\n```go\n// 空接口作为map值\n\tvar studentInfo = make(map[string]interface{})\n\tstudentInfo[\"name\"] = \"沙河娜扎\"\n\tstudentInfo[\"age\"] = 18\n\tstudentInfo[\"married\"] = false\n\tfmt.Println(studentInfo)\n```\n\n## 类型断言\n\n空接口可以存储任意类型的值，那我们如何获取其存储的具体数据呢？\n\n### 接口值\n\n一个接口的值（简称接口值）是由`一个具体类型`和`具体类型的值`两部分组成的。这两部分分别称为接口的`动态类型`和`动态值`。\n\n我们来看一个具体的例子：\n\n```go\nvar w io.Writer\nw = os.Stdout\nw = new(bytes.Buffer)\nw = nil\n```\n\n请看下图分解：![接口值图解](https://liwenzhou.com/images/Go/interface/interface.png)\n\n想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：\n\n```go\nx.(T)\n```\n\n其中：\n\n- x：表示类型为`interface{}`的变量\n- T：表示断言`x`可能是的类型。\n\n该语法返回两个参数，第一个参数是`x`转化为`T`类型后的变量，第二个值是一个布尔值，若为`true`则表示断言成功，为`false`则表示断言失败。\n\n举个例子：\n\n```go\nfunc main() {\n\tvar x interface{}\n\tx = \"Hello 沙河\"\n\tv, ok := x.(string)\n\tif ok {\n\t\tfmt.Println(v)\n\t} else {\n\t\tfmt.Println(\"类型断言失败\")\n\t}\n}\n```\n\n上面的示例中如果要断言多次就需要写多个`if`判断，这个时候我们可以使用`switch`语句来实现：\n\n```go\nfunc justifyType(x interface{}) {\n\tswitch v := x.(type) {\n\tcase string:\n\t\tfmt.Printf(\"x is a string，value is %v\\n\", v)\n\tcase int:\n\t\tfmt.Printf(\"x is a int is %v\\n\", v)\n\tcase bool:\n\t\tfmt.Printf(\"x is a bool is %v\\n\", v)\n\tdefault:\n\t\tfmt.Println(\"unsupport type！\")\n\t}\n}\n```\n\n因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。\n\n关于接口需要注意的是，只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。\n\n# 练习题\n\n使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库。\n","slug":"Go语言基础之接口","published":1,"updated":"2023-02-03T05:11:27.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkrl0009srvi2t683qjz","content":"<p>接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"接口类型\"><a href=\"#接口类型\" class=\"headerlink\" title=\"接口类型\"></a>接口类型</h2><p>在Go语言中接口（interface）是一种类型，一种抽象的类型。</p>\n<p><code>interface</code>是一组<code>method</code>的集合，是<code>duck-type programming</code>的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。</p>\n<p>为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。</p>\n<h2 id=\"为什么要使用接口\"><a href=\"#为什么要使用接口\" class=\"headerlink\" title=\"为什么要使用接口\"></a>为什么要使用接口</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Cat)</span> <span class=\"title\">Say</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;喵喵喵&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d Dog)</span> <span class=\"title\">Say</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;汪汪汪&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := Cat&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;猫:&quot;</span>, c.Say())</span><br><span class=\"line\">\td := Dog&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;狗:&quot;</span>, d.Say())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中定义了猫和狗，然后它们都会叫，你会发现main函数中明显有重复的代码，如果我们后续再加上猪、青蛙等动物的话，我们的代码还会一直重复下去。那我们能不能把它们当成“能叫的动物”来处理呢？</p>\n<p>像类似的例子在我们编程过程中会经常遇到：</p>\n<p>比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？</p>\n<p>比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？</p>\n<p>比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？</p>\n<p>Go语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"接口的定义\"><a href=\"#接口的定义\" class=\"headerlink\" title=\"接口的定义\"></a>接口的定义</h2><p>Go语言提倡面向接口编程。</p>\n<p>每个接口由数个方法组成，接口的定义格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> 接口类型名 <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    方法名<span class=\"number\">1</span>( 参数列表<span class=\"number\">1</span> ) 返回值列表<span class=\"number\">1</span></span><br><span class=\"line\">    方法名<span class=\"number\">2</span>( 参数列表<span class=\"number\">2</span> ) 返回值列表<span class=\"number\">2</span></span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>接口名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有字符串功能的接口叫<code>Stringer</code>等。接口名最好要能突出该接口的类型含义。</li>\n<li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li>\n<li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。<br>举个例子：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Write([]<span class=\"keyword\">byte</span>) error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。</p>\n<h2 id=\"实现接口的条件\"><a href=\"#实现接口的条件\" class=\"headerlink\" title=\"实现接口的条件\"></a>实现接口的条件</h2><p>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个<strong>需要实现的方法列表</strong>。</p>\n<p>我们来定义一个<code>Sayer</code>接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsay()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义<code>dog</code>和<code>cat</code>两个结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Sayer</code>接口里只有一个<code>say</code>方法，所以我们只需要给<code>dog</code>和<code>cat </code>分别实现<code>say</code>方法就可以实现<code>Sayer</code>接口了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dog实现了Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;汪汪汪&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cat实现了Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;喵喵喵&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。</p>\n<h2 id=\"接口类型变量\"><a href=\"#接口类型变量\" class=\"headerlink\" title=\"接口类型变量\"></a>接口类型变量</h2><p>那实现了接口有什么用呢？</p>\n<p>接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，<code>Sayer</code>类型的变量能够存储<code>dog</code>和<code>cat</code>类型的变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Sayer <span class=\"comment\">// 声明一个Sayer类型的变量x</span></span><br><span class=\"line\">\ta := cat&#123;&#125;  <span class=\"comment\">// 实例化一个cat</span></span><br><span class=\"line\">\tb := dog&#123;&#125;  <span class=\"comment\">// 实例化一个dog</span></span><br><span class=\"line\">\tx = a       <span class=\"comment\">// 可以把cat实例直接赋值给x</span></span><br><span class=\"line\">\tx.say()     <span class=\"comment\">// 喵喵喵</span></span><br><span class=\"line\">\tx = b       <span class=\"comment\">// 可以把dog实例直接赋值给x</span></span><br><span class=\"line\">\tx.say()     <span class=\"comment\">// 汪汪汪</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Tips：</strong> 观察下面的代码，体味此处<code>_</code>的妙用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 摘自gin框架routergroup.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IRouter <span class=\"keyword\">interface</span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RouterGroup <span class=\"keyword\">struct</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ IRouter = &amp;RouterGroup&#123;&#125;  <span class=\"comment\">// 确保RouterGroup实现了接口IRouter</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"值接收者和指针接收者实现接口的区别\"><a href=\"#值接收者和指针接收者实现接口的区别\" class=\"headerlink\" title=\"值接收者和指针接收者实现接口的区别\"></a>值接收者和指针接收者实现接口的区别</h2><p>使用值接收者实现接口和使用指针接收者实现接口有什么区别呢？接下来我们通过一个例子看一下其中的区别。</p>\n<p>我们有一个<code>Mover</code>接口和一个<code>dog</code>结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值接收者实现接口\"><a href=\"#值接收者实现接口\" class=\"headerlink\" title=\"值接收者实现接口\"></a>值接收者实现接口</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;狗会动&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时实现接口的是<code>dog</code>类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Mover</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wangcai = dog&#123;&#125; <span class=\"comment\">// 旺财是dog类型</span></span><br><span class=\"line\">\tx = wangcai         <span class=\"comment\">// x可以接收dog类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fugui = &amp;dog&#123;&#125;  <span class=\"comment\">// 富贵是*dog类型</span></span><br><span class=\"line\">\tx = fugui           <span class=\"comment\">// x可以接收*dog类型</span></span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是dog结构体还是结构体指针*dog类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，dog指针<code>fugui</code>内部会自动求值<code>*fugui</code>。</p>\n<h3 id=\"指针接收者实现接口\"><a href=\"#指针接收者实现接口\" class=\"headerlink\" title=\"指针接收者实现接口\"></a>指针接收者实现接口</h3><p>同样的代码我们再来测试一下使用指针接收者有什么区别：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;狗会动&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Mover</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wangcai = dog&#123;&#125; <span class=\"comment\">// 旺财是dog类型</span></span><br><span class=\"line\">\tx = wangcai         <span class=\"comment\">// x不可以接收dog类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fugui = &amp;dog&#123;&#125;  <span class=\"comment\">// 富贵是*dog类型</span></span><br><span class=\"line\">\tx = fugui           <span class=\"comment\">// x可以接收*dog类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时实现<code>Mover</code>接口的是<code>*dog</code>类型，所以不能给<code>x</code>传入<code>dog</code>类型的wangcai，此时x只能存储<code>*dog</code>类型的值。</p>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><p><strong>注意：</strong>这是一道你需要回答“能”或者“不能”的题！</p>\n<p>首先请观察下面的这段代码，然后请回答这段代码能不能通过编译？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSpeak(<span class=\"keyword\">string</span>) <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu *Student)</span> <span class=\"title\">Speak</span><span class=\"params\">(think <span class=\"keyword\">string</span>)</span> <span class=\"params\">(talk <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> think == <span class=\"string\">&quot;sb&quot;</span> &#123;</span><br><span class=\"line\">\t\ttalk = <span class=\"string\">&quot;你是个大帅比&quot;</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\ttalk = <span class=\"string\">&quot;您好&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> peo People = Student&#123;&#125;</span><br><span class=\"line\">\tthink := <span class=\"string\">&quot;bitch&quot;</span></span><br><span class=\"line\">\tfmt.Println(peo.Speak(think))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型与接口的关系\"><a href=\"#类型与接口的关系\" class=\"headerlink\" title=\"类型与接口的关系\"></a>类型与接口的关系</h2><h3 id=\"一个类型实现多个接口\"><a href=\"#一个类型实现多个接口\" class=\"headerlink\" title=\"一个类型实现多个接口\"></a>一个类型实现多个接口</h3><p>一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以叫，也可以动。我们就分别定义Sayer接口和Mover接口，如下： <code>Mover</code>接口。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsay()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dog既可以实现Sayer接口，也可以实现Mover接口。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会叫汪汪汪\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会动\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Sayer</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> y Mover</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = dog&#123;name: <span class=\"string\">&quot;旺财&quot;</span>&#125;</span><br><span class=\"line\">\tx = a</span><br><span class=\"line\">\ty = a</span><br><span class=\"line\">\tx.say()</span><br><span class=\"line\">\ty.move()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多个类型实现同一接口\"><a href=\"#多个类型实现同一接口\" class=\"headerlink\" title=\"多个类型实现同一接口\"></a>多个类型实现同一接口</h3><p>Go语言中不同的类型还可以实现同一接口 首先我们定义一个<code>Mover</code>接口，它要求必须由一个<code>move</code>方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如狗可以动，汽车也可以动，可以使用如下代码实现这个关系：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> car <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbrand <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dog类型实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会跑\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// car类型实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c car)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s速度70迈\\n&quot;</span>, c.brand)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候我们在代码中就可以把狗和汽车当成一个会动的物体来处理了，不再需要关注它们具体是什么，只需要调用它们的<code>move</code>方法就可以了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Mover</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = dog&#123;name: <span class=\"string\">&quot;旺财&quot;</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = car&#123;brand: <span class=\"string\">&quot;保时捷&quot;</span>&#125;</span><br><span class=\"line\">\tx = a</span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">\tx = b</span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码执行结果如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">旺财会跑</span><br><span class=\"line\">保时捷速度<span class=\"number\">70</span>迈</span><br></pre></td></tr></table></figure>\n\n<p>并且一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WashingMachine 洗衣机</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> WashingMachine <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\twash()</span><br><span class=\"line\">\tdry()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 甩干器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dryer <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现WashingMachine接口的dry()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dryer)</span> <span class=\"title\">dry</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;甩一甩&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 海尔洗衣机</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> haier <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tdryer <span class=\"comment\">//嵌入甩干器</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现WashingMachine接口的wash()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h haier)</span> <span class=\"title\">wash</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;洗刷刷&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口嵌套\"><a href=\"#接口嵌套\" class=\"headerlink\" title=\"接口嵌套\"></a>接口嵌套</h2><p>接口与接口间可以通过嵌套创造出新的接口。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsay()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口嵌套</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> animal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSayer</span><br><span class=\"line\">\tMover</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>嵌套得到的接口的使用与普通接口一样，这里我们让cat实现animal接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;喵喵喵&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;猫会动&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x animal</span><br><span class=\"line\">\tx = cat&#123;name: <span class=\"string\">&quot;花花&quot;</span>&#125;</span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">\tx.say()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"空接口\"><a href=\"#空接口\" class=\"headerlink\" title=\"空接口\"></a>空接口</h2><h3 id=\"空接口的定义\"><a href=\"#空接口的定义\" class=\"headerlink\" title=\"空接口的定义\"></a>空接口的定义</h3><p>空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。</p>\n<p>空接口类型的变量可以存储任意类型的变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个空接口x</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\ts := <span class=\"string\">&quot;Hello 沙河&quot;</span></span><br><span class=\"line\">\tx = s</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, x, x)</span><br><span class=\"line\">\ti := <span class=\"number\">100</span></span><br><span class=\"line\">\tx = i</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, x, x)</span><br><span class=\"line\">\tb := <span class=\"literal\">true</span></span><br><span class=\"line\">\tx = b</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, x, x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"空接口的应用\"><a href=\"#空接口的应用\" class=\"headerlink\" title=\"空接口的应用\"></a>空接口的应用</h3><h4 id=\"空接口作为函数的参数\"><a href=\"#空接口作为函数的参数\" class=\"headerlink\" title=\"空接口作为函数的参数\"></a>空接口作为函数的参数</h4><p>使用空接口实现可以接收任意类型的函数参数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空接口作为函数参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">(a <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, a, a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"空接口作为map的值\"><a href=\"#空接口作为map的值\" class=\"headerlink\" title=\"空接口作为map的值\"></a>空接口作为map的值</h4><p>使用空接口实现可以保存任意值的字典。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空接口作为map值</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentInfo = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tstudentInfo[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;沙河娜扎&quot;</span></span><br><span class=\"line\">\tstudentInfo[<span class=\"string\">&quot;age&quot;</span>] = <span class=\"number\">18</span></span><br><span class=\"line\">\tstudentInfo[<span class=\"string\">&quot;married&quot;</span>] = <span class=\"literal\">false</span></span><br><span class=\"line\">\tfmt.Println(studentInfo)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>空接口可以存储任意类型的值，那我们如何获取其存储的具体数据呢？</p>\n<h3 id=\"接口值\"><a href=\"#接口值\" class=\"headerlink\" title=\"接口值\"></a>接口值</h3><p>一个接口的值（简称接口值）是由<code>一个具体类型</code>和<code>具体类型的值</code>两部分组成的。这两部分分别称为接口的<code>动态类型</code>和<code>动态值</code>。</p>\n<p>我们来看一个具体的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = os.Stdout</span><br><span class=\"line\">w = <span class=\"built_in\">new</span>(bytes.Buffer)</span><br><span class=\"line\">w = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<p>请看下图分解：<img src=\"https://liwenzhou.com/images/Go/interface/interface.png\" alt=\"接口值图解\"></p>\n<p>想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.(T)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>x：表示类型为<code>interface&#123;&#125;</code>的变量</li>\n<li>T：表示断言<code>x</code>可能是的类型。</li>\n</ul>\n<p>该语法返回两个参数，第一个参数是<code>x</code>转化为<code>T</code>类型后的变量，第二个值是一个布尔值，若为<code>true</code>则表示断言成功，为<code>false</code>则表示断言失败。</p>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tx = <span class=\"string\">&quot;Hello 沙河&quot;</span></span><br><span class=\"line\">\tv, ok := x.(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;类型断言失败&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的示例中如果要断言多次就需要写多个<code>if</code>判断，这个时候我们可以使用<code>switch</code>语句来实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">justifyType</span><span class=\"params\">(x <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v := x.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;x is a string，value is %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;x is a int is %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">bool</span>:</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;x is a bool is %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;unsupport type！&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。</p>\n<p>关于接口需要注意的是，只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。</p>\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><p>使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库。</p>\n","site":{"data":{}},"cover":false,"length":7188,"excerpt":"<p>接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"接口类型\"><a href=\"#接口类型\" class=\"headerlink\" title=\"接口类型\"></a>接口类型</h2><p>在Go语言中接口（interface）是一种类型，一种抽象的类型。</p>\n<p><code>interface</code>是一组<code>method</code>的集合，是<code>duck-type programming</code>的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。</p>\n<p>为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。</p>\n<h2 id=\"为什么要使用接口\"><a href=\"#为什么要使用接口\" class=\"headerlink\" title=\"为什么要使用接口\"></a>为什么要使用接口</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Cat)</span> <span class=\"title\">Say</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;喵喵喵&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d Dog)</span> <span class=\"title\">Say</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">&quot;汪汪汪&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := Cat&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;猫:&quot;</span>, c.Say())</span><br><span class=\"line\">\td := Dog&#123;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;狗:&quot;</span>, d.Say())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中定义了猫和狗，然后它们都会叫，你会发现main函数中明显有重复的代码，如果我们后续再加上猪、青蛙等动物的话，我们的代码还会一直重复下去。那我们能不能把它们当成“能叫的动物”来处理呢？</p>\n<p>像类似的例子在我们编程过程中会经常遇到：</p>\n<p>比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？</p>\n<p>比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？</p>\n<p>比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？</p>\n<p>Go语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。</p>","more":"<h2 id=\"接口的定义\"><a href=\"#接口的定义\" class=\"headerlink\" title=\"接口的定义\"></a>接口的定义</h2><p>Go语言提倡面向接口编程。</p>\n<p>每个接口由数个方法组成，接口的定义格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> 接口类型名 <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    方法名<span class=\"number\">1</span>( 参数列表<span class=\"number\">1</span> ) 返回值列表<span class=\"number\">1</span></span><br><span class=\"line\">    方法名<span class=\"number\">2</span>( 参数列表<span class=\"number\">2</span> ) 返回值列表<span class=\"number\">2</span></span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>接口名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有字符串功能的接口叫<code>Stringer</code>等。接口名最好要能突出该接口的类型含义。</li>\n<li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li>\n<li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。<br>举个例子：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Write([]<span class=\"keyword\">byte</span>) error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。</p>\n<h2 id=\"实现接口的条件\"><a href=\"#实现接口的条件\" class=\"headerlink\" title=\"实现接口的条件\"></a>实现接口的条件</h2><p>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个<strong>需要实现的方法列表</strong>。</p>\n<p>我们来定义一个<code>Sayer</code>接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsay()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义<code>dog</code>和<code>cat</code>两个结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为<code>Sayer</code>接口里只有一个<code>say</code>方法，所以我们只需要给<code>dog</code>和<code>cat </code>分别实现<code>say</code>方法就可以实现<code>Sayer</code>接口了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dog实现了Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;汪汪汪&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cat实现了Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;喵喵喵&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。</p>\n<h2 id=\"接口类型变量\"><a href=\"#接口类型变量\" class=\"headerlink\" title=\"接口类型变量\"></a>接口类型变量</h2><p>那实现了接口有什么用呢？</p>\n<p>接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，<code>Sayer</code>类型的变量能够存储<code>dog</code>和<code>cat</code>类型的变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Sayer <span class=\"comment\">// 声明一个Sayer类型的变量x</span></span><br><span class=\"line\">\ta := cat&#123;&#125;  <span class=\"comment\">// 实例化一个cat</span></span><br><span class=\"line\">\tb := dog&#123;&#125;  <span class=\"comment\">// 实例化一个dog</span></span><br><span class=\"line\">\tx = a       <span class=\"comment\">// 可以把cat实例直接赋值给x</span></span><br><span class=\"line\">\tx.say()     <span class=\"comment\">// 喵喵喵</span></span><br><span class=\"line\">\tx = b       <span class=\"comment\">// 可以把dog实例直接赋值给x</span></span><br><span class=\"line\">\tx.say()     <span class=\"comment\">// 汪汪汪</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Tips：</strong> 观察下面的代码，体味此处<code>_</code>的妙用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 摘自gin框架routergroup.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IRouter <span class=\"keyword\">interface</span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RouterGroup <span class=\"keyword\">struct</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ IRouter = &amp;RouterGroup&#123;&#125;  <span class=\"comment\">// 确保RouterGroup实现了接口IRouter</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"值接收者和指针接收者实现接口的区别\"><a href=\"#值接收者和指针接收者实现接口的区别\" class=\"headerlink\" title=\"值接收者和指针接收者实现接口的区别\"></a>值接收者和指针接收者实现接口的区别</h2><p>使用值接收者实现接口和使用指针接收者实现接口有什么区别呢？接下来我们通过一个例子看一下其中的区别。</p>\n<p>我们有一个<code>Mover</code>接口和一个<code>dog</code>结构体。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值接收者实现接口\"><a href=\"#值接收者实现接口\" class=\"headerlink\" title=\"值接收者实现接口\"></a>值接收者实现接口</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;狗会动&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时实现接口的是<code>dog</code>类型：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Mover</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wangcai = dog&#123;&#125; <span class=\"comment\">// 旺财是dog类型</span></span><br><span class=\"line\">\tx = wangcai         <span class=\"comment\">// x可以接收dog类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fugui = &amp;dog&#123;&#125;  <span class=\"comment\">// 富贵是*dog类型</span></span><br><span class=\"line\">\tx = fugui           <span class=\"comment\">// x可以接收*dog类型</span></span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是dog结构体还是结构体指针*dog类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，dog指针<code>fugui</code>内部会自动求值<code>*fugui</code>。</p>\n<h3 id=\"指针接收者实现接口\"><a href=\"#指针接收者实现接口\" class=\"headerlink\" title=\"指针接收者实现接口\"></a>指针接收者实现接口</h3><p>同样的代码我们再来测试一下使用指针接收者有什么区别：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;狗会动&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Mover</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wangcai = dog&#123;&#125; <span class=\"comment\">// 旺财是dog类型</span></span><br><span class=\"line\">\tx = wangcai         <span class=\"comment\">// x不可以接收dog类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fugui = &amp;dog&#123;&#125;  <span class=\"comment\">// 富贵是*dog类型</span></span><br><span class=\"line\">\tx = fugui           <span class=\"comment\">// x可以接收*dog类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时实现<code>Mover</code>接口的是<code>*dog</code>类型，所以不能给<code>x</code>传入<code>dog</code>类型的wangcai，此时x只能存储<code>*dog</code>类型的值。</p>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><p><strong>注意：</strong>这是一道你需要回答“能”或者“不能”的题！</p>\n<p>首先请观察下面的这段代码，然后请回答这段代码能不能通过编译？</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSpeak(<span class=\"keyword\">string</span>) <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu *Student)</span> <span class=\"title\">Speak</span><span class=\"params\">(think <span class=\"keyword\">string</span>)</span> <span class=\"params\">(talk <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> think == <span class=\"string\">&quot;sb&quot;</span> &#123;</span><br><span class=\"line\">\t\ttalk = <span class=\"string\">&quot;你是个大帅比&quot;</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\ttalk = <span class=\"string\">&quot;您好&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> peo People = Student&#123;&#125;</span><br><span class=\"line\">\tthink := <span class=\"string\">&quot;bitch&quot;</span></span><br><span class=\"line\">\tfmt.Println(peo.Speak(think))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型与接口的关系\"><a href=\"#类型与接口的关系\" class=\"headerlink\" title=\"类型与接口的关系\"></a>类型与接口的关系</h2><h3 id=\"一个类型实现多个接口\"><a href=\"#一个类型实现多个接口\" class=\"headerlink\" title=\"一个类型实现多个接口\"></a>一个类型实现多个接口</h3><p>一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以叫，也可以动。我们就分别定义Sayer接口和Mover接口，如下： <code>Mover</code>接口。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsay()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>dog既可以实现Sayer接口，也可以实现Mover接口。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会叫汪汪汪\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会动\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Sayer</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> y Mover</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = dog&#123;name: <span class=\"string\">&quot;旺财&quot;</span>&#125;</span><br><span class=\"line\">\tx = a</span><br><span class=\"line\">\ty = a</span><br><span class=\"line\">\tx.say()</span><br><span class=\"line\">\ty.move()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多个类型实现同一接口\"><a href=\"#多个类型实现同一接口\" class=\"headerlink\" title=\"多个类型实现同一接口\"></a>多个类型实现同一接口</h3><p>Go语言中不同的类型还可以实现同一接口 首先我们定义一个<code>Mover</code>接口，它要求必须由一个<code>move</code>方法。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例如狗可以动，汽车也可以动，可以使用如下代码实现这个关系：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> car <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbrand <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dog类型实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s会跑\\n&quot;</span>, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// car类型实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c car)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s速度70迈\\n&quot;</span>, c.brand)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候我们在代码中就可以把狗和汽车当成一个会动的物体来处理了，不再需要关注它们具体是什么，只需要调用它们的<code>move</code>方法就可以了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x Mover</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a = dog&#123;name: <span class=\"string\">&quot;旺财&quot;</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b = car&#123;brand: <span class=\"string\">&quot;保时捷&quot;</span>&#125;</span><br><span class=\"line\">\tx = a</span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">\tx = b</span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码执行结果如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">旺财会跑</span><br><span class=\"line\">保时捷速度<span class=\"number\">70</span>迈</span><br></pre></td></tr></table></figure>\n\n<p>并且一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WashingMachine 洗衣机</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> WashingMachine <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\twash()</span><br><span class=\"line\">\tdry()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 甩干器</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dryer <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现WashingMachine接口的dry()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dryer)</span> <span class=\"title\">dry</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;甩一甩&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 海尔洗衣机</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> haier <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tdryer <span class=\"comment\">//嵌入甩干器</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现WashingMachine接口的wash()方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h haier)</span> <span class=\"title\">wash</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;洗刷刷&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口嵌套\"><a href=\"#接口嵌套\" class=\"headerlink\" title=\"接口嵌套\"></a>接口嵌套</h2><p>接口与接口间可以通过嵌套创造出新的接口。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tsay()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tmove()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口嵌套</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> animal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tSayer</span><br><span class=\"line\">\tMover</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>嵌套得到的接口的使用与普通接口一样，这里我们让cat实现animal接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;喵喵喵&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;猫会动&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x animal</span><br><span class=\"line\">\tx = cat&#123;name: <span class=\"string\">&quot;花花&quot;</span>&#125;</span><br><span class=\"line\">\tx.move()</span><br><span class=\"line\">\tx.say()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"空接口\"><a href=\"#空接口\" class=\"headerlink\" title=\"空接口\"></a>空接口</h2><h3 id=\"空接口的定义\"><a href=\"#空接口的定义\" class=\"headerlink\" title=\"空接口的定义\"></a>空接口的定义</h3><p>空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。</p>\n<p>空接口类型的变量可以存储任意类型的变量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个空接口x</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\ts := <span class=\"string\">&quot;Hello 沙河&quot;</span></span><br><span class=\"line\">\tx = s</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, x, x)</span><br><span class=\"line\">\ti := <span class=\"number\">100</span></span><br><span class=\"line\">\tx = i</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, x, x)</span><br><span class=\"line\">\tb := <span class=\"literal\">true</span></span><br><span class=\"line\">\tx = b</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, x, x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"空接口的应用\"><a href=\"#空接口的应用\" class=\"headerlink\" title=\"空接口的应用\"></a>空接口的应用</h3><h4 id=\"空接口作为函数的参数\"><a href=\"#空接口作为函数的参数\" class=\"headerlink\" title=\"空接口作为函数的参数\"></a>空接口作为函数的参数</h4><p>使用空接口实现可以接收任意类型的函数参数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空接口作为函数参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">show</span><span class=\"params\">(a <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;type:%T value:%v\\n&quot;</span>, a, a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"空接口作为map的值\"><a href=\"#空接口作为map的值\" class=\"headerlink\" title=\"空接口作为map的值\"></a>空接口作为map的值</h4><p>使用空接口实现可以保存任意值的字典。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空接口作为map值</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> studentInfo = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">\tstudentInfo[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;沙河娜扎&quot;</span></span><br><span class=\"line\">\tstudentInfo[<span class=\"string\">&quot;age&quot;</span>] = <span class=\"number\">18</span></span><br><span class=\"line\">\tstudentInfo[<span class=\"string\">&quot;married&quot;</span>] = <span class=\"literal\">false</span></span><br><span class=\"line\">\tfmt.Println(studentInfo)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>空接口可以存储任意类型的值，那我们如何获取其存储的具体数据呢？</p>\n<h3 id=\"接口值\"><a href=\"#接口值\" class=\"headerlink\" title=\"接口值\"></a>接口值</h3><p>一个接口的值（简称接口值）是由<code>一个具体类型</code>和<code>具体类型的值</code>两部分组成的。这两部分分别称为接口的<code>动态类型</code>和<code>动态值</code>。</p>\n<p>我们来看一个具体的例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = os.Stdout</span><br><span class=\"line\">w = <span class=\"built_in\">new</span>(bytes.Buffer)</span><br><span class=\"line\">w = <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<p>请看下图分解：<img src=\"https://liwenzhou.com/images/Go/interface/interface.png\" alt=\"接口值图解\"></p>\n<p>想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.(T)</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>x：表示类型为<code>interface&#123;&#125;</code>的变量</li>\n<li>T：表示断言<code>x</code>可能是的类型。</li>\n</ul>\n<p>该语法返回两个参数，第一个参数是<code>x</code>转化为<code>T</code>类型后的变量，第二个值是一个布尔值，若为<code>true</code>则表示断言成功，为<code>false</code>则表示断言失败。</p>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tx = <span class=\"string\">&quot;Hello 沙河&quot;</span></span><br><span class=\"line\">\tv, ok := x.(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;类型断言失败&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的示例中如果要断言多次就需要写多个<code>if</code>判断，这个时候我们可以使用<code>switch</code>语句来实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">justifyType</span><span class=\"params\">(x <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v := x.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;x is a string，value is %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;x is a int is %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"keyword\">bool</span>:</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;x is a bool is %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;unsupport type！&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。</p>\n<p>关于接口需要注意的是，只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。</p>\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><p>使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库。</p>"},{"title":"My-First-Blog","date":"2021-06-22T02:46:14.000Z","_content":"**dlv**专业调试Go语言的一款工具。\n\n安装：\n\n```\ngo get -u github.com/go-delve/delve/cmd/dlv\n```\n\n配置：\n\n```\nexport GOROOT=/usr/lib/golang\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOPATH/bin\n```\n\n使用：\n\n1、dlv debug xxx.go 指定需要debug的文件\n\n2、进入dlv交互式窗口后，b : 指定断点\n\n3、r arg 指定运行参数\n\n4、n 执行一行\n\n5、c 运行至断点或程序结束\n","source":"_posts/My-First-Blog.md","raw":"---\ntitle: My-First-Blog\ndate: 2021-06-22 10:46:14\ntags:\n---\n**dlv**专业调试Go语言的一款工具。\n\n安装：\n\n```\ngo get -u github.com/go-delve/delve/cmd/dlv\n```\n\n配置：\n\n```\nexport GOROOT=/usr/lib/golang\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOPATH/bin\n```\n\n使用：\n\n1、dlv debug xxx.go 指定需要debug的文件\n\n2、进入dlv交互式窗口后，b : 指定断点\n\n3、r arg 指定运行参数\n\n4、n 执行一行\n\n5、c 运行至断点或程序结束\n","slug":"My-First-Blog","published":1,"updated":"2023-02-03T05:11:27.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkrl000bsrvi14dkb72y","content":"<p><strong>dlv</strong>专业调试Go语言的一款工具。</p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-delve/delve/cmd/dlv</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GOROOT=/usr/lib/golang</span><br><span class=\"line\">export GOPATH=$HOME/go</span><br><span class=\"line\">export PATH=$PATH:$GOPATH/bin</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<p>1、dlv debug xxx.go 指定需要debug的文件</p>\n<p>2、进入dlv交互式窗口后，b : 指定断点</p>\n<p>3、r arg 指定运行参数</p>\n<p>4、n 执行一行</p>\n<p>5、c 运行至断点或程序结束</p>\n","site":{"data":{}},"cover":false,"length":227,"excerpt":"","more":"<p><strong>dlv</strong>专业调试Go语言的一款工具。</p>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/go-delve/delve/cmd/dlv</span><br></pre></td></tr></table></figure>\n\n<p>配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GOROOT=/usr/lib/golang</span><br><span class=\"line\">export GOPATH=$HOME/go</span><br><span class=\"line\">export PATH=$PATH:$GOPATH/bin</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<p>1、dlv debug xxx.go 指定需要debug的文件</p>\n<p>2、进入dlv交互式窗口后，b : 指定断点</p>\n<p>3、r arg 指定运行参数</p>\n<p>4、n 执行一行</p>\n<p>5、c 运行至断点或程序结束</p>\n"},{"title":"My New Post","date":"2021-06-21T13:13:02.000Z","_content":"","source":"_posts/My-New-Post.md","raw":"---\ntitle: My New Post\ndate: 2021-06-21 21:13:02\ntags:\n---\n","slug":"My-New-Post","published":1,"updated":"2023-02-03T05:11:27.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkrm000csrvi43wp2h4l","content":"","site":{"data":{}},"cover":false,"length":0,"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: 默认分类\ntags: 默认标签\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-02-03T05:11:27.055Z","updated":"2023-02-03T05:11:27.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cldo4vkrm000esrvi07o47sb0","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"length":367,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cldo4vkri0003srvi6xw198tk","category_id":"cldo4vkrk0007srvi043seujf","_id":"cldo4vkrm000fsrvifo255zk1"},{"post_id":"cldo4vkrm000esrvi07o47sb0","category_id":"cldo4vkrn000hsrvif5w9ee2l","_id":"cldo4vkrn000msrvi9azvad0r"}],"PostTag":[{"post_id":"cldo4vkrg0001srvi79o223ly","tag_id":"cldo4vkrj0004srvibmtjg397","_id":"cldo4vkrn000isrvidf6t3apo"},{"post_id":"cldo4vkrg0001srvi79o223ly","tag_id":"cldo4vkrl000asrvihxvtfpig","_id":"cldo4vkrn000jsrvif6kjeivj"},{"post_id":"cldo4vkrg0001srvi79o223ly","tag_id":"cldo4vkrm000dsrvi0tk5h1kr","_id":"cldo4vkrn000lsrvib2z49w72"},{"post_id":"cldo4vkri0003srvi6xw198tk","tag_id":"cldo4vkrn000gsrvieaik15qd","_id":"cldo4vkro000osrvi8btk5k5h"},{"post_id":"cldo4vkri0003srvi6xw198tk","tag_id":"cldo4vkrn000ksrvibz5shvbk","_id":"cldo4vkro000psrvi5xau116o"},{"post_id":"cldo4vkrk0006srvies3ldnql","tag_id":"cldo4vkrj0004srvibmtjg397","_id":"cldo4vkro000tsrvievvadyzx"},{"post_id":"cldo4vkrk0006srvies3ldnql","tag_id":"cldo4vkrl000asrvihxvtfpig","_id":"cldo4vkro000usrvihtes6qu5"},{"post_id":"cldo4vkrk0006srvies3ldnql","tag_id":"cldo4vkrm000dsrvi0tk5h1kr","_id":"cldo4vkro000wsrvifj9f333s"},{"post_id":"cldo4vkrl0009srvi2t683qjz","tag_id":"cldo4vkrj0004srvibmtjg397","_id":"cldo4vkro000ysrvi2nghb1rl"},{"post_id":"cldo4vkrl0009srvi2t683qjz","tag_id":"cldo4vkrl000asrvihxvtfpig","_id":"cldo4vkro000zsrvi3r8begcu"},{"post_id":"cldo4vkrl0009srvi2t683qjz","tag_id":"cldo4vkrm000dsrvi0tk5h1kr","_id":"cldo4vkro0010srvi7ydzhnyz"},{"post_id":"cldo4vkrm000esrvi07o47sb0","tag_id":"cldo4vkro000xsrvi35abap02","_id":"cldo4vkro0011srvi19sb2dfx"}],"Tag":[{"name":"Go","_id":"cldo4vkrj0004srvibmtjg397"},{"name":"Golang","_id":"cldo4vkrl000asrvihxvtfpig"},{"name":"Go学习","_id":"cldo4vkrm000dsrvi0tk5h1kr"},{"name":"hexo","_id":"cldo4vkrn000gsrvieaik15qd"},{"name":"blog","_id":"cldo4vkrn000ksrvibz5shvbk"},{"name":"默认标签","_id":"cldo4vkro000xsrvi35abap02"}]}}